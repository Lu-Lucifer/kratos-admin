// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"kratos-admin/app/admin/service/internal/data/ent/insitemessagecategory"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InSiteMessageCategoryDelete is the builder for deleting a InSiteMessageCategory entity.
type InSiteMessageCategoryDelete struct {
	config
	hooks    []Hook
	mutation *InSiteMessageCategoryMutation
}

// Where appends a list predicates to the InSiteMessageCategoryDelete builder.
func (ismcd *InSiteMessageCategoryDelete) Where(ps ...predicate.InSiteMessageCategory) *InSiteMessageCategoryDelete {
	ismcd.mutation.Where(ps...)
	return ismcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ismcd *InSiteMessageCategoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ismcd.sqlExec, ismcd.mutation, ismcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ismcd *InSiteMessageCategoryDelete) ExecX(ctx context.Context) int {
	n, err := ismcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ismcd *InSiteMessageCategoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(insitemessagecategory.Table, sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32))
	if ps := ismcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ismcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ismcd.mutation.done = true
	return affected, err
}

// InSiteMessageCategoryDeleteOne is the builder for deleting a single InSiteMessageCategory entity.
type InSiteMessageCategoryDeleteOne struct {
	ismcd *InSiteMessageCategoryDelete
}

// Where appends a list predicates to the InSiteMessageCategoryDelete builder.
func (ismcdo *InSiteMessageCategoryDeleteOne) Where(ps ...predicate.InSiteMessageCategory) *InSiteMessageCategoryDeleteOne {
	ismcdo.ismcd.mutation.Where(ps...)
	return ismcdo
}

// Exec executes the deletion query.
func (ismcdo *InSiteMessageCategoryDeleteOne) Exec(ctx context.Context) error {
	n, err := ismcdo.ismcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{insitemessagecategory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ismcdo *InSiteMessageCategoryDeleteOne) ExecX(ctx context.Context) {
	if err := ismcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
