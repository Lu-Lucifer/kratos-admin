// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/insitemessagecategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InSiteMessageCategoryCreate is the builder for creating a InSiteMessageCategory entity.
type InSiteMessageCategoryCreate struct {
	config
	mutation *InSiteMessageCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (ismcc *InSiteMessageCategoryCreate) SetCreateTime(t time.Time) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetCreateTime(t)
	return ismcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableCreateTime(t *time.Time) *InSiteMessageCategoryCreate {
	if t != nil {
		ismcc.SetCreateTime(*t)
	}
	return ismcc
}

// SetUpdateTime sets the "update_time" field.
func (ismcc *InSiteMessageCategoryCreate) SetUpdateTime(t time.Time) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetUpdateTime(t)
	return ismcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableUpdateTime(t *time.Time) *InSiteMessageCategoryCreate {
	if t != nil {
		ismcc.SetUpdateTime(*t)
	}
	return ismcc
}

// SetDeleteTime sets the "delete_time" field.
func (ismcc *InSiteMessageCategoryCreate) SetDeleteTime(t time.Time) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetDeleteTime(t)
	return ismcc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableDeleteTime(t *time.Time) *InSiteMessageCategoryCreate {
	if t != nil {
		ismcc.SetDeleteTime(*t)
	}
	return ismcc
}

// SetCreateBy sets the "create_by" field.
func (ismcc *InSiteMessageCategoryCreate) SetCreateBy(u uint32) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetCreateBy(u)
	return ismcc
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableCreateBy(u *uint32) *InSiteMessageCategoryCreate {
	if u != nil {
		ismcc.SetCreateBy(*u)
	}
	return ismcc
}

// SetUpdateBy sets the "update_by" field.
func (ismcc *InSiteMessageCategoryCreate) SetUpdateBy(u uint32) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetUpdateBy(u)
	return ismcc
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableUpdateBy(u *uint32) *InSiteMessageCategoryCreate {
	if u != nil {
		ismcc.SetUpdateBy(*u)
	}
	return ismcc
}

// SetRemark sets the "remark" field.
func (ismcc *InSiteMessageCategoryCreate) SetRemark(s string) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetRemark(s)
	return ismcc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableRemark(s *string) *InSiteMessageCategoryCreate {
	if s != nil {
		ismcc.SetRemark(*s)
	}
	return ismcc
}

// SetName sets the "name" field.
func (ismcc *InSiteMessageCategoryCreate) SetName(s string) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetName(s)
	return ismcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableName(s *string) *InSiteMessageCategoryCreate {
	if s != nil {
		ismcc.SetName(*s)
	}
	return ismcc
}

// SetCode sets the "code" field.
func (ismcc *InSiteMessageCategoryCreate) SetCode(s string) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetCode(s)
	return ismcc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableCode(s *string) *InSiteMessageCategoryCreate {
	if s != nil {
		ismcc.SetCode(*s)
	}
	return ismcc
}

// SetSortID sets the "sort_id" field.
func (ismcc *InSiteMessageCategoryCreate) SetSortID(i int32) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetSortID(i)
	return ismcc
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableSortID(i *int32) *InSiteMessageCategoryCreate {
	if i != nil {
		ismcc.SetSortID(*i)
	}
	return ismcc
}

// SetEnable sets the "enable" field.
func (ismcc *InSiteMessageCategoryCreate) SetEnable(b bool) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetEnable(b)
	return ismcc
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableEnable(b *bool) *InSiteMessageCategoryCreate {
	if b != nil {
		ismcc.SetEnable(*b)
	}
	return ismcc
}

// SetParentID sets the "parent_id" field.
func (ismcc *InSiteMessageCategoryCreate) SetParentID(u uint32) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetParentID(u)
	return ismcc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ismcc *InSiteMessageCategoryCreate) SetNillableParentID(u *uint32) *InSiteMessageCategoryCreate {
	if u != nil {
		ismcc.SetParentID(*u)
	}
	return ismcc
}

// SetID sets the "id" field.
func (ismcc *InSiteMessageCategoryCreate) SetID(u uint32) *InSiteMessageCategoryCreate {
	ismcc.mutation.SetID(u)
	return ismcc
}

// SetParent sets the "parent" edge to the InSiteMessageCategory entity.
func (ismcc *InSiteMessageCategoryCreate) SetParent(i *InSiteMessageCategory) *InSiteMessageCategoryCreate {
	return ismcc.SetParentID(i.ID)
}

// AddChildIDs adds the "children" edge to the InSiteMessageCategory entity by IDs.
func (ismcc *InSiteMessageCategoryCreate) AddChildIDs(ids ...uint32) *InSiteMessageCategoryCreate {
	ismcc.mutation.AddChildIDs(ids...)
	return ismcc
}

// AddChildren adds the "children" edges to the InSiteMessageCategory entity.
func (ismcc *InSiteMessageCategoryCreate) AddChildren(i ...*InSiteMessageCategory) *InSiteMessageCategoryCreate {
	ids := make([]uint32, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ismcc.AddChildIDs(ids...)
}

// Mutation returns the InSiteMessageCategoryMutation object of the builder.
func (ismcc *InSiteMessageCategoryCreate) Mutation() *InSiteMessageCategoryMutation {
	return ismcc.mutation
}

// Save creates the InSiteMessageCategory in the database.
func (ismcc *InSiteMessageCategoryCreate) Save(ctx context.Context) (*InSiteMessageCategory, error) {
	ismcc.defaults()
	return withHooks(ctx, ismcc.sqlSave, ismcc.mutation, ismcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ismcc *InSiteMessageCategoryCreate) SaveX(ctx context.Context) *InSiteMessageCategory {
	v, err := ismcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ismcc *InSiteMessageCategoryCreate) Exec(ctx context.Context) error {
	_, err := ismcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ismcc *InSiteMessageCategoryCreate) ExecX(ctx context.Context) {
	if err := ismcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ismcc *InSiteMessageCategoryCreate) defaults() {
	if _, ok := ismcc.mutation.Remark(); !ok {
		v := insitemessagecategory.DefaultRemark
		ismcc.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ismcc *InSiteMessageCategoryCreate) check() error {
	if v, ok := ismcc.mutation.ID(); ok {
		if err := insitemessagecategory.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "InSiteMessageCategory.id": %w`, err)}
		}
	}
	return nil
}

func (ismcc *InSiteMessageCategoryCreate) sqlSave(ctx context.Context) (*InSiteMessageCategory, error) {
	if err := ismcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ismcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ismcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ismcc.mutation.id = &_node.ID
	ismcc.mutation.done = true
	return _node, nil
}

func (ismcc *InSiteMessageCategoryCreate) createSpec() (*InSiteMessageCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &InSiteMessageCategory{config: ismcc.config}
		_spec = sqlgraph.NewCreateSpec(insitemessagecategory.Table, sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ismcc.conflict
	if id, ok := ismcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ismcc.mutation.CreateTime(); ok {
		_spec.SetField(insitemessagecategory.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := ismcc.mutation.UpdateTime(); ok {
		_spec.SetField(insitemessagecategory.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := ismcc.mutation.DeleteTime(); ok {
		_spec.SetField(insitemessagecategory.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := ismcc.mutation.CreateBy(); ok {
		_spec.SetField(insitemessagecategory.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := ismcc.mutation.UpdateBy(); ok {
		_spec.SetField(insitemessagecategory.FieldUpdateBy, field.TypeUint32, value)
		_node.UpdateBy = &value
	}
	if value, ok := ismcc.mutation.Remark(); ok {
		_spec.SetField(insitemessagecategory.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := ismcc.mutation.Name(); ok {
		_spec.SetField(insitemessagecategory.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := ismcc.mutation.Code(); ok {
		_spec.SetField(insitemessagecategory.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := ismcc.mutation.SortID(); ok {
		_spec.SetField(insitemessagecategory.FieldSortID, field.TypeInt32, value)
		_node.SortID = &value
	}
	if value, ok := ismcc.mutation.Enable(); ok {
		_spec.SetField(insitemessagecategory.FieldEnable, field.TypeBool, value)
		_node.Enable = &value
	}
	if nodes := ismcc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insitemessagecategory.ParentTable,
			Columns: []string{insitemessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ismcc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insitemessagecategory.ChildrenTable,
			Columns: []string{insitemessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InSiteMessageCategory.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InSiteMessageCategoryUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ismcc *InSiteMessageCategoryCreate) OnConflict(opts ...sql.ConflictOption) *InSiteMessageCategoryUpsertOne {
	ismcc.conflict = opts
	return &InSiteMessageCategoryUpsertOne{
		create: ismcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InSiteMessageCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ismcc *InSiteMessageCategoryCreate) OnConflictColumns(columns ...string) *InSiteMessageCategoryUpsertOne {
	ismcc.conflict = append(ismcc.conflict, sql.ConflictColumns(columns...))
	return &InSiteMessageCategoryUpsertOne{
		create: ismcc,
	}
}

type (
	// InSiteMessageCategoryUpsertOne is the builder for "upsert"-ing
	//  one InSiteMessageCategory node.
	InSiteMessageCategoryUpsertOne struct {
		create *InSiteMessageCategoryCreate
	}

	// InSiteMessageCategoryUpsert is the "OnConflict" setter.
	InSiteMessageCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *InSiteMessageCategoryUpsert) SetUpdateTime(v time.Time) *InSiteMessageCategoryUpsert {
	u.Set(insitemessagecategory.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsert) UpdateUpdateTime() *InSiteMessageCategoryUpsert {
	u.SetExcluded(insitemessagecategory.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *InSiteMessageCategoryUpsert) ClearUpdateTime() *InSiteMessageCategoryUpsert {
	u.SetNull(insitemessagecategory.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *InSiteMessageCategoryUpsert) SetDeleteTime(v time.Time) *InSiteMessageCategoryUpsert {
	u.Set(insitemessagecategory.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsert) UpdateDeleteTime() *InSiteMessageCategoryUpsert {
	u.SetExcluded(insitemessagecategory.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *InSiteMessageCategoryUpsert) ClearDeleteTime() *InSiteMessageCategoryUpsert {
	u.SetNull(insitemessagecategory.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *InSiteMessageCategoryUpsert) SetCreateBy(v uint32) *InSiteMessageCategoryUpsert {
	u.Set(insitemessagecategory.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsert) UpdateCreateBy() *InSiteMessageCategoryUpsert {
	u.SetExcluded(insitemessagecategory.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *InSiteMessageCategoryUpsert) AddCreateBy(v uint32) *InSiteMessageCategoryUpsert {
	u.Add(insitemessagecategory.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *InSiteMessageCategoryUpsert) ClearCreateBy() *InSiteMessageCategoryUpsert {
	u.SetNull(insitemessagecategory.FieldCreateBy)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *InSiteMessageCategoryUpsert) SetUpdateBy(v uint32) *InSiteMessageCategoryUpsert {
	u.Set(insitemessagecategory.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsert) UpdateUpdateBy() *InSiteMessageCategoryUpsert {
	u.SetExcluded(insitemessagecategory.FieldUpdateBy)
	return u
}

// AddUpdateBy adds v to the "update_by" field.
func (u *InSiteMessageCategoryUpsert) AddUpdateBy(v uint32) *InSiteMessageCategoryUpsert {
	u.Add(insitemessagecategory.FieldUpdateBy, v)
	return u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *InSiteMessageCategoryUpsert) ClearUpdateBy() *InSiteMessageCategoryUpsert {
	u.SetNull(insitemessagecategory.FieldUpdateBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *InSiteMessageCategoryUpsert) SetRemark(v string) *InSiteMessageCategoryUpsert {
	u.Set(insitemessagecategory.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsert) UpdateRemark() *InSiteMessageCategoryUpsert {
	u.SetExcluded(insitemessagecategory.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *InSiteMessageCategoryUpsert) ClearRemark() *InSiteMessageCategoryUpsert {
	u.SetNull(insitemessagecategory.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *InSiteMessageCategoryUpsert) SetName(v string) *InSiteMessageCategoryUpsert {
	u.Set(insitemessagecategory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsert) UpdateName() *InSiteMessageCategoryUpsert {
	u.SetExcluded(insitemessagecategory.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *InSiteMessageCategoryUpsert) ClearName() *InSiteMessageCategoryUpsert {
	u.SetNull(insitemessagecategory.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *InSiteMessageCategoryUpsert) SetCode(v string) *InSiteMessageCategoryUpsert {
	u.Set(insitemessagecategory.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsert) UpdateCode() *InSiteMessageCategoryUpsert {
	u.SetExcluded(insitemessagecategory.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *InSiteMessageCategoryUpsert) ClearCode() *InSiteMessageCategoryUpsert {
	u.SetNull(insitemessagecategory.FieldCode)
	return u
}

// SetSortID sets the "sort_id" field.
func (u *InSiteMessageCategoryUpsert) SetSortID(v int32) *InSiteMessageCategoryUpsert {
	u.Set(insitemessagecategory.FieldSortID, v)
	return u
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsert) UpdateSortID() *InSiteMessageCategoryUpsert {
	u.SetExcluded(insitemessagecategory.FieldSortID)
	return u
}

// AddSortID adds v to the "sort_id" field.
func (u *InSiteMessageCategoryUpsert) AddSortID(v int32) *InSiteMessageCategoryUpsert {
	u.Add(insitemessagecategory.FieldSortID, v)
	return u
}

// ClearSortID clears the value of the "sort_id" field.
func (u *InSiteMessageCategoryUpsert) ClearSortID() *InSiteMessageCategoryUpsert {
	u.SetNull(insitemessagecategory.FieldSortID)
	return u
}

// SetEnable sets the "enable" field.
func (u *InSiteMessageCategoryUpsert) SetEnable(v bool) *InSiteMessageCategoryUpsert {
	u.Set(insitemessagecategory.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsert) UpdateEnable() *InSiteMessageCategoryUpsert {
	u.SetExcluded(insitemessagecategory.FieldEnable)
	return u
}

// ClearEnable clears the value of the "enable" field.
func (u *InSiteMessageCategoryUpsert) ClearEnable() *InSiteMessageCategoryUpsert {
	u.SetNull(insitemessagecategory.FieldEnable)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *InSiteMessageCategoryUpsert) SetParentID(v uint32) *InSiteMessageCategoryUpsert {
	u.Set(insitemessagecategory.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsert) UpdateParentID() *InSiteMessageCategoryUpsert {
	u.SetExcluded(insitemessagecategory.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *InSiteMessageCategoryUpsert) ClearParentID() *InSiteMessageCategoryUpsert {
	u.SetNull(insitemessagecategory.FieldParentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InSiteMessageCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(insitemessagecategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InSiteMessageCategoryUpsertOne) UpdateNewValues() *InSiteMessageCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(insitemessagecategory.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(insitemessagecategory.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InSiteMessageCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InSiteMessageCategoryUpsertOne) Ignore() *InSiteMessageCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InSiteMessageCategoryUpsertOne) DoNothing() *InSiteMessageCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InSiteMessageCategoryCreate.OnConflict
// documentation for more info.
func (u *InSiteMessageCategoryUpsertOne) Update(set func(*InSiteMessageCategoryUpsert)) *InSiteMessageCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InSiteMessageCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *InSiteMessageCategoryUpsertOne) SetUpdateTime(v time.Time) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertOne) UpdateUpdateTime() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *InSiteMessageCategoryUpsertOne) ClearUpdateTime() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *InSiteMessageCategoryUpsertOne) SetDeleteTime(v time.Time) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertOne) UpdateDeleteTime() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *InSiteMessageCategoryUpsertOne) ClearDeleteTime() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *InSiteMessageCategoryUpsertOne) SetCreateBy(v uint32) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *InSiteMessageCategoryUpsertOne) AddCreateBy(v uint32) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertOne) UpdateCreateBy() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *InSiteMessageCategoryUpsertOne) ClearCreateBy() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *InSiteMessageCategoryUpsertOne) SetUpdateBy(v uint32) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *InSiteMessageCategoryUpsertOne) AddUpdateBy(v uint32) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertOne) UpdateUpdateBy() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *InSiteMessageCategoryUpsertOne) ClearUpdateBy() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *InSiteMessageCategoryUpsertOne) SetRemark(v string) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertOne) UpdateRemark() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *InSiteMessageCategoryUpsertOne) ClearRemark() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *InSiteMessageCategoryUpsertOne) SetName(v string) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertOne) UpdateName() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *InSiteMessageCategoryUpsertOne) ClearName() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *InSiteMessageCategoryUpsertOne) SetCode(v string) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertOne) UpdateCode() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *InSiteMessageCategoryUpsertOne) ClearCode() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearCode()
	})
}

// SetSortID sets the "sort_id" field.
func (u *InSiteMessageCategoryUpsertOne) SetSortID(v int32) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetSortID(v)
	})
}

// AddSortID adds v to the "sort_id" field.
func (u *InSiteMessageCategoryUpsertOne) AddSortID(v int32) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.AddSortID(v)
	})
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertOne) UpdateSortID() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateSortID()
	})
}

// ClearSortID clears the value of the "sort_id" field.
func (u *InSiteMessageCategoryUpsertOne) ClearSortID() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearSortID()
	})
}

// SetEnable sets the "enable" field.
func (u *InSiteMessageCategoryUpsertOne) SetEnable(v bool) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertOne) UpdateEnable() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateEnable()
	})
}

// ClearEnable clears the value of the "enable" field.
func (u *InSiteMessageCategoryUpsertOne) ClearEnable() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearEnable()
	})
}

// SetParentID sets the "parent_id" field.
func (u *InSiteMessageCategoryUpsertOne) SetParentID(v uint32) *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertOne) UpdateParentID() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *InSiteMessageCategoryUpsertOne) ClearParentID() *InSiteMessageCategoryUpsertOne {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *InSiteMessageCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InSiteMessageCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InSiteMessageCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InSiteMessageCategoryUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InSiteMessageCategoryUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InSiteMessageCategoryCreateBulk is the builder for creating many InSiteMessageCategory entities in bulk.
type InSiteMessageCategoryCreateBulk struct {
	config
	err      error
	builders []*InSiteMessageCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the InSiteMessageCategory entities in the database.
func (ismccb *InSiteMessageCategoryCreateBulk) Save(ctx context.Context) ([]*InSiteMessageCategory, error) {
	if ismccb.err != nil {
		return nil, ismccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ismccb.builders))
	nodes := make([]*InSiteMessageCategory, len(ismccb.builders))
	mutators := make([]Mutator, len(ismccb.builders))
	for i := range ismccb.builders {
		func(i int, root context.Context) {
			builder := ismccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InSiteMessageCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ismccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ismccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ismccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ismccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ismccb *InSiteMessageCategoryCreateBulk) SaveX(ctx context.Context) []*InSiteMessageCategory {
	v, err := ismccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ismccb *InSiteMessageCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ismccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ismccb *InSiteMessageCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := ismccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InSiteMessageCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InSiteMessageCategoryUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ismccb *InSiteMessageCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *InSiteMessageCategoryUpsertBulk {
	ismccb.conflict = opts
	return &InSiteMessageCategoryUpsertBulk{
		create: ismccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InSiteMessageCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ismccb *InSiteMessageCategoryCreateBulk) OnConflictColumns(columns ...string) *InSiteMessageCategoryUpsertBulk {
	ismccb.conflict = append(ismccb.conflict, sql.ConflictColumns(columns...))
	return &InSiteMessageCategoryUpsertBulk{
		create: ismccb,
	}
}

// InSiteMessageCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of InSiteMessageCategory nodes.
type InSiteMessageCategoryUpsertBulk struct {
	create *InSiteMessageCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InSiteMessageCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(insitemessagecategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InSiteMessageCategoryUpsertBulk) UpdateNewValues() *InSiteMessageCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(insitemessagecategory.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(insitemessagecategory.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InSiteMessageCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InSiteMessageCategoryUpsertBulk) Ignore() *InSiteMessageCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InSiteMessageCategoryUpsertBulk) DoNothing() *InSiteMessageCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InSiteMessageCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *InSiteMessageCategoryUpsertBulk) Update(set func(*InSiteMessageCategoryUpsert)) *InSiteMessageCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InSiteMessageCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *InSiteMessageCategoryUpsertBulk) SetUpdateTime(v time.Time) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertBulk) UpdateUpdateTime() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *InSiteMessageCategoryUpsertBulk) ClearUpdateTime() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *InSiteMessageCategoryUpsertBulk) SetDeleteTime(v time.Time) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertBulk) UpdateDeleteTime() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *InSiteMessageCategoryUpsertBulk) ClearDeleteTime() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *InSiteMessageCategoryUpsertBulk) SetCreateBy(v uint32) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *InSiteMessageCategoryUpsertBulk) AddCreateBy(v uint32) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertBulk) UpdateCreateBy() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *InSiteMessageCategoryUpsertBulk) ClearCreateBy() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *InSiteMessageCategoryUpsertBulk) SetUpdateBy(v uint32) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *InSiteMessageCategoryUpsertBulk) AddUpdateBy(v uint32) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertBulk) UpdateUpdateBy() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *InSiteMessageCategoryUpsertBulk) ClearUpdateBy() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *InSiteMessageCategoryUpsertBulk) SetRemark(v string) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertBulk) UpdateRemark() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *InSiteMessageCategoryUpsertBulk) ClearRemark() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *InSiteMessageCategoryUpsertBulk) SetName(v string) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertBulk) UpdateName() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *InSiteMessageCategoryUpsertBulk) ClearName() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *InSiteMessageCategoryUpsertBulk) SetCode(v string) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertBulk) UpdateCode() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *InSiteMessageCategoryUpsertBulk) ClearCode() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearCode()
	})
}

// SetSortID sets the "sort_id" field.
func (u *InSiteMessageCategoryUpsertBulk) SetSortID(v int32) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetSortID(v)
	})
}

// AddSortID adds v to the "sort_id" field.
func (u *InSiteMessageCategoryUpsertBulk) AddSortID(v int32) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.AddSortID(v)
	})
}

// UpdateSortID sets the "sort_id" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertBulk) UpdateSortID() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateSortID()
	})
}

// ClearSortID clears the value of the "sort_id" field.
func (u *InSiteMessageCategoryUpsertBulk) ClearSortID() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearSortID()
	})
}

// SetEnable sets the "enable" field.
func (u *InSiteMessageCategoryUpsertBulk) SetEnable(v bool) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertBulk) UpdateEnable() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateEnable()
	})
}

// ClearEnable clears the value of the "enable" field.
func (u *InSiteMessageCategoryUpsertBulk) ClearEnable() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearEnable()
	})
}

// SetParentID sets the "parent_id" field.
func (u *InSiteMessageCategoryUpsertBulk) SetParentID(v uint32) *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *InSiteMessageCategoryUpsertBulk) UpdateParentID() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *InSiteMessageCategoryUpsertBulk) ClearParentID() *InSiteMessageCategoryUpsertBulk {
	return u.Update(func(s *InSiteMessageCategoryUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *InSiteMessageCategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InSiteMessageCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InSiteMessageCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InSiteMessageCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
