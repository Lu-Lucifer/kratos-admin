// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/insitemessage"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InSiteMessageUpdate is the builder for updating InSiteMessage entities.
type InSiteMessageUpdate struct {
	config
	hooks     []Hook
	mutation  *InSiteMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InSiteMessageUpdate builder.
func (ismu *InSiteMessageUpdate) Where(ps ...predicate.InSiteMessage) *InSiteMessageUpdate {
	ismu.mutation.Where(ps...)
	return ismu
}

// SetUpdateTime sets the "update_time" field.
func (ismu *InSiteMessageUpdate) SetUpdateTime(t time.Time) *InSiteMessageUpdate {
	ismu.mutation.SetUpdateTime(t)
	return ismu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ismu *InSiteMessageUpdate) SetNillableUpdateTime(t *time.Time) *InSiteMessageUpdate {
	if t != nil {
		ismu.SetUpdateTime(*t)
	}
	return ismu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ismu *InSiteMessageUpdate) ClearUpdateTime() *InSiteMessageUpdate {
	ismu.mutation.ClearUpdateTime()
	return ismu
}

// SetDeleteTime sets the "delete_time" field.
func (ismu *InSiteMessageUpdate) SetDeleteTime(t time.Time) *InSiteMessageUpdate {
	ismu.mutation.SetDeleteTime(t)
	return ismu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ismu *InSiteMessageUpdate) SetNillableDeleteTime(t *time.Time) *InSiteMessageUpdate {
	if t != nil {
		ismu.SetDeleteTime(*t)
	}
	return ismu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ismu *InSiteMessageUpdate) ClearDeleteTime() *InSiteMessageUpdate {
	ismu.mutation.ClearDeleteTime()
	return ismu
}

// SetCreateBy sets the "create_by" field.
func (ismu *InSiteMessageUpdate) SetCreateBy(u uint32) *InSiteMessageUpdate {
	ismu.mutation.ResetCreateBy()
	ismu.mutation.SetCreateBy(u)
	return ismu
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (ismu *InSiteMessageUpdate) SetNillableCreateBy(u *uint32) *InSiteMessageUpdate {
	if u != nil {
		ismu.SetCreateBy(*u)
	}
	return ismu
}

// AddCreateBy adds u to the "create_by" field.
func (ismu *InSiteMessageUpdate) AddCreateBy(u int32) *InSiteMessageUpdate {
	ismu.mutation.AddCreateBy(u)
	return ismu
}

// ClearCreateBy clears the value of the "create_by" field.
func (ismu *InSiteMessageUpdate) ClearCreateBy() *InSiteMessageUpdate {
	ismu.mutation.ClearCreateBy()
	return ismu
}

// SetUpdateBy sets the "update_by" field.
func (ismu *InSiteMessageUpdate) SetUpdateBy(u uint32) *InSiteMessageUpdate {
	ismu.mutation.ResetUpdateBy()
	ismu.mutation.SetUpdateBy(u)
	return ismu
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (ismu *InSiteMessageUpdate) SetNillableUpdateBy(u *uint32) *InSiteMessageUpdate {
	if u != nil {
		ismu.SetUpdateBy(*u)
	}
	return ismu
}

// AddUpdateBy adds u to the "update_by" field.
func (ismu *InSiteMessageUpdate) AddUpdateBy(u int32) *InSiteMessageUpdate {
	ismu.mutation.AddUpdateBy(u)
	return ismu
}

// ClearUpdateBy clears the value of the "update_by" field.
func (ismu *InSiteMessageUpdate) ClearUpdateBy() *InSiteMessageUpdate {
	ismu.mutation.ClearUpdateBy()
	return ismu
}

// SetRemark sets the "remark" field.
func (ismu *InSiteMessageUpdate) SetRemark(s string) *InSiteMessageUpdate {
	ismu.mutation.SetRemark(s)
	return ismu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ismu *InSiteMessageUpdate) SetNillableRemark(s *string) *InSiteMessageUpdate {
	if s != nil {
		ismu.SetRemark(*s)
	}
	return ismu
}

// ClearRemark clears the value of the "remark" field.
func (ismu *InSiteMessageUpdate) ClearRemark() *InSiteMessageUpdate {
	ismu.mutation.ClearRemark()
	return ismu
}

// SetTitle sets the "title" field.
func (ismu *InSiteMessageUpdate) SetTitle(s string) *InSiteMessageUpdate {
	ismu.mutation.SetTitle(s)
	return ismu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ismu *InSiteMessageUpdate) SetNillableTitle(s *string) *InSiteMessageUpdate {
	if s != nil {
		ismu.SetTitle(*s)
	}
	return ismu
}

// ClearTitle clears the value of the "title" field.
func (ismu *InSiteMessageUpdate) ClearTitle() *InSiteMessageUpdate {
	ismu.mutation.ClearTitle()
	return ismu
}

// SetContent sets the "content" field.
func (ismu *InSiteMessageUpdate) SetContent(s string) *InSiteMessageUpdate {
	ismu.mutation.SetContent(s)
	return ismu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ismu *InSiteMessageUpdate) SetNillableContent(s *string) *InSiteMessageUpdate {
	if s != nil {
		ismu.SetContent(*s)
	}
	return ismu
}

// ClearContent clears the value of the "content" field.
func (ismu *InSiteMessageUpdate) ClearContent() *InSiteMessageUpdate {
	ismu.mutation.ClearContent()
	return ismu
}

// SetCategoryID sets the "category_id" field.
func (ismu *InSiteMessageUpdate) SetCategoryID(u uint32) *InSiteMessageUpdate {
	ismu.mutation.ResetCategoryID()
	ismu.mutation.SetCategoryID(u)
	return ismu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (ismu *InSiteMessageUpdate) SetNillableCategoryID(u *uint32) *InSiteMessageUpdate {
	if u != nil {
		ismu.SetCategoryID(*u)
	}
	return ismu
}

// AddCategoryID adds u to the "category_id" field.
func (ismu *InSiteMessageUpdate) AddCategoryID(u int32) *InSiteMessageUpdate {
	ismu.mutation.AddCategoryID(u)
	return ismu
}

// ClearCategoryID clears the value of the "category_id" field.
func (ismu *InSiteMessageUpdate) ClearCategoryID() *InSiteMessageUpdate {
	ismu.mutation.ClearCategoryID()
	return ismu
}

// SetStatus sets the "status" field.
func (ismu *InSiteMessageUpdate) SetStatus(i insitemessage.Status) *InSiteMessageUpdate {
	ismu.mutation.SetStatus(i)
	return ismu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ismu *InSiteMessageUpdate) SetNillableStatus(i *insitemessage.Status) *InSiteMessageUpdate {
	if i != nil {
		ismu.SetStatus(*i)
	}
	return ismu
}

// ClearStatus clears the value of the "status" field.
func (ismu *InSiteMessageUpdate) ClearStatus() *InSiteMessageUpdate {
	ismu.mutation.ClearStatus()
	return ismu
}

// Mutation returns the InSiteMessageMutation object of the builder.
func (ismu *InSiteMessageUpdate) Mutation() *InSiteMessageMutation {
	return ismu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ismu *InSiteMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ismu.sqlSave, ismu.mutation, ismu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ismu *InSiteMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := ismu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ismu *InSiteMessageUpdate) Exec(ctx context.Context) error {
	_, err := ismu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ismu *InSiteMessageUpdate) ExecX(ctx context.Context) {
	if err := ismu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ismu *InSiteMessageUpdate) check() error {
	if v, ok := ismu.mutation.Status(); ok {
		if err := insitemessage.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "InSiteMessage.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ismu *InSiteMessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InSiteMessageUpdate {
	ismu.modifiers = append(ismu.modifiers, modifiers...)
	return ismu
}

func (ismu *InSiteMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ismu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(insitemessage.Table, insitemessage.Columns, sqlgraph.NewFieldSpec(insitemessage.FieldID, field.TypeUint32))
	if ps := ismu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ismu.mutation.CreateTimeCleared() {
		_spec.ClearField(insitemessage.FieldCreateTime, field.TypeTime)
	}
	if value, ok := ismu.mutation.UpdateTime(); ok {
		_spec.SetField(insitemessage.FieldUpdateTime, field.TypeTime, value)
	}
	if ismu.mutation.UpdateTimeCleared() {
		_spec.ClearField(insitemessage.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := ismu.mutation.DeleteTime(); ok {
		_spec.SetField(insitemessage.FieldDeleteTime, field.TypeTime, value)
	}
	if ismu.mutation.DeleteTimeCleared() {
		_spec.ClearField(insitemessage.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ismu.mutation.CreateBy(); ok {
		_spec.SetField(insitemessage.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := ismu.mutation.AddedCreateBy(); ok {
		_spec.AddField(insitemessage.FieldCreateBy, field.TypeUint32, value)
	}
	if ismu.mutation.CreateByCleared() {
		_spec.ClearField(insitemessage.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := ismu.mutation.UpdateBy(); ok {
		_spec.SetField(insitemessage.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := ismu.mutation.AddedUpdateBy(); ok {
		_spec.AddField(insitemessage.FieldUpdateBy, field.TypeUint32, value)
	}
	if ismu.mutation.UpdateByCleared() {
		_spec.ClearField(insitemessage.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := ismu.mutation.Remark(); ok {
		_spec.SetField(insitemessage.FieldRemark, field.TypeString, value)
	}
	if ismu.mutation.RemarkCleared() {
		_spec.ClearField(insitemessage.FieldRemark, field.TypeString)
	}
	if value, ok := ismu.mutation.Title(); ok {
		_spec.SetField(insitemessage.FieldTitle, field.TypeString, value)
	}
	if ismu.mutation.TitleCleared() {
		_spec.ClearField(insitemessage.FieldTitle, field.TypeString)
	}
	if value, ok := ismu.mutation.Content(); ok {
		_spec.SetField(insitemessage.FieldContent, field.TypeString, value)
	}
	if ismu.mutation.ContentCleared() {
		_spec.ClearField(insitemessage.FieldContent, field.TypeString)
	}
	if value, ok := ismu.mutation.CategoryID(); ok {
		_spec.SetField(insitemessage.FieldCategoryID, field.TypeUint32, value)
	}
	if value, ok := ismu.mutation.AddedCategoryID(); ok {
		_spec.AddField(insitemessage.FieldCategoryID, field.TypeUint32, value)
	}
	if ismu.mutation.CategoryIDCleared() {
		_spec.ClearField(insitemessage.FieldCategoryID, field.TypeUint32)
	}
	if value, ok := ismu.mutation.Status(); ok {
		_spec.SetField(insitemessage.FieldStatus, field.TypeEnum, value)
	}
	if ismu.mutation.StatusCleared() {
		_spec.ClearField(insitemessage.FieldStatus, field.TypeEnum)
	}
	_spec.AddModifiers(ismu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ismu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{insitemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ismu.mutation.done = true
	return n, nil
}

// InSiteMessageUpdateOne is the builder for updating a single InSiteMessage entity.
type InSiteMessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InSiteMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (ismuo *InSiteMessageUpdateOne) SetUpdateTime(t time.Time) *InSiteMessageUpdateOne {
	ismuo.mutation.SetUpdateTime(t)
	return ismuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ismuo *InSiteMessageUpdateOne) SetNillableUpdateTime(t *time.Time) *InSiteMessageUpdateOne {
	if t != nil {
		ismuo.SetUpdateTime(*t)
	}
	return ismuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ismuo *InSiteMessageUpdateOne) ClearUpdateTime() *InSiteMessageUpdateOne {
	ismuo.mutation.ClearUpdateTime()
	return ismuo
}

// SetDeleteTime sets the "delete_time" field.
func (ismuo *InSiteMessageUpdateOne) SetDeleteTime(t time.Time) *InSiteMessageUpdateOne {
	ismuo.mutation.SetDeleteTime(t)
	return ismuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ismuo *InSiteMessageUpdateOne) SetNillableDeleteTime(t *time.Time) *InSiteMessageUpdateOne {
	if t != nil {
		ismuo.SetDeleteTime(*t)
	}
	return ismuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ismuo *InSiteMessageUpdateOne) ClearDeleteTime() *InSiteMessageUpdateOne {
	ismuo.mutation.ClearDeleteTime()
	return ismuo
}

// SetCreateBy sets the "create_by" field.
func (ismuo *InSiteMessageUpdateOne) SetCreateBy(u uint32) *InSiteMessageUpdateOne {
	ismuo.mutation.ResetCreateBy()
	ismuo.mutation.SetCreateBy(u)
	return ismuo
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (ismuo *InSiteMessageUpdateOne) SetNillableCreateBy(u *uint32) *InSiteMessageUpdateOne {
	if u != nil {
		ismuo.SetCreateBy(*u)
	}
	return ismuo
}

// AddCreateBy adds u to the "create_by" field.
func (ismuo *InSiteMessageUpdateOne) AddCreateBy(u int32) *InSiteMessageUpdateOne {
	ismuo.mutation.AddCreateBy(u)
	return ismuo
}

// ClearCreateBy clears the value of the "create_by" field.
func (ismuo *InSiteMessageUpdateOne) ClearCreateBy() *InSiteMessageUpdateOne {
	ismuo.mutation.ClearCreateBy()
	return ismuo
}

// SetUpdateBy sets the "update_by" field.
func (ismuo *InSiteMessageUpdateOne) SetUpdateBy(u uint32) *InSiteMessageUpdateOne {
	ismuo.mutation.ResetUpdateBy()
	ismuo.mutation.SetUpdateBy(u)
	return ismuo
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (ismuo *InSiteMessageUpdateOne) SetNillableUpdateBy(u *uint32) *InSiteMessageUpdateOne {
	if u != nil {
		ismuo.SetUpdateBy(*u)
	}
	return ismuo
}

// AddUpdateBy adds u to the "update_by" field.
func (ismuo *InSiteMessageUpdateOne) AddUpdateBy(u int32) *InSiteMessageUpdateOne {
	ismuo.mutation.AddUpdateBy(u)
	return ismuo
}

// ClearUpdateBy clears the value of the "update_by" field.
func (ismuo *InSiteMessageUpdateOne) ClearUpdateBy() *InSiteMessageUpdateOne {
	ismuo.mutation.ClearUpdateBy()
	return ismuo
}

// SetRemark sets the "remark" field.
func (ismuo *InSiteMessageUpdateOne) SetRemark(s string) *InSiteMessageUpdateOne {
	ismuo.mutation.SetRemark(s)
	return ismuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ismuo *InSiteMessageUpdateOne) SetNillableRemark(s *string) *InSiteMessageUpdateOne {
	if s != nil {
		ismuo.SetRemark(*s)
	}
	return ismuo
}

// ClearRemark clears the value of the "remark" field.
func (ismuo *InSiteMessageUpdateOne) ClearRemark() *InSiteMessageUpdateOne {
	ismuo.mutation.ClearRemark()
	return ismuo
}

// SetTitle sets the "title" field.
func (ismuo *InSiteMessageUpdateOne) SetTitle(s string) *InSiteMessageUpdateOne {
	ismuo.mutation.SetTitle(s)
	return ismuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ismuo *InSiteMessageUpdateOne) SetNillableTitle(s *string) *InSiteMessageUpdateOne {
	if s != nil {
		ismuo.SetTitle(*s)
	}
	return ismuo
}

// ClearTitle clears the value of the "title" field.
func (ismuo *InSiteMessageUpdateOne) ClearTitle() *InSiteMessageUpdateOne {
	ismuo.mutation.ClearTitle()
	return ismuo
}

// SetContent sets the "content" field.
func (ismuo *InSiteMessageUpdateOne) SetContent(s string) *InSiteMessageUpdateOne {
	ismuo.mutation.SetContent(s)
	return ismuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ismuo *InSiteMessageUpdateOne) SetNillableContent(s *string) *InSiteMessageUpdateOne {
	if s != nil {
		ismuo.SetContent(*s)
	}
	return ismuo
}

// ClearContent clears the value of the "content" field.
func (ismuo *InSiteMessageUpdateOne) ClearContent() *InSiteMessageUpdateOne {
	ismuo.mutation.ClearContent()
	return ismuo
}

// SetCategoryID sets the "category_id" field.
func (ismuo *InSiteMessageUpdateOne) SetCategoryID(u uint32) *InSiteMessageUpdateOne {
	ismuo.mutation.ResetCategoryID()
	ismuo.mutation.SetCategoryID(u)
	return ismuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (ismuo *InSiteMessageUpdateOne) SetNillableCategoryID(u *uint32) *InSiteMessageUpdateOne {
	if u != nil {
		ismuo.SetCategoryID(*u)
	}
	return ismuo
}

// AddCategoryID adds u to the "category_id" field.
func (ismuo *InSiteMessageUpdateOne) AddCategoryID(u int32) *InSiteMessageUpdateOne {
	ismuo.mutation.AddCategoryID(u)
	return ismuo
}

// ClearCategoryID clears the value of the "category_id" field.
func (ismuo *InSiteMessageUpdateOne) ClearCategoryID() *InSiteMessageUpdateOne {
	ismuo.mutation.ClearCategoryID()
	return ismuo
}

// SetStatus sets the "status" field.
func (ismuo *InSiteMessageUpdateOne) SetStatus(i insitemessage.Status) *InSiteMessageUpdateOne {
	ismuo.mutation.SetStatus(i)
	return ismuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ismuo *InSiteMessageUpdateOne) SetNillableStatus(i *insitemessage.Status) *InSiteMessageUpdateOne {
	if i != nil {
		ismuo.SetStatus(*i)
	}
	return ismuo
}

// ClearStatus clears the value of the "status" field.
func (ismuo *InSiteMessageUpdateOne) ClearStatus() *InSiteMessageUpdateOne {
	ismuo.mutation.ClearStatus()
	return ismuo
}

// Mutation returns the InSiteMessageMutation object of the builder.
func (ismuo *InSiteMessageUpdateOne) Mutation() *InSiteMessageMutation {
	return ismuo.mutation
}

// Where appends a list predicates to the InSiteMessageUpdate builder.
func (ismuo *InSiteMessageUpdateOne) Where(ps ...predicate.InSiteMessage) *InSiteMessageUpdateOne {
	ismuo.mutation.Where(ps...)
	return ismuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ismuo *InSiteMessageUpdateOne) Select(field string, fields ...string) *InSiteMessageUpdateOne {
	ismuo.fields = append([]string{field}, fields...)
	return ismuo
}

// Save executes the query and returns the updated InSiteMessage entity.
func (ismuo *InSiteMessageUpdateOne) Save(ctx context.Context) (*InSiteMessage, error) {
	return withHooks(ctx, ismuo.sqlSave, ismuo.mutation, ismuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ismuo *InSiteMessageUpdateOne) SaveX(ctx context.Context) *InSiteMessage {
	node, err := ismuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ismuo *InSiteMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := ismuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ismuo *InSiteMessageUpdateOne) ExecX(ctx context.Context) {
	if err := ismuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ismuo *InSiteMessageUpdateOne) check() error {
	if v, ok := ismuo.mutation.Status(); ok {
		if err := insitemessage.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "InSiteMessage.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ismuo *InSiteMessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InSiteMessageUpdateOne {
	ismuo.modifiers = append(ismuo.modifiers, modifiers...)
	return ismuo
}

func (ismuo *InSiteMessageUpdateOne) sqlSave(ctx context.Context) (_node *InSiteMessage, err error) {
	if err := ismuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(insitemessage.Table, insitemessage.Columns, sqlgraph.NewFieldSpec(insitemessage.FieldID, field.TypeUint32))
	id, ok := ismuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InSiteMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ismuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, insitemessage.FieldID)
		for _, f := range fields {
			if !insitemessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != insitemessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ismuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ismuo.mutation.CreateTimeCleared() {
		_spec.ClearField(insitemessage.FieldCreateTime, field.TypeTime)
	}
	if value, ok := ismuo.mutation.UpdateTime(); ok {
		_spec.SetField(insitemessage.FieldUpdateTime, field.TypeTime, value)
	}
	if ismuo.mutation.UpdateTimeCleared() {
		_spec.ClearField(insitemessage.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := ismuo.mutation.DeleteTime(); ok {
		_spec.SetField(insitemessage.FieldDeleteTime, field.TypeTime, value)
	}
	if ismuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(insitemessage.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ismuo.mutation.CreateBy(); ok {
		_spec.SetField(insitemessage.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := ismuo.mutation.AddedCreateBy(); ok {
		_spec.AddField(insitemessage.FieldCreateBy, field.TypeUint32, value)
	}
	if ismuo.mutation.CreateByCleared() {
		_spec.ClearField(insitemessage.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := ismuo.mutation.UpdateBy(); ok {
		_spec.SetField(insitemessage.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := ismuo.mutation.AddedUpdateBy(); ok {
		_spec.AddField(insitemessage.FieldUpdateBy, field.TypeUint32, value)
	}
	if ismuo.mutation.UpdateByCleared() {
		_spec.ClearField(insitemessage.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := ismuo.mutation.Remark(); ok {
		_spec.SetField(insitemessage.FieldRemark, field.TypeString, value)
	}
	if ismuo.mutation.RemarkCleared() {
		_spec.ClearField(insitemessage.FieldRemark, field.TypeString)
	}
	if value, ok := ismuo.mutation.Title(); ok {
		_spec.SetField(insitemessage.FieldTitle, field.TypeString, value)
	}
	if ismuo.mutation.TitleCleared() {
		_spec.ClearField(insitemessage.FieldTitle, field.TypeString)
	}
	if value, ok := ismuo.mutation.Content(); ok {
		_spec.SetField(insitemessage.FieldContent, field.TypeString, value)
	}
	if ismuo.mutation.ContentCleared() {
		_spec.ClearField(insitemessage.FieldContent, field.TypeString)
	}
	if value, ok := ismuo.mutation.CategoryID(); ok {
		_spec.SetField(insitemessage.FieldCategoryID, field.TypeUint32, value)
	}
	if value, ok := ismuo.mutation.AddedCategoryID(); ok {
		_spec.AddField(insitemessage.FieldCategoryID, field.TypeUint32, value)
	}
	if ismuo.mutation.CategoryIDCleared() {
		_spec.ClearField(insitemessage.FieldCategoryID, field.TypeUint32)
	}
	if value, ok := ismuo.mutation.Status(); ok {
		_spec.SetField(insitemessage.FieldStatus, field.TypeEnum, value)
	}
	if ismuo.mutation.StatusCleared() {
		_spec.ClearField(insitemessage.FieldStatus, field.TypeEnum)
	}
	_spec.AddModifiers(ismuo.modifiers...)
	_node = &InSiteMessage{config: ismuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ismuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{insitemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ismuo.mutation.done = true
	return _node, nil
}
