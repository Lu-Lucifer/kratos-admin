// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"kratos-admin/app/admin/service/internal/data/ent/insitemessage"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InSiteMessageDelete is the builder for deleting a InSiteMessage entity.
type InSiteMessageDelete struct {
	config
	hooks    []Hook
	mutation *InSiteMessageMutation
}

// Where appends a list predicates to the InSiteMessageDelete builder.
func (ismd *InSiteMessageDelete) Where(ps ...predicate.InSiteMessage) *InSiteMessageDelete {
	ismd.mutation.Where(ps...)
	return ismd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ismd *InSiteMessageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ismd.sqlExec, ismd.mutation, ismd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ismd *InSiteMessageDelete) ExecX(ctx context.Context) int {
	n, err := ismd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ismd *InSiteMessageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(insitemessage.Table, sqlgraph.NewFieldSpec(insitemessage.FieldID, field.TypeUint32))
	if ps := ismd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ismd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ismd.mutation.done = true
	return affected, err
}

// InSiteMessageDeleteOne is the builder for deleting a single InSiteMessage entity.
type InSiteMessageDeleteOne struct {
	ismd *InSiteMessageDelete
}

// Where appends a list predicates to the InSiteMessageDelete builder.
func (ismdo *InSiteMessageDeleteOne) Where(ps ...predicate.InSiteMessage) *InSiteMessageDeleteOne {
	ismdo.ismd.mutation.Where(ps...)
	return ismdo
}

// Exec executes the deletion query.
func (ismdo *InSiteMessageDeleteOne) Exec(ctx context.Context) error {
	n, err := ismdo.ismd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{insitemessage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ismdo *InSiteMessageDeleteOne) ExecX(ctx context.Context) {
	if err := ismdo.Exec(ctx); err != nil {
		panic(err)
	}
}
