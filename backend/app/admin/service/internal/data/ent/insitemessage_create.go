// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/insitemessage"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InSiteMessageCreate is the builder for creating a InSiteMessage entity.
type InSiteMessageCreate struct {
	config
	mutation *InSiteMessageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (ismc *InSiteMessageCreate) SetCreateTime(t time.Time) *InSiteMessageCreate {
	ismc.mutation.SetCreateTime(t)
	return ismc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ismc *InSiteMessageCreate) SetNillableCreateTime(t *time.Time) *InSiteMessageCreate {
	if t != nil {
		ismc.SetCreateTime(*t)
	}
	return ismc
}

// SetUpdateTime sets the "update_time" field.
func (ismc *InSiteMessageCreate) SetUpdateTime(t time.Time) *InSiteMessageCreate {
	ismc.mutation.SetUpdateTime(t)
	return ismc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ismc *InSiteMessageCreate) SetNillableUpdateTime(t *time.Time) *InSiteMessageCreate {
	if t != nil {
		ismc.SetUpdateTime(*t)
	}
	return ismc
}

// SetDeleteTime sets the "delete_time" field.
func (ismc *InSiteMessageCreate) SetDeleteTime(t time.Time) *InSiteMessageCreate {
	ismc.mutation.SetDeleteTime(t)
	return ismc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ismc *InSiteMessageCreate) SetNillableDeleteTime(t *time.Time) *InSiteMessageCreate {
	if t != nil {
		ismc.SetDeleteTime(*t)
	}
	return ismc
}

// SetCreateBy sets the "create_by" field.
func (ismc *InSiteMessageCreate) SetCreateBy(u uint32) *InSiteMessageCreate {
	ismc.mutation.SetCreateBy(u)
	return ismc
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (ismc *InSiteMessageCreate) SetNillableCreateBy(u *uint32) *InSiteMessageCreate {
	if u != nil {
		ismc.SetCreateBy(*u)
	}
	return ismc
}

// SetUpdateBy sets the "update_by" field.
func (ismc *InSiteMessageCreate) SetUpdateBy(u uint32) *InSiteMessageCreate {
	ismc.mutation.SetUpdateBy(u)
	return ismc
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (ismc *InSiteMessageCreate) SetNillableUpdateBy(u *uint32) *InSiteMessageCreate {
	if u != nil {
		ismc.SetUpdateBy(*u)
	}
	return ismc
}

// SetRemark sets the "remark" field.
func (ismc *InSiteMessageCreate) SetRemark(s string) *InSiteMessageCreate {
	ismc.mutation.SetRemark(s)
	return ismc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ismc *InSiteMessageCreate) SetNillableRemark(s *string) *InSiteMessageCreate {
	if s != nil {
		ismc.SetRemark(*s)
	}
	return ismc
}

// SetTitle sets the "title" field.
func (ismc *InSiteMessageCreate) SetTitle(s string) *InSiteMessageCreate {
	ismc.mutation.SetTitle(s)
	return ismc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ismc *InSiteMessageCreate) SetNillableTitle(s *string) *InSiteMessageCreate {
	if s != nil {
		ismc.SetTitle(*s)
	}
	return ismc
}

// SetContent sets the "content" field.
func (ismc *InSiteMessageCreate) SetContent(s string) *InSiteMessageCreate {
	ismc.mutation.SetContent(s)
	return ismc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ismc *InSiteMessageCreate) SetNillableContent(s *string) *InSiteMessageCreate {
	if s != nil {
		ismc.SetContent(*s)
	}
	return ismc
}

// SetCategoryID sets the "category_id" field.
func (ismc *InSiteMessageCreate) SetCategoryID(u uint32) *InSiteMessageCreate {
	ismc.mutation.SetCategoryID(u)
	return ismc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (ismc *InSiteMessageCreate) SetNillableCategoryID(u *uint32) *InSiteMessageCreate {
	if u != nil {
		ismc.SetCategoryID(*u)
	}
	return ismc
}

// SetStatus sets the "status" field.
func (ismc *InSiteMessageCreate) SetStatus(i insitemessage.Status) *InSiteMessageCreate {
	ismc.mutation.SetStatus(i)
	return ismc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ismc *InSiteMessageCreate) SetNillableStatus(i *insitemessage.Status) *InSiteMessageCreate {
	if i != nil {
		ismc.SetStatus(*i)
	}
	return ismc
}

// SetID sets the "id" field.
func (ismc *InSiteMessageCreate) SetID(u uint32) *InSiteMessageCreate {
	ismc.mutation.SetID(u)
	return ismc
}

// Mutation returns the InSiteMessageMutation object of the builder.
func (ismc *InSiteMessageCreate) Mutation() *InSiteMessageMutation {
	return ismc.mutation
}

// Save creates the InSiteMessage in the database.
func (ismc *InSiteMessageCreate) Save(ctx context.Context) (*InSiteMessage, error) {
	ismc.defaults()
	return withHooks(ctx, ismc.sqlSave, ismc.mutation, ismc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ismc *InSiteMessageCreate) SaveX(ctx context.Context) *InSiteMessage {
	v, err := ismc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ismc *InSiteMessageCreate) Exec(ctx context.Context) error {
	_, err := ismc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ismc *InSiteMessageCreate) ExecX(ctx context.Context) {
	if err := ismc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ismc *InSiteMessageCreate) defaults() {
	if _, ok := ismc.mutation.Remark(); !ok {
		v := insitemessage.DefaultRemark
		ismc.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ismc *InSiteMessageCreate) check() error {
	if v, ok := ismc.mutation.Status(); ok {
		if err := insitemessage.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "InSiteMessage.status": %w`, err)}
		}
	}
	if v, ok := ismc.mutation.ID(); ok {
		if err := insitemessage.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "InSiteMessage.id": %w`, err)}
		}
	}
	return nil
}

func (ismc *InSiteMessageCreate) sqlSave(ctx context.Context) (*InSiteMessage, error) {
	if err := ismc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ismc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ismc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ismc.mutation.id = &_node.ID
	ismc.mutation.done = true
	return _node, nil
}

func (ismc *InSiteMessageCreate) createSpec() (*InSiteMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &InSiteMessage{config: ismc.config}
		_spec = sqlgraph.NewCreateSpec(insitemessage.Table, sqlgraph.NewFieldSpec(insitemessage.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ismc.conflict
	if id, ok := ismc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ismc.mutation.CreateTime(); ok {
		_spec.SetField(insitemessage.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := ismc.mutation.UpdateTime(); ok {
		_spec.SetField(insitemessage.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := ismc.mutation.DeleteTime(); ok {
		_spec.SetField(insitemessage.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := ismc.mutation.CreateBy(); ok {
		_spec.SetField(insitemessage.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := ismc.mutation.UpdateBy(); ok {
		_spec.SetField(insitemessage.FieldUpdateBy, field.TypeUint32, value)
		_node.UpdateBy = &value
	}
	if value, ok := ismc.mutation.Remark(); ok {
		_spec.SetField(insitemessage.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := ismc.mutation.Title(); ok {
		_spec.SetField(insitemessage.FieldTitle, field.TypeString, value)
		_node.Title = &value
	}
	if value, ok := ismc.mutation.Content(); ok {
		_spec.SetField(insitemessage.FieldContent, field.TypeString, value)
		_node.Content = &value
	}
	if value, ok := ismc.mutation.CategoryID(); ok {
		_spec.SetField(insitemessage.FieldCategoryID, field.TypeUint32, value)
		_node.CategoryID = &value
	}
	if value, ok := ismc.mutation.Status(); ok {
		_spec.SetField(insitemessage.FieldStatus, field.TypeEnum, value)
		_node.Status = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InSiteMessage.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InSiteMessageUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ismc *InSiteMessageCreate) OnConflict(opts ...sql.ConflictOption) *InSiteMessageUpsertOne {
	ismc.conflict = opts
	return &InSiteMessageUpsertOne{
		create: ismc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InSiteMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ismc *InSiteMessageCreate) OnConflictColumns(columns ...string) *InSiteMessageUpsertOne {
	ismc.conflict = append(ismc.conflict, sql.ConflictColumns(columns...))
	return &InSiteMessageUpsertOne{
		create: ismc,
	}
}

type (
	// InSiteMessageUpsertOne is the builder for "upsert"-ing
	//  one InSiteMessage node.
	InSiteMessageUpsertOne struct {
		create *InSiteMessageCreate
	}

	// InSiteMessageUpsert is the "OnConflict" setter.
	InSiteMessageUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *InSiteMessageUpsert) SetUpdateTime(v time.Time) *InSiteMessageUpsert {
	u.Set(insitemessage.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *InSiteMessageUpsert) UpdateUpdateTime() *InSiteMessageUpsert {
	u.SetExcluded(insitemessage.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *InSiteMessageUpsert) ClearUpdateTime() *InSiteMessageUpsert {
	u.SetNull(insitemessage.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *InSiteMessageUpsert) SetDeleteTime(v time.Time) *InSiteMessageUpsert {
	u.Set(insitemessage.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *InSiteMessageUpsert) UpdateDeleteTime() *InSiteMessageUpsert {
	u.SetExcluded(insitemessage.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *InSiteMessageUpsert) ClearDeleteTime() *InSiteMessageUpsert {
	u.SetNull(insitemessage.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *InSiteMessageUpsert) SetCreateBy(v uint32) *InSiteMessageUpsert {
	u.Set(insitemessage.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *InSiteMessageUpsert) UpdateCreateBy() *InSiteMessageUpsert {
	u.SetExcluded(insitemessage.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *InSiteMessageUpsert) AddCreateBy(v uint32) *InSiteMessageUpsert {
	u.Add(insitemessage.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *InSiteMessageUpsert) ClearCreateBy() *InSiteMessageUpsert {
	u.SetNull(insitemessage.FieldCreateBy)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *InSiteMessageUpsert) SetUpdateBy(v uint32) *InSiteMessageUpsert {
	u.Set(insitemessage.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *InSiteMessageUpsert) UpdateUpdateBy() *InSiteMessageUpsert {
	u.SetExcluded(insitemessage.FieldUpdateBy)
	return u
}

// AddUpdateBy adds v to the "update_by" field.
func (u *InSiteMessageUpsert) AddUpdateBy(v uint32) *InSiteMessageUpsert {
	u.Add(insitemessage.FieldUpdateBy, v)
	return u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *InSiteMessageUpsert) ClearUpdateBy() *InSiteMessageUpsert {
	u.SetNull(insitemessage.FieldUpdateBy)
	return u
}

// SetRemark sets the "remark" field.
func (u *InSiteMessageUpsert) SetRemark(v string) *InSiteMessageUpsert {
	u.Set(insitemessage.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InSiteMessageUpsert) UpdateRemark() *InSiteMessageUpsert {
	u.SetExcluded(insitemessage.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *InSiteMessageUpsert) ClearRemark() *InSiteMessageUpsert {
	u.SetNull(insitemessage.FieldRemark)
	return u
}

// SetTitle sets the "title" field.
func (u *InSiteMessageUpsert) SetTitle(v string) *InSiteMessageUpsert {
	u.Set(insitemessage.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *InSiteMessageUpsert) UpdateTitle() *InSiteMessageUpsert {
	u.SetExcluded(insitemessage.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *InSiteMessageUpsert) ClearTitle() *InSiteMessageUpsert {
	u.SetNull(insitemessage.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *InSiteMessageUpsert) SetContent(v string) *InSiteMessageUpsert {
	u.Set(insitemessage.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *InSiteMessageUpsert) UpdateContent() *InSiteMessageUpsert {
	u.SetExcluded(insitemessage.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *InSiteMessageUpsert) ClearContent() *InSiteMessageUpsert {
	u.SetNull(insitemessage.FieldContent)
	return u
}

// SetCategoryID sets the "category_id" field.
func (u *InSiteMessageUpsert) SetCategoryID(v uint32) *InSiteMessageUpsert {
	u.Set(insitemessage.FieldCategoryID, v)
	return u
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *InSiteMessageUpsert) UpdateCategoryID() *InSiteMessageUpsert {
	u.SetExcluded(insitemessage.FieldCategoryID)
	return u
}

// AddCategoryID adds v to the "category_id" field.
func (u *InSiteMessageUpsert) AddCategoryID(v uint32) *InSiteMessageUpsert {
	u.Add(insitemessage.FieldCategoryID, v)
	return u
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *InSiteMessageUpsert) ClearCategoryID() *InSiteMessageUpsert {
	u.SetNull(insitemessage.FieldCategoryID)
	return u
}

// SetStatus sets the "status" field.
func (u *InSiteMessageUpsert) SetStatus(v insitemessage.Status) *InSiteMessageUpsert {
	u.Set(insitemessage.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InSiteMessageUpsert) UpdateStatus() *InSiteMessageUpsert {
	u.SetExcluded(insitemessage.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *InSiteMessageUpsert) ClearStatus() *InSiteMessageUpsert {
	u.SetNull(insitemessage.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InSiteMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(insitemessage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InSiteMessageUpsertOne) UpdateNewValues() *InSiteMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(insitemessage.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(insitemessage.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InSiteMessage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InSiteMessageUpsertOne) Ignore() *InSiteMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InSiteMessageUpsertOne) DoNothing() *InSiteMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InSiteMessageCreate.OnConflict
// documentation for more info.
func (u *InSiteMessageUpsertOne) Update(set func(*InSiteMessageUpsert)) *InSiteMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InSiteMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *InSiteMessageUpsertOne) SetUpdateTime(v time.Time) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *InSiteMessageUpsertOne) UpdateUpdateTime() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *InSiteMessageUpsertOne) ClearUpdateTime() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *InSiteMessageUpsertOne) SetDeleteTime(v time.Time) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *InSiteMessageUpsertOne) UpdateDeleteTime() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *InSiteMessageUpsertOne) ClearDeleteTime() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *InSiteMessageUpsertOne) SetCreateBy(v uint32) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *InSiteMessageUpsertOne) AddCreateBy(v uint32) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *InSiteMessageUpsertOne) UpdateCreateBy() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *InSiteMessageUpsertOne) ClearCreateBy() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *InSiteMessageUpsertOne) SetUpdateBy(v uint32) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *InSiteMessageUpsertOne) AddUpdateBy(v uint32) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *InSiteMessageUpsertOne) UpdateUpdateBy() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *InSiteMessageUpsertOne) ClearUpdateBy() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *InSiteMessageUpsertOne) SetRemark(v string) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InSiteMessageUpsertOne) UpdateRemark() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *InSiteMessageUpsertOne) ClearRemark() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearRemark()
	})
}

// SetTitle sets the "title" field.
func (u *InSiteMessageUpsertOne) SetTitle(v string) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *InSiteMessageUpsertOne) UpdateTitle() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *InSiteMessageUpsertOne) ClearTitle() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearTitle()
	})
}

// SetContent sets the "content" field.
func (u *InSiteMessageUpsertOne) SetContent(v string) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *InSiteMessageUpsertOne) UpdateContent() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *InSiteMessageUpsertOne) ClearContent() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearContent()
	})
}

// SetCategoryID sets the "category_id" field.
func (u *InSiteMessageUpsertOne) SetCategoryID(v uint32) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetCategoryID(v)
	})
}

// AddCategoryID adds v to the "category_id" field.
func (u *InSiteMessageUpsertOne) AddCategoryID(v uint32) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.AddCategoryID(v)
	})
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *InSiteMessageUpsertOne) UpdateCategoryID() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateCategoryID()
	})
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *InSiteMessageUpsertOne) ClearCategoryID() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearCategoryID()
	})
}

// SetStatus sets the "status" field.
func (u *InSiteMessageUpsertOne) SetStatus(v insitemessage.Status) *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InSiteMessageUpsertOne) UpdateStatus() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *InSiteMessageUpsertOne) ClearStatus() *InSiteMessageUpsertOne {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *InSiteMessageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InSiteMessageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InSiteMessageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InSiteMessageUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InSiteMessageUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InSiteMessageCreateBulk is the builder for creating many InSiteMessage entities in bulk.
type InSiteMessageCreateBulk struct {
	config
	err      error
	builders []*InSiteMessageCreate
	conflict []sql.ConflictOption
}

// Save creates the InSiteMessage entities in the database.
func (ismcb *InSiteMessageCreateBulk) Save(ctx context.Context) ([]*InSiteMessage, error) {
	if ismcb.err != nil {
		return nil, ismcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ismcb.builders))
	nodes := make([]*InSiteMessage, len(ismcb.builders))
	mutators := make([]Mutator, len(ismcb.builders))
	for i := range ismcb.builders {
		func(i int, root context.Context) {
			builder := ismcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InSiteMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ismcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ismcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ismcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ismcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ismcb *InSiteMessageCreateBulk) SaveX(ctx context.Context) []*InSiteMessage {
	v, err := ismcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ismcb *InSiteMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := ismcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ismcb *InSiteMessageCreateBulk) ExecX(ctx context.Context) {
	if err := ismcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InSiteMessage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InSiteMessageUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ismcb *InSiteMessageCreateBulk) OnConflict(opts ...sql.ConflictOption) *InSiteMessageUpsertBulk {
	ismcb.conflict = opts
	return &InSiteMessageUpsertBulk{
		create: ismcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InSiteMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ismcb *InSiteMessageCreateBulk) OnConflictColumns(columns ...string) *InSiteMessageUpsertBulk {
	ismcb.conflict = append(ismcb.conflict, sql.ConflictColumns(columns...))
	return &InSiteMessageUpsertBulk{
		create: ismcb,
	}
}

// InSiteMessageUpsertBulk is the builder for "upsert"-ing
// a bulk of InSiteMessage nodes.
type InSiteMessageUpsertBulk struct {
	create *InSiteMessageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InSiteMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(insitemessage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InSiteMessageUpsertBulk) UpdateNewValues() *InSiteMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(insitemessage.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(insitemessage.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InSiteMessage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InSiteMessageUpsertBulk) Ignore() *InSiteMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InSiteMessageUpsertBulk) DoNothing() *InSiteMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InSiteMessageCreateBulk.OnConflict
// documentation for more info.
func (u *InSiteMessageUpsertBulk) Update(set func(*InSiteMessageUpsert)) *InSiteMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InSiteMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *InSiteMessageUpsertBulk) SetUpdateTime(v time.Time) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *InSiteMessageUpsertBulk) UpdateUpdateTime() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *InSiteMessageUpsertBulk) ClearUpdateTime() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *InSiteMessageUpsertBulk) SetDeleteTime(v time.Time) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *InSiteMessageUpsertBulk) UpdateDeleteTime() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *InSiteMessageUpsertBulk) ClearDeleteTime() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *InSiteMessageUpsertBulk) SetCreateBy(v uint32) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *InSiteMessageUpsertBulk) AddCreateBy(v uint32) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *InSiteMessageUpsertBulk) UpdateCreateBy() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *InSiteMessageUpsertBulk) ClearCreateBy() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *InSiteMessageUpsertBulk) SetUpdateBy(v uint32) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetUpdateBy(v)
	})
}

// AddUpdateBy adds v to the "update_by" field.
func (u *InSiteMessageUpsertBulk) AddUpdateBy(v uint32) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.AddUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *InSiteMessageUpsertBulk) UpdateUpdateBy() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *InSiteMessageUpsertBulk) ClearUpdateBy() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearUpdateBy()
	})
}

// SetRemark sets the "remark" field.
func (u *InSiteMessageUpsertBulk) SetRemark(v string) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InSiteMessageUpsertBulk) UpdateRemark() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *InSiteMessageUpsertBulk) ClearRemark() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearRemark()
	})
}

// SetTitle sets the "title" field.
func (u *InSiteMessageUpsertBulk) SetTitle(v string) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *InSiteMessageUpsertBulk) UpdateTitle() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *InSiteMessageUpsertBulk) ClearTitle() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearTitle()
	})
}

// SetContent sets the "content" field.
func (u *InSiteMessageUpsertBulk) SetContent(v string) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *InSiteMessageUpsertBulk) UpdateContent() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *InSiteMessageUpsertBulk) ClearContent() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearContent()
	})
}

// SetCategoryID sets the "category_id" field.
func (u *InSiteMessageUpsertBulk) SetCategoryID(v uint32) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetCategoryID(v)
	})
}

// AddCategoryID adds v to the "category_id" field.
func (u *InSiteMessageUpsertBulk) AddCategoryID(v uint32) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.AddCategoryID(v)
	})
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *InSiteMessageUpsertBulk) UpdateCategoryID() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateCategoryID()
	})
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *InSiteMessageUpsertBulk) ClearCategoryID() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearCategoryID()
	})
}

// SetStatus sets the "status" field.
func (u *InSiteMessageUpsertBulk) SetStatus(v insitemessage.Status) *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InSiteMessageUpsertBulk) UpdateStatus() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *InSiteMessageUpsertBulk) ClearStatus() *InSiteMessageUpsertBulk {
	return u.Update(func(s *InSiteMessageUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *InSiteMessageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InSiteMessageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InSiteMessageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InSiteMessageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
