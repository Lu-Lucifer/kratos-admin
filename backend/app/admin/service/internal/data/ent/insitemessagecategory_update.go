// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/insitemessagecategory"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InSiteMessageCategoryUpdate is the builder for updating InSiteMessageCategory entities.
type InSiteMessageCategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *InSiteMessageCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InSiteMessageCategoryUpdate builder.
func (ismcu *InSiteMessageCategoryUpdate) Where(ps ...predicate.InSiteMessageCategory) *InSiteMessageCategoryUpdate {
	ismcu.mutation.Where(ps...)
	return ismcu
}

// SetUpdateTime sets the "update_time" field.
func (ismcu *InSiteMessageCategoryUpdate) SetUpdateTime(t time.Time) *InSiteMessageCategoryUpdate {
	ismcu.mutation.SetUpdateTime(t)
	return ismcu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ismcu *InSiteMessageCategoryUpdate) SetNillableUpdateTime(t *time.Time) *InSiteMessageCategoryUpdate {
	if t != nil {
		ismcu.SetUpdateTime(*t)
	}
	return ismcu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ismcu *InSiteMessageCategoryUpdate) ClearUpdateTime() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearUpdateTime()
	return ismcu
}

// SetDeleteTime sets the "delete_time" field.
func (ismcu *InSiteMessageCategoryUpdate) SetDeleteTime(t time.Time) *InSiteMessageCategoryUpdate {
	ismcu.mutation.SetDeleteTime(t)
	return ismcu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ismcu *InSiteMessageCategoryUpdate) SetNillableDeleteTime(t *time.Time) *InSiteMessageCategoryUpdate {
	if t != nil {
		ismcu.SetDeleteTime(*t)
	}
	return ismcu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ismcu *InSiteMessageCategoryUpdate) ClearDeleteTime() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearDeleteTime()
	return ismcu
}

// SetCreateBy sets the "create_by" field.
func (ismcu *InSiteMessageCategoryUpdate) SetCreateBy(u uint32) *InSiteMessageCategoryUpdate {
	ismcu.mutation.ResetCreateBy()
	ismcu.mutation.SetCreateBy(u)
	return ismcu
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (ismcu *InSiteMessageCategoryUpdate) SetNillableCreateBy(u *uint32) *InSiteMessageCategoryUpdate {
	if u != nil {
		ismcu.SetCreateBy(*u)
	}
	return ismcu
}

// AddCreateBy adds u to the "create_by" field.
func (ismcu *InSiteMessageCategoryUpdate) AddCreateBy(u int32) *InSiteMessageCategoryUpdate {
	ismcu.mutation.AddCreateBy(u)
	return ismcu
}

// ClearCreateBy clears the value of the "create_by" field.
func (ismcu *InSiteMessageCategoryUpdate) ClearCreateBy() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearCreateBy()
	return ismcu
}

// SetUpdateBy sets the "update_by" field.
func (ismcu *InSiteMessageCategoryUpdate) SetUpdateBy(u uint32) *InSiteMessageCategoryUpdate {
	ismcu.mutation.ResetUpdateBy()
	ismcu.mutation.SetUpdateBy(u)
	return ismcu
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (ismcu *InSiteMessageCategoryUpdate) SetNillableUpdateBy(u *uint32) *InSiteMessageCategoryUpdate {
	if u != nil {
		ismcu.SetUpdateBy(*u)
	}
	return ismcu
}

// AddUpdateBy adds u to the "update_by" field.
func (ismcu *InSiteMessageCategoryUpdate) AddUpdateBy(u int32) *InSiteMessageCategoryUpdate {
	ismcu.mutation.AddUpdateBy(u)
	return ismcu
}

// ClearUpdateBy clears the value of the "update_by" field.
func (ismcu *InSiteMessageCategoryUpdate) ClearUpdateBy() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearUpdateBy()
	return ismcu
}

// SetRemark sets the "remark" field.
func (ismcu *InSiteMessageCategoryUpdate) SetRemark(s string) *InSiteMessageCategoryUpdate {
	ismcu.mutation.SetRemark(s)
	return ismcu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ismcu *InSiteMessageCategoryUpdate) SetNillableRemark(s *string) *InSiteMessageCategoryUpdate {
	if s != nil {
		ismcu.SetRemark(*s)
	}
	return ismcu
}

// ClearRemark clears the value of the "remark" field.
func (ismcu *InSiteMessageCategoryUpdate) ClearRemark() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearRemark()
	return ismcu
}

// SetName sets the "name" field.
func (ismcu *InSiteMessageCategoryUpdate) SetName(s string) *InSiteMessageCategoryUpdate {
	ismcu.mutation.SetName(s)
	return ismcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ismcu *InSiteMessageCategoryUpdate) SetNillableName(s *string) *InSiteMessageCategoryUpdate {
	if s != nil {
		ismcu.SetName(*s)
	}
	return ismcu
}

// ClearName clears the value of the "name" field.
func (ismcu *InSiteMessageCategoryUpdate) ClearName() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearName()
	return ismcu
}

// SetCode sets the "code" field.
func (ismcu *InSiteMessageCategoryUpdate) SetCode(s string) *InSiteMessageCategoryUpdate {
	ismcu.mutation.SetCode(s)
	return ismcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ismcu *InSiteMessageCategoryUpdate) SetNillableCode(s *string) *InSiteMessageCategoryUpdate {
	if s != nil {
		ismcu.SetCode(*s)
	}
	return ismcu
}

// ClearCode clears the value of the "code" field.
func (ismcu *InSiteMessageCategoryUpdate) ClearCode() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearCode()
	return ismcu
}

// SetSortID sets the "sort_id" field.
func (ismcu *InSiteMessageCategoryUpdate) SetSortID(i int32) *InSiteMessageCategoryUpdate {
	ismcu.mutation.ResetSortID()
	ismcu.mutation.SetSortID(i)
	return ismcu
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (ismcu *InSiteMessageCategoryUpdate) SetNillableSortID(i *int32) *InSiteMessageCategoryUpdate {
	if i != nil {
		ismcu.SetSortID(*i)
	}
	return ismcu
}

// AddSortID adds i to the "sort_id" field.
func (ismcu *InSiteMessageCategoryUpdate) AddSortID(i int32) *InSiteMessageCategoryUpdate {
	ismcu.mutation.AddSortID(i)
	return ismcu
}

// ClearSortID clears the value of the "sort_id" field.
func (ismcu *InSiteMessageCategoryUpdate) ClearSortID() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearSortID()
	return ismcu
}

// SetEnable sets the "enable" field.
func (ismcu *InSiteMessageCategoryUpdate) SetEnable(b bool) *InSiteMessageCategoryUpdate {
	ismcu.mutation.SetEnable(b)
	return ismcu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ismcu *InSiteMessageCategoryUpdate) SetNillableEnable(b *bool) *InSiteMessageCategoryUpdate {
	if b != nil {
		ismcu.SetEnable(*b)
	}
	return ismcu
}

// ClearEnable clears the value of the "enable" field.
func (ismcu *InSiteMessageCategoryUpdate) ClearEnable() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearEnable()
	return ismcu
}

// SetParentID sets the "parent_id" field.
func (ismcu *InSiteMessageCategoryUpdate) SetParentID(u uint32) *InSiteMessageCategoryUpdate {
	ismcu.mutation.SetParentID(u)
	return ismcu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ismcu *InSiteMessageCategoryUpdate) SetNillableParentID(u *uint32) *InSiteMessageCategoryUpdate {
	if u != nil {
		ismcu.SetParentID(*u)
	}
	return ismcu
}

// ClearParentID clears the value of the "parent_id" field.
func (ismcu *InSiteMessageCategoryUpdate) ClearParentID() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearParentID()
	return ismcu
}

// SetParent sets the "parent" edge to the InSiteMessageCategory entity.
func (ismcu *InSiteMessageCategoryUpdate) SetParent(i *InSiteMessageCategory) *InSiteMessageCategoryUpdate {
	return ismcu.SetParentID(i.ID)
}

// AddChildIDs adds the "children" edge to the InSiteMessageCategory entity by IDs.
func (ismcu *InSiteMessageCategoryUpdate) AddChildIDs(ids ...uint32) *InSiteMessageCategoryUpdate {
	ismcu.mutation.AddChildIDs(ids...)
	return ismcu
}

// AddChildren adds the "children" edges to the InSiteMessageCategory entity.
func (ismcu *InSiteMessageCategoryUpdate) AddChildren(i ...*InSiteMessageCategory) *InSiteMessageCategoryUpdate {
	ids := make([]uint32, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ismcu.AddChildIDs(ids...)
}

// Mutation returns the InSiteMessageCategoryMutation object of the builder.
func (ismcu *InSiteMessageCategoryUpdate) Mutation() *InSiteMessageCategoryMutation {
	return ismcu.mutation
}

// ClearParent clears the "parent" edge to the InSiteMessageCategory entity.
func (ismcu *InSiteMessageCategoryUpdate) ClearParent() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearParent()
	return ismcu
}

// ClearChildren clears all "children" edges to the InSiteMessageCategory entity.
func (ismcu *InSiteMessageCategoryUpdate) ClearChildren() *InSiteMessageCategoryUpdate {
	ismcu.mutation.ClearChildren()
	return ismcu
}

// RemoveChildIDs removes the "children" edge to InSiteMessageCategory entities by IDs.
func (ismcu *InSiteMessageCategoryUpdate) RemoveChildIDs(ids ...uint32) *InSiteMessageCategoryUpdate {
	ismcu.mutation.RemoveChildIDs(ids...)
	return ismcu
}

// RemoveChildren removes "children" edges to InSiteMessageCategory entities.
func (ismcu *InSiteMessageCategoryUpdate) RemoveChildren(i ...*InSiteMessageCategory) *InSiteMessageCategoryUpdate {
	ids := make([]uint32, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ismcu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ismcu *InSiteMessageCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ismcu.sqlSave, ismcu.mutation, ismcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ismcu *InSiteMessageCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ismcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ismcu *InSiteMessageCategoryUpdate) Exec(ctx context.Context) error {
	_, err := ismcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ismcu *InSiteMessageCategoryUpdate) ExecX(ctx context.Context) {
	if err := ismcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ismcu *InSiteMessageCategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InSiteMessageCategoryUpdate {
	ismcu.modifiers = append(ismcu.modifiers, modifiers...)
	return ismcu
}

func (ismcu *InSiteMessageCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(insitemessagecategory.Table, insitemessagecategory.Columns, sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32))
	if ps := ismcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ismcu.mutation.CreateTimeCleared() {
		_spec.ClearField(insitemessagecategory.FieldCreateTime, field.TypeTime)
	}
	if value, ok := ismcu.mutation.UpdateTime(); ok {
		_spec.SetField(insitemessagecategory.FieldUpdateTime, field.TypeTime, value)
	}
	if ismcu.mutation.UpdateTimeCleared() {
		_spec.ClearField(insitemessagecategory.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := ismcu.mutation.DeleteTime(); ok {
		_spec.SetField(insitemessagecategory.FieldDeleteTime, field.TypeTime, value)
	}
	if ismcu.mutation.DeleteTimeCleared() {
		_spec.ClearField(insitemessagecategory.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ismcu.mutation.CreateBy(); ok {
		_spec.SetField(insitemessagecategory.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := ismcu.mutation.AddedCreateBy(); ok {
		_spec.AddField(insitemessagecategory.FieldCreateBy, field.TypeUint32, value)
	}
	if ismcu.mutation.CreateByCleared() {
		_spec.ClearField(insitemessagecategory.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := ismcu.mutation.UpdateBy(); ok {
		_spec.SetField(insitemessagecategory.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := ismcu.mutation.AddedUpdateBy(); ok {
		_spec.AddField(insitemessagecategory.FieldUpdateBy, field.TypeUint32, value)
	}
	if ismcu.mutation.UpdateByCleared() {
		_spec.ClearField(insitemessagecategory.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := ismcu.mutation.Remark(); ok {
		_spec.SetField(insitemessagecategory.FieldRemark, field.TypeString, value)
	}
	if ismcu.mutation.RemarkCleared() {
		_spec.ClearField(insitemessagecategory.FieldRemark, field.TypeString)
	}
	if value, ok := ismcu.mutation.Name(); ok {
		_spec.SetField(insitemessagecategory.FieldName, field.TypeString, value)
	}
	if ismcu.mutation.NameCleared() {
		_spec.ClearField(insitemessagecategory.FieldName, field.TypeString)
	}
	if value, ok := ismcu.mutation.Code(); ok {
		_spec.SetField(insitemessagecategory.FieldCode, field.TypeString, value)
	}
	if ismcu.mutation.CodeCleared() {
		_spec.ClearField(insitemessagecategory.FieldCode, field.TypeString)
	}
	if value, ok := ismcu.mutation.SortID(); ok {
		_spec.SetField(insitemessagecategory.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := ismcu.mutation.AddedSortID(); ok {
		_spec.AddField(insitemessagecategory.FieldSortID, field.TypeInt32, value)
	}
	if ismcu.mutation.SortIDCleared() {
		_spec.ClearField(insitemessagecategory.FieldSortID, field.TypeInt32)
	}
	if value, ok := ismcu.mutation.Enable(); ok {
		_spec.SetField(insitemessagecategory.FieldEnable, field.TypeBool, value)
	}
	if ismcu.mutation.EnableCleared() {
		_spec.ClearField(insitemessagecategory.FieldEnable, field.TypeBool)
	}
	if ismcu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insitemessagecategory.ParentTable,
			Columns: []string{insitemessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ismcu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insitemessagecategory.ParentTable,
			Columns: []string{insitemessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ismcu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insitemessagecategory.ChildrenTable,
			Columns: []string{insitemessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ismcu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ismcu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insitemessagecategory.ChildrenTable,
			Columns: []string{insitemessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ismcu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insitemessagecategory.ChildrenTable,
			Columns: []string{insitemessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ismcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ismcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{insitemessagecategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ismcu.mutation.done = true
	return n, nil
}

// InSiteMessageCategoryUpdateOne is the builder for updating a single InSiteMessageCategory entity.
type InSiteMessageCategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InSiteMessageCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetUpdateTime(t time.Time) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.SetUpdateTime(t)
	return ismcuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetNillableUpdateTime(t *time.Time) *InSiteMessageCategoryUpdateOne {
	if t != nil {
		ismcuo.SetUpdateTime(*t)
	}
	return ismcuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearUpdateTime() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearUpdateTime()
	return ismcuo
}

// SetDeleteTime sets the "delete_time" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetDeleteTime(t time.Time) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.SetDeleteTime(t)
	return ismcuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetNillableDeleteTime(t *time.Time) *InSiteMessageCategoryUpdateOne {
	if t != nil {
		ismcuo.SetDeleteTime(*t)
	}
	return ismcuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearDeleteTime() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearDeleteTime()
	return ismcuo
}

// SetCreateBy sets the "create_by" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetCreateBy(u uint32) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ResetCreateBy()
	ismcuo.mutation.SetCreateBy(u)
	return ismcuo
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetNillableCreateBy(u *uint32) *InSiteMessageCategoryUpdateOne {
	if u != nil {
		ismcuo.SetCreateBy(*u)
	}
	return ismcuo
}

// AddCreateBy adds u to the "create_by" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) AddCreateBy(u int32) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.AddCreateBy(u)
	return ismcuo
}

// ClearCreateBy clears the value of the "create_by" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearCreateBy() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearCreateBy()
	return ismcuo
}

// SetUpdateBy sets the "update_by" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetUpdateBy(u uint32) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ResetUpdateBy()
	ismcuo.mutation.SetUpdateBy(u)
	return ismcuo
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetNillableUpdateBy(u *uint32) *InSiteMessageCategoryUpdateOne {
	if u != nil {
		ismcuo.SetUpdateBy(*u)
	}
	return ismcuo
}

// AddUpdateBy adds u to the "update_by" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) AddUpdateBy(u int32) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.AddUpdateBy(u)
	return ismcuo
}

// ClearUpdateBy clears the value of the "update_by" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearUpdateBy() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearUpdateBy()
	return ismcuo
}

// SetRemark sets the "remark" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetRemark(s string) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.SetRemark(s)
	return ismcuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetNillableRemark(s *string) *InSiteMessageCategoryUpdateOne {
	if s != nil {
		ismcuo.SetRemark(*s)
	}
	return ismcuo
}

// ClearRemark clears the value of the "remark" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearRemark() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearRemark()
	return ismcuo
}

// SetName sets the "name" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetName(s string) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.SetName(s)
	return ismcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetNillableName(s *string) *InSiteMessageCategoryUpdateOne {
	if s != nil {
		ismcuo.SetName(*s)
	}
	return ismcuo
}

// ClearName clears the value of the "name" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearName() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearName()
	return ismcuo
}

// SetCode sets the "code" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetCode(s string) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.SetCode(s)
	return ismcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetNillableCode(s *string) *InSiteMessageCategoryUpdateOne {
	if s != nil {
		ismcuo.SetCode(*s)
	}
	return ismcuo
}

// ClearCode clears the value of the "code" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearCode() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearCode()
	return ismcuo
}

// SetSortID sets the "sort_id" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetSortID(i int32) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ResetSortID()
	ismcuo.mutation.SetSortID(i)
	return ismcuo
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetNillableSortID(i *int32) *InSiteMessageCategoryUpdateOne {
	if i != nil {
		ismcuo.SetSortID(*i)
	}
	return ismcuo
}

// AddSortID adds i to the "sort_id" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) AddSortID(i int32) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.AddSortID(i)
	return ismcuo
}

// ClearSortID clears the value of the "sort_id" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearSortID() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearSortID()
	return ismcuo
}

// SetEnable sets the "enable" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetEnable(b bool) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.SetEnable(b)
	return ismcuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetNillableEnable(b *bool) *InSiteMessageCategoryUpdateOne {
	if b != nil {
		ismcuo.SetEnable(*b)
	}
	return ismcuo
}

// ClearEnable clears the value of the "enable" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearEnable() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearEnable()
	return ismcuo
}

// SetParentID sets the "parent_id" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetParentID(u uint32) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.SetParentID(u)
	return ismcuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetNillableParentID(u *uint32) *InSiteMessageCategoryUpdateOne {
	if u != nil {
		ismcuo.SetParentID(*u)
	}
	return ismcuo
}

// ClearParentID clears the value of the "parent_id" field.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearParentID() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearParentID()
	return ismcuo
}

// SetParent sets the "parent" edge to the InSiteMessageCategory entity.
func (ismcuo *InSiteMessageCategoryUpdateOne) SetParent(i *InSiteMessageCategory) *InSiteMessageCategoryUpdateOne {
	return ismcuo.SetParentID(i.ID)
}

// AddChildIDs adds the "children" edge to the InSiteMessageCategory entity by IDs.
func (ismcuo *InSiteMessageCategoryUpdateOne) AddChildIDs(ids ...uint32) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.AddChildIDs(ids...)
	return ismcuo
}

// AddChildren adds the "children" edges to the InSiteMessageCategory entity.
func (ismcuo *InSiteMessageCategoryUpdateOne) AddChildren(i ...*InSiteMessageCategory) *InSiteMessageCategoryUpdateOne {
	ids := make([]uint32, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ismcuo.AddChildIDs(ids...)
}

// Mutation returns the InSiteMessageCategoryMutation object of the builder.
func (ismcuo *InSiteMessageCategoryUpdateOne) Mutation() *InSiteMessageCategoryMutation {
	return ismcuo.mutation
}

// ClearParent clears the "parent" edge to the InSiteMessageCategory entity.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearParent() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearParent()
	return ismcuo
}

// ClearChildren clears all "children" edges to the InSiteMessageCategory entity.
func (ismcuo *InSiteMessageCategoryUpdateOne) ClearChildren() *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.ClearChildren()
	return ismcuo
}

// RemoveChildIDs removes the "children" edge to InSiteMessageCategory entities by IDs.
func (ismcuo *InSiteMessageCategoryUpdateOne) RemoveChildIDs(ids ...uint32) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.RemoveChildIDs(ids...)
	return ismcuo
}

// RemoveChildren removes "children" edges to InSiteMessageCategory entities.
func (ismcuo *InSiteMessageCategoryUpdateOne) RemoveChildren(i ...*InSiteMessageCategory) *InSiteMessageCategoryUpdateOne {
	ids := make([]uint32, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ismcuo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the InSiteMessageCategoryUpdate builder.
func (ismcuo *InSiteMessageCategoryUpdateOne) Where(ps ...predicate.InSiteMessageCategory) *InSiteMessageCategoryUpdateOne {
	ismcuo.mutation.Where(ps...)
	return ismcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ismcuo *InSiteMessageCategoryUpdateOne) Select(field string, fields ...string) *InSiteMessageCategoryUpdateOne {
	ismcuo.fields = append([]string{field}, fields...)
	return ismcuo
}

// Save executes the query and returns the updated InSiteMessageCategory entity.
func (ismcuo *InSiteMessageCategoryUpdateOne) Save(ctx context.Context) (*InSiteMessageCategory, error) {
	return withHooks(ctx, ismcuo.sqlSave, ismcuo.mutation, ismcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ismcuo *InSiteMessageCategoryUpdateOne) SaveX(ctx context.Context) *InSiteMessageCategory {
	node, err := ismcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ismcuo *InSiteMessageCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ismcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ismcuo *InSiteMessageCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := ismcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ismcuo *InSiteMessageCategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InSiteMessageCategoryUpdateOne {
	ismcuo.modifiers = append(ismcuo.modifiers, modifiers...)
	return ismcuo
}

func (ismcuo *InSiteMessageCategoryUpdateOne) sqlSave(ctx context.Context) (_node *InSiteMessageCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(insitemessagecategory.Table, insitemessagecategory.Columns, sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32))
	id, ok := ismcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InSiteMessageCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ismcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, insitemessagecategory.FieldID)
		for _, f := range fields {
			if !insitemessagecategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != insitemessagecategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ismcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ismcuo.mutation.CreateTimeCleared() {
		_spec.ClearField(insitemessagecategory.FieldCreateTime, field.TypeTime)
	}
	if value, ok := ismcuo.mutation.UpdateTime(); ok {
		_spec.SetField(insitemessagecategory.FieldUpdateTime, field.TypeTime, value)
	}
	if ismcuo.mutation.UpdateTimeCleared() {
		_spec.ClearField(insitemessagecategory.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := ismcuo.mutation.DeleteTime(); ok {
		_spec.SetField(insitemessagecategory.FieldDeleteTime, field.TypeTime, value)
	}
	if ismcuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(insitemessagecategory.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ismcuo.mutation.CreateBy(); ok {
		_spec.SetField(insitemessagecategory.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := ismcuo.mutation.AddedCreateBy(); ok {
		_spec.AddField(insitemessagecategory.FieldCreateBy, field.TypeUint32, value)
	}
	if ismcuo.mutation.CreateByCleared() {
		_spec.ClearField(insitemessagecategory.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := ismcuo.mutation.UpdateBy(); ok {
		_spec.SetField(insitemessagecategory.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := ismcuo.mutation.AddedUpdateBy(); ok {
		_spec.AddField(insitemessagecategory.FieldUpdateBy, field.TypeUint32, value)
	}
	if ismcuo.mutation.UpdateByCleared() {
		_spec.ClearField(insitemessagecategory.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := ismcuo.mutation.Remark(); ok {
		_spec.SetField(insitemessagecategory.FieldRemark, field.TypeString, value)
	}
	if ismcuo.mutation.RemarkCleared() {
		_spec.ClearField(insitemessagecategory.FieldRemark, field.TypeString)
	}
	if value, ok := ismcuo.mutation.Name(); ok {
		_spec.SetField(insitemessagecategory.FieldName, field.TypeString, value)
	}
	if ismcuo.mutation.NameCleared() {
		_spec.ClearField(insitemessagecategory.FieldName, field.TypeString)
	}
	if value, ok := ismcuo.mutation.Code(); ok {
		_spec.SetField(insitemessagecategory.FieldCode, field.TypeString, value)
	}
	if ismcuo.mutation.CodeCleared() {
		_spec.ClearField(insitemessagecategory.FieldCode, field.TypeString)
	}
	if value, ok := ismcuo.mutation.SortID(); ok {
		_spec.SetField(insitemessagecategory.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := ismcuo.mutation.AddedSortID(); ok {
		_spec.AddField(insitemessagecategory.FieldSortID, field.TypeInt32, value)
	}
	if ismcuo.mutation.SortIDCleared() {
		_spec.ClearField(insitemessagecategory.FieldSortID, field.TypeInt32)
	}
	if value, ok := ismcuo.mutation.Enable(); ok {
		_spec.SetField(insitemessagecategory.FieldEnable, field.TypeBool, value)
	}
	if ismcuo.mutation.EnableCleared() {
		_spec.ClearField(insitemessagecategory.FieldEnable, field.TypeBool)
	}
	if ismcuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insitemessagecategory.ParentTable,
			Columns: []string{insitemessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ismcuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insitemessagecategory.ParentTable,
			Columns: []string{insitemessagecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ismcuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insitemessagecategory.ChildrenTable,
			Columns: []string{insitemessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ismcuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ismcuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insitemessagecategory.ChildrenTable,
			Columns: []string{insitemessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ismcuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insitemessagecategory.ChildrenTable,
			Columns: []string{insitemessagecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(insitemessagecategory.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ismcuo.modifiers...)
	_node = &InSiteMessageCategory{config: ismcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ismcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{insitemessagecategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ismcuo.mutation.done = true
	return _node, nil
}
