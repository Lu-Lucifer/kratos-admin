// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/insitemessage"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InSiteMessage is the model entity for the InSiteMessage schema.
type InSiteMessage struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreateTime *time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time,omitempty"`
	// 创建者ID
	CreateBy *uint32 `json:"create_by,omitempty"`
	// 更新者ID
	UpdateBy *uint32 `json:"update_by,omitempty"`
	// 备注
	Remark *string `json:"remark,omitempty"`
	// 标题
	Title *string `json:"title,omitempty"`
	// 内容
	Content *string `json:"content,omitempty"`
	// 分类ID
	CategoryID *uint32 `json:"category_id,omitempty"`
	// 消息状态
	Status       *insitemessage.Status `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InSiteMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case insitemessage.FieldID, insitemessage.FieldCreateBy, insitemessage.FieldUpdateBy, insitemessage.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		case insitemessage.FieldRemark, insitemessage.FieldTitle, insitemessage.FieldContent, insitemessage.FieldStatus:
			values[i] = new(sql.NullString)
		case insitemessage.FieldCreateTime, insitemessage.FieldUpdateTime, insitemessage.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InSiteMessage fields.
func (ism *InSiteMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case insitemessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ism.ID = uint32(value.Int64)
		case insitemessage.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ism.CreateTime = new(time.Time)
				*ism.CreateTime = value.Time
			}
		case insitemessage.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ism.UpdateTime = new(time.Time)
				*ism.UpdateTime = value.Time
			}
		case insitemessage.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				ism.DeleteTime = new(time.Time)
				*ism.DeleteTime = value.Time
			}
		case insitemessage.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				ism.CreateBy = new(uint32)
				*ism.CreateBy = uint32(value.Int64)
			}
		case insitemessage.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				ism.UpdateBy = new(uint32)
				*ism.UpdateBy = uint32(value.Int64)
			}
		case insitemessage.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ism.Remark = new(string)
				*ism.Remark = value.String
			}
		case insitemessage.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ism.Title = new(string)
				*ism.Title = value.String
			}
		case insitemessage.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ism.Content = new(string)
				*ism.Content = value.String
			}
		case insitemessage.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				ism.CategoryID = new(uint32)
				*ism.CategoryID = uint32(value.Int64)
			}
		case insitemessage.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ism.Status = new(insitemessage.Status)
				*ism.Status = insitemessage.Status(value.String)
			}
		default:
			ism.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InSiteMessage.
// This includes values selected through modifiers, order, etc.
func (ism *InSiteMessage) Value(name string) (ent.Value, error) {
	return ism.selectValues.Get(name)
}

// Update returns a builder for updating this InSiteMessage.
// Note that you need to call InSiteMessage.Unwrap() before calling this method if this InSiteMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (ism *InSiteMessage) Update() *InSiteMessageUpdateOne {
	return NewInSiteMessageClient(ism.config).UpdateOne(ism)
}

// Unwrap unwraps the InSiteMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ism *InSiteMessage) Unwrap() *InSiteMessage {
	_tx, ok := ism.config.driver.(*txDriver)
	if !ok {
		panic("ent: InSiteMessage is not a transactional entity")
	}
	ism.config.driver = _tx.drv
	return ism
}

// String implements the fmt.Stringer.
func (ism *InSiteMessage) String() string {
	var builder strings.Builder
	builder.WriteString("InSiteMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ism.ID))
	if v := ism.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ism.UpdateTime; v != nil {
		builder.WriteString("update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ism.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ism.CreateBy; v != nil {
		builder.WriteString("create_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ism.UpdateBy; v != nil {
		builder.WriteString("update_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ism.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ism.Title; v != nil {
		builder.WriteString("title=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ism.Content; v != nil {
		builder.WriteString("content=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ism.CategoryID; v != nil {
		builder.WriteString("category_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ism.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// InSiteMessages is a parsable slice of InSiteMessage.
type InSiteMessages []*InSiteMessage
