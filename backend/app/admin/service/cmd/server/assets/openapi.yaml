# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: Kratos Admin API
    description: Kratos Admin API
    contact:
        name: tx7do
        url: https://github.com/tx7do/kratos-admin
        email: yanglinbo@gmail.com
    license:
        name: MIT License
        url: https://github.com/tx7do/kratos-admin/blob/master/LICENSE
    version: "1.0"
paths:
    /admin/v1/admin_login_logs:
        get:
            tags:
                - AdminLoginLogService
            description: 查询后台登录日志列表
            operationId: AdminLoginLogService_ListAdminLoginLog
            parameters:
                - name: page
                  in: query
                  description: 当前页码
                  schema:
                    type: integer
                    format: int32
                - name: pageSize
                  in: query
                  description: 每一页的行数
                  schema:
                    type: integer
                    format: int32
                - name: query
                  in: query
                  description: AND过滤参数，其语法为json格式的字符串，如：{"key1":"val1","key2":"val2"}，具体请参见：https://github.com/tx7do/go-utils/tree/main/entgo/query/README.md
                  schema:
                    type: string
                - name: or
                  in: query
                  description: OR过滤参数，语法同AND过滤参数。
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  description: 排序条件，其语法为JSON字符串，例如：{"val1", "-val2"}。字段名前加'-'为降序，否则为升序。
                  schema:
                    type: array
                    items:
                        type: string
                - name: noPaging
                  in: query
                  description: 是否不分页，如果为true，则page和pageSize参数无效。
                  schema:
                    type: boolean
                - name: fieldMask
                  in: query
                  description: 字段掩码，其作用为SELECT中的字段，其语法为使用逗号分隔字段名，例如：id,realName,userName。如果为空则选中所有字段，即SELECT *。
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListAdminLoginLogResponse'
    /admin/v1/admin_login_logs/{id}:
        get:
            tags:
                - AdminLoginLogService
            description: 查询后台登录日志详情
            operationId: AdminLoginLogService_GetAdminLoginLog
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AdminLoginLog'
    /admin/v1/admin_operation_logs:
        get:
            tags:
                - AdminOperationLogService
            description: 查询后台操作日志列表
            operationId: AdminOperationLogService_ListAdminOperationLog
            parameters:
                - name: page
                  in: query
                  description: 当前页码
                  schema:
                    type: integer
                    format: int32
                - name: pageSize
                  in: query
                  description: 每一页的行数
                  schema:
                    type: integer
                    format: int32
                - name: query
                  in: query
                  description: AND过滤参数，其语法为json格式的字符串，如：{"key1":"val1","key2":"val2"}，具体请参见：https://github.com/tx7do/go-utils/tree/main/entgo/query/README.md
                  schema:
                    type: string
                - name: or
                  in: query
                  description: OR过滤参数，语法同AND过滤参数。
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  description: 排序条件，其语法为JSON字符串，例如：{"val1", "-val2"}。字段名前加'-'为降序，否则为升序。
                  schema:
                    type: array
                    items:
                        type: string
                - name: noPaging
                  in: query
                  description: 是否不分页，如果为true，则page和pageSize参数无效。
                  schema:
                    type: boolean
                - name: fieldMask
                  in: query
                  description: 字段掩码，其作用为SELECT中的字段，其语法为使用逗号分隔字段名，例如：id,realName,userName。如果为空则选中所有字段，即SELECT *。
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListAdminOperationLogResponse'
    /admin/v1/admin_operation_logs/{id}:
        get:
            tags:
                - AdminOperationLogService
            description: 查询后台操作日志详情
            operationId: AdminOperationLogService_GetAdminOperationLog
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AdminOperationLog'
    /admin/v1/departments:
        get:
            tags:
                - DepartmentService
            description: 查询部门列表
            operationId: DepartmentService_ListDepartment
            parameters:
                - name: page
                  in: query
                  description: 当前页码
                  schema:
                    type: integer
                    format: int32
                - name: pageSize
                  in: query
                  description: 每一页的行数
                  schema:
                    type: integer
                    format: int32
                - name: query
                  in: query
                  description: AND过滤参数，其语法为json格式的字符串，如：{"key1":"val1","key2":"val2"}，具体请参见：https://github.com/tx7do/go-utils/tree/main/entgo/query/README.md
                  schema:
                    type: string
                - name: or
                  in: query
                  description: OR过滤参数，语法同AND过滤参数。
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  description: 排序条件，其语法为JSON字符串，例如：{"val1", "-val2"}。字段名前加'-'为降序，否则为升序。
                  schema:
                    type: array
                    items:
                        type: string
                - name: noPaging
                  in: query
                  description: 是否不分页，如果为true，则page和pageSize参数无效。
                  schema:
                    type: boolean
                - name: fieldMask
                  in: query
                  description: 字段掩码，其作用为SELECT中的字段，其语法为使用逗号分隔字段名，例如：id,realName,userName。如果为空则选中所有字段，即SELECT *。
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListDepartmentResponse'
        post:
            tags:
                - DepartmentService
            description: 创建部门
            operationId: DepartmentService_CreateDepartment
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateDepartmentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/departments/{data.id}:
        put:
            tags:
                - DepartmentService
            description: 更新部门
            operationId: DepartmentService_UpdateDepartment
            parameters:
                - name: data.id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateDepartmentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/departments/{id}:
        get:
            tags:
                - DepartmentService
            description: 查询部门详情
            operationId: DepartmentService_GetDepartment
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Department'
        delete:
            tags:
                - DepartmentService
            description: 删除部门
            operationId: DepartmentService_DeleteDepartment
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
                - name: operatorId
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/dict:
        get:
            tags:
                - DictService
            description: 查询字典列表
            operationId: DictService_ListDict
            parameters:
                - name: page
                  in: query
                  description: 当前页码
                  schema:
                    type: integer
                    format: int32
                - name: pageSize
                  in: query
                  description: 每一页的行数
                  schema:
                    type: integer
                    format: int32
                - name: query
                  in: query
                  description: AND过滤参数，其语法为json格式的字符串，如：{"key1":"val1","key2":"val2"}，具体请参见：https://github.com/tx7do/go-utils/tree/main/entgo/query/README.md
                  schema:
                    type: string
                - name: or
                  in: query
                  description: OR过滤参数，语法同AND过滤参数。
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  description: 排序条件，其语法为JSON字符串，例如：{"val1", "-val2"}。字段名前加'-'为降序，否则为升序。
                  schema:
                    type: array
                    items:
                        type: string
                - name: noPaging
                  in: query
                  description: 是否不分页，如果为true，则page和pageSize参数无效。
                  schema:
                    type: boolean
                - name: fieldMask
                  in: query
                  description: 字段掩码，其作用为SELECT中的字段，其语法为使用逗号分隔字段名，例如：id,realName,userName。如果为空则选中所有字段，即SELECT *。
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListDictResponse'
        post:
            tags:
                - DictService
            description: 创建字典
            operationId: DictService_CreateDict
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateDictRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/dict/{data.id}:
        put:
            tags:
                - DictService
            description: 更新字典
            operationId: DictService_UpdateDict
            parameters:
                - name: data.id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateDictRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/dict/{id}:
        get:
            tags:
                - DictService
            description: 查询字典详情
            operationId: DictService_GetDict
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Dict'
        delete:
            tags:
                - DictService
            description: 删除字典
            operationId: DictService_DeleteDict
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
                - name: operatorId
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/file:upload:
        put:
            tags:
                - FileService
            description: PUT方法上传文件
            operationId: FileService_PutUploadFile
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UploadFileRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UploadFileResponse'
        post:
            tags:
                - FileService
            description: POST方法上传文件
            operationId: FileService_PostUploadFile
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UploadFileRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UploadFileResponse'
    /admin/v1/file:upload-url:
        post:
            tags:
                - FileService
            description: 获取对象存储（OSS）上传用的预签名链接
            operationId: FileService_OssUploadUrl
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OssUploadUrlRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OssUploadUrlResponse'
    /admin/v1/login:
        post:
            tags:
                - AuthenticationService
            description: 登录
            operationId: AuthenticationService_Login
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginResponse'
            security:
                - {}
    /admin/v1/logout:
        post:
            tags:
                - AuthenticationService
            description: 登出
            operationId: AuthenticationService_Logout
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LogoutRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/me:
        get:
            tags:
                - AuthenticationService
            description: 后台获取已经登录的用户的数据
            operationId: AuthenticationService_GetMe
            parameters:
                - name: id
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
    /admin/v1/menus:
        get:
            tags:
                - MenuService
            description: 查询菜单列表
            operationId: MenuService_ListMenu
            parameters:
                - name: page
                  in: query
                  description: 当前页码
                  schema:
                    type: integer
                    format: int32
                - name: pageSize
                  in: query
                  description: 每一页的行数
                  schema:
                    type: integer
                    format: int32
                - name: query
                  in: query
                  description: AND过滤参数，其语法为json格式的字符串，如：{"key1":"val1","key2":"val2"}，具体请参见：https://github.com/tx7do/go-utils/tree/main/entgo/query/README.md
                  schema:
                    type: string
                - name: or
                  in: query
                  description: OR过滤参数，语法同AND过滤参数。
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  description: 排序条件，其语法为JSON字符串，例如：{"val1", "-val2"}。字段名前加'-'为降序，否则为升序。
                  schema:
                    type: array
                    items:
                        type: string
                - name: noPaging
                  in: query
                  description: 是否不分页，如果为true，则page和pageSize参数无效。
                  schema:
                    type: boolean
                - name: fieldMask
                  in: query
                  description: 字段掩码，其作用为SELECT中的字段，其语法为使用逗号分隔字段名，例如：id,realName,userName。如果为空则选中所有字段，即SELECT *。
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListMenuResponse'
        post:
            tags:
                - MenuService
            description: 创建菜单
            operationId: MenuService_CreateMenu
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateMenuRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/menus/{data.id}:
        put:
            tags:
                - MenuService
            description: 更新菜单
            operationId: MenuService_UpdateMenu
            parameters:
                - name: data.id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateMenuRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/menus/{id}:
        get:
            tags:
                - MenuService
            description: 查询菜单详情
            operationId: MenuService_GetMenu
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: int32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Menu'
        delete:
            tags:
                - MenuService
            description: 删除菜单
            operationId: MenuService_DeleteMenu
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: int32
                - name: operatorId
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/organizations:
        get:
            tags:
                - OrganizationService
            description: 查询组织列表
            operationId: OrganizationService_ListOrganization
            parameters:
                - name: page
                  in: query
                  description: 当前页码
                  schema:
                    type: integer
                    format: int32
                - name: pageSize
                  in: query
                  description: 每一页的行数
                  schema:
                    type: integer
                    format: int32
                - name: query
                  in: query
                  description: AND过滤参数，其语法为json格式的字符串，如：{"key1":"val1","key2":"val2"}，具体请参见：https://github.com/tx7do/go-utils/tree/main/entgo/query/README.md
                  schema:
                    type: string
                - name: or
                  in: query
                  description: OR过滤参数，语法同AND过滤参数。
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  description: 排序条件，其语法为JSON字符串，例如：{"val1", "-val2"}。字段名前加'-'为降序，否则为升序。
                  schema:
                    type: array
                    items:
                        type: string
                - name: noPaging
                  in: query
                  description: 是否不分页，如果为true，则page和pageSize参数无效。
                  schema:
                    type: boolean
                - name: fieldMask
                  in: query
                  description: 字段掩码，其作用为SELECT中的字段，其语法为使用逗号分隔字段名，例如：id,realName,userName。如果为空则选中所有字段，即SELECT *。
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListOrganizationResponse'
        post:
            tags:
                - OrganizationService
            description: 创建组织
            operationId: OrganizationService_CreateOrganization
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateOrganizationRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/organizations/{data.id}:
        put:
            tags:
                - OrganizationService
            description: 更新组织
            operationId: OrganizationService_UpdateOrganization
            parameters:
                - name: data.id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateOrganizationRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/organizations/{id}:
        get:
            tags:
                - OrganizationService
            description: 查询组织详情
            operationId: OrganizationService_GetOrganization
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organization'
        delete:
            tags:
                - OrganizationService
            description: 删除组织
            operationId: OrganizationService_DeleteOrganization
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
                - name: operatorId
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/perm-codes:
        get:
            tags:
                - RouterService
            description: 查询权限码列表
            operationId: RouterService_ListPermissionCode
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPermissionCodeResponse'
    /admin/v1/positions:
        get:
            tags:
                - PositionService
            description: 查询职位列表
            operationId: PositionService_ListPosition
            parameters:
                - name: page
                  in: query
                  description: 当前页码
                  schema:
                    type: integer
                    format: int32
                - name: pageSize
                  in: query
                  description: 每一页的行数
                  schema:
                    type: integer
                    format: int32
                - name: query
                  in: query
                  description: AND过滤参数，其语法为json格式的字符串，如：{"key1":"val1","key2":"val2"}，具体请参见：https://github.com/tx7do/go-utils/tree/main/entgo/query/README.md
                  schema:
                    type: string
                - name: or
                  in: query
                  description: OR过滤参数，语法同AND过滤参数。
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  description: 排序条件，其语法为JSON字符串，例如：{"val1", "-val2"}。字段名前加'-'为降序，否则为升序。
                  schema:
                    type: array
                    items:
                        type: string
                - name: noPaging
                  in: query
                  description: 是否不分页，如果为true，则page和pageSize参数无效。
                  schema:
                    type: boolean
                - name: fieldMask
                  in: query
                  description: 字段掩码，其作用为SELECT中的字段，其语法为使用逗号分隔字段名，例如：id,realName,userName。如果为空则选中所有字段，即SELECT *。
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPositionResponse'
        post:
            tags:
                - PositionService
            description: 创建职位
            operationId: PositionService_CreatePosition
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreatePositionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/positions/{data.id}:
        put:
            tags:
                - PositionService
            description: 更新职位
            operationId: PositionService_UpdatePosition
            parameters:
                - name: data.id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdatePositionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/positions/{id}:
        get:
            tags:
                - PositionService
            description: 查询职位详情
            operationId: PositionService_GetPosition
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Position'
        delete:
            tags:
                - PositionService
            description: 删除职位
            operationId: PositionService_DeletePosition
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
                - name: operatorId
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/refresh_token:
        post:
            tags:
                - AuthenticationService
            description: 刷新认证令牌
            operationId: AuthenticationService_RefreshToken
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RefreshTokenRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginResponse'
    /admin/v1/roles:
        get:
            tags:
                - RoleService
            description: 查询角色列表
            operationId: RoleService_ListRole
            parameters:
                - name: page
                  in: query
                  description: 当前页码
                  schema:
                    type: integer
                    format: int32
                - name: pageSize
                  in: query
                  description: 每一页的行数
                  schema:
                    type: integer
                    format: int32
                - name: query
                  in: query
                  description: AND过滤参数，其语法为json格式的字符串，如：{"key1":"val1","key2":"val2"}，具体请参见：https://github.com/tx7do/go-utils/tree/main/entgo/query/README.md
                  schema:
                    type: string
                - name: or
                  in: query
                  description: OR过滤参数，语法同AND过滤参数。
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  description: 排序条件，其语法为JSON字符串，例如：{"val1", "-val2"}。字段名前加'-'为降序，否则为升序。
                  schema:
                    type: array
                    items:
                        type: string
                - name: noPaging
                  in: query
                  description: 是否不分页，如果为true，则page和pageSize参数无效。
                  schema:
                    type: boolean
                - name: fieldMask
                  in: query
                  description: 字段掩码，其作用为SELECT中的字段，其语法为使用逗号分隔字段名，例如：id,realName,userName。如果为空则选中所有字段，即SELECT *。
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListRoleResponse'
        post:
            tags:
                - RoleService
            description: 创建角色
            operationId: RoleService_CreateRole
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateRoleRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/roles/{data.id}:
        put:
            tags:
                - RoleService
            description: 更新角色
            operationId: RoleService_UpdateRole
            parameters:
                - name: data.id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateRoleRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/roles/{id}:
        get:
            tags:
                - RoleService
            description: 查询角色详情
            operationId: RoleService_GetRole
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Role'
        delete:
            tags:
                - RoleService
            description: 删除角色
            operationId: RoleService_DeleteRole
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
                - name: operatorId
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/routes:
        get:
            tags:
                - RouterService
            description: 查询路由列表
            operationId: RouterService_ListRoute
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListRouteResponse'
    /admin/v1/ueditor:
        get:
            tags:
                - UEditorService
            description: UEditor API
            operationId: UEditorService_UEditorAPI
            parameters:
                - name: action
                  in: query
                  schema:
                    type: string
                - name: encode
                  in: query
                  schema:
                    type: string
                - name: start
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: size
                  in: query
                  schema:
                    type: integer
                    format: int32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UEditorResponse'
        post:
            tags:
                - UEditorService
            description: 上传文件
            operationId: UEditorService_UploadFile
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UEditorUploadRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UEditorUploadResponse'
    /admin/v1/users:
        get:
            tags:
                - UserService
            description: 获取用户列表
            operationId: UserService_ListUser
            parameters:
                - name: page
                  in: query
                  description: 当前页码
                  schema:
                    type: integer
                    format: int32
                - name: pageSize
                  in: query
                  description: 每一页的行数
                  schema:
                    type: integer
                    format: int32
                - name: query
                  in: query
                  description: AND过滤参数，其语法为json格式的字符串，如：{"key1":"val1","key2":"val2"}，具体请参见：https://github.com/tx7do/go-utils/tree/main/entgo/query/README.md
                  schema:
                    type: string
                - name: or
                  in: query
                  description: OR过滤参数，语法同AND过滤参数。
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  description: 排序条件，其语法为JSON字符串，例如：{"val1", "-val2"}。字段名前加'-'为降序，否则为升序。
                  schema:
                    type: array
                    items:
                        type: string
                - name: noPaging
                  in: query
                  description: 是否不分页，如果为true，则page和pageSize参数无效。
                  schema:
                    type: boolean
                - name: fieldMask
                  in: query
                  description: 字段掩码，其作用为SELECT中的字段，其语法为使用逗号分隔字段名，例如：id,realName,userName。如果为空则选中所有字段，即SELECT *。
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListUserResponse'
        post:
            tags:
                - UserService
            description: 创建用户
            operationId: UserService_CreateUser
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateUserRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/users/{data.id}:
        put:
            tags:
                - UserService
            description: 更新用户
            operationId: UserService_UpdateUser
            parameters:
                - name: data.id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateUserRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
    /admin/v1/users/{id}:
        get:
            tags:
                - UserService
            description: 获取用户数据
            operationId: UserService_GetUser
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
        delete:
            tags:
                - UserService
            description: 删除用户
            operationId: UserService_DeleteUser
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
                - name: operatorId
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content: {}
components:
    schemas:
        AdminLoginLog:
            type: object
            properties:
                id:
                    type: integer
                    description: 后台登录日志ID
                    format: uint32
                loginIp:
                    type: string
                    description: 登录IP地址
                loginMac:
                    type: string
                    description: 登录MAC地址
                loginTime:
                    type: string
                    description: 登录时间
                    format: date-time
                statusCode:
                    type: integer
                    description: 状态码
                    format: int32
                success:
                    type: boolean
                    description: 登录是否成功
                reason:
                    type: string
                    description: 登录失败原因
                location:
                    type: string
                    description: 登录地理位置
                userAgent:
                    type: string
                    description: 浏览器的用户代理信息
                browserName:
                    type: string
                    description: 浏览器名称
                browserVersion:
                    type: string
                    description: 浏览器版本
                clientId:
                    type: string
                    description: 客户端ID
                clientName:
                    type: string
                    description: 客户端名称
                osName:
                    type: string
                    description: 操作系统名称
                osVersion:
                    type: string
                    description: 操作系统版本
                userId:
                    type: integer
                    description: 操作者用户ID
                    format: uint32
                userName:
                    type: string
                    description: 操作者账号名
                createTime:
                    type: string
                    description: 创建时间
                    format: date-time
                updateTime:
                    type: string
                    description: 更新时间
                    format: date-time
                deleteTime:
                    type: string
                    description: 删除时间
                    format: date-time
            description: 后台登录日志
        AdminOperationLog:
            type: object
            properties:
                id:
                    type: integer
                    description: 后台操作日志ID
                    format: uint32
                costTime:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: 操作耗时
                success:
                    type: boolean
                    description: 操作是否成功
                requestId:
                    type: string
                    description: 请求ID
                statusCode:
                    type: integer
                    description: 状态码
                    format: int32
                method:
                    type: string
                    description: 请求方法
                operation:
                    type: string
                    description: 操作方法
                path:
                    type: string
                    description: 请求路径
                referer:
                    type: string
                    description: 请求源
                requestUri:
                    type: string
                    description: 请求URI
                reason:
                    type: string
                    description: 操作失败原因
                location:
                    type: string
                    description: 操作地理位置
                requestHeader:
                    type: string
                    description: 请求头
                requestBody:
                    type: string
                    description: 请求体
                response:
                    type: string
                    description: 响应信息
                userId:
                    type: integer
                    description: 操作者用户ID
                    format: uint32
                userName:
                    type: string
                    description: 操作者账号名
                clientIp:
                    type: string
                    description: 操作者IP
                userAgent:
                    type: string
                    description: 浏览器的用户代理信息
                browserName:
                    type: string
                    description: 浏览器名称
                browserVersion:
                    type: string
                    description: 浏览器版本
                clientId:
                    type: string
                    description: 客户端ID
                clientName:
                    type: string
                    description: 客户端名称
                osName:
                    type: string
                    description: 操作系统名称
                osVersion:
                    type: string
                    description: 操作系统版本
                createTime:
                    type: string
                    description: 创建时间
                    format: date-time
                updateTime:
                    type: string
                    description: 更新时间
                    format: date-time
                deleteTime:
                    type: string
                    description: 删除时间
                    format: date-time
            description: 后台操作日志
        CreateDepartmentRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Department'
            description: 创建部门 - 请求
        CreateDictRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Dict'
            description: 创建字典 - 请求
        CreateMenuRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Menu'
            description: 创建菜单 - 请求
        CreateOrganizationRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Organization'
            description: 创建组织 - 请求
        CreatePositionRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Position'
            description: 创建职位 - 请求
        CreateRoleRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Role'
            description: 创建角色 - 请求
        CreateUserRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/User'
                password:
                    readOnly: true
                    type: string
                    description: 用户登录密码
            description: 创建用户 - 请求
        Department:
            type: object
            properties:
                id:
                    type: integer
                    description: 部门ID
                    format: uint32
                name:
                    type: string
                    description: 部门名称
                organizationId:
                    type: integer
                    description: 所属组织ID
                    format: int32
                organizationName:
                    type: string
                    description: 所属组织名称
                sortId:
                    type: integer
                    description: 排序编号
                    format: int32
                status:
                    enum:
                        - ON
                        - OFF
                    type: string
                    default: ON
                    description: 状态
                remark:
                    type: string
                    description: 备注
                parentId:
                    type: integer
                    description: 父节点ID
                    format: uint32
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/Department'
                    description: 子节点树
                createTime:
                    type: string
                    description: 创建时间
                    format: date-time
                updateTime:
                    type: string
                    description: 更新时间
                    format: date-time
                deleteTime:
                    type: string
                    description: 删除时间
                    format: date-time
            description: 部门
        Dict:
            type: object
            properties:
                id:
                    type: integer
                    description: 字典ID
                    format: uint32
                category:
                    type: string
                    description: 字典分类
                categoryDesc:
                    type: string
                    description: 字典分类名称
                key:
                    type: string
                    description: 字典键
                value:
                    type: string
                    description: 字典值
                valueDesc:
                    type: string
                    description: 字典值名称
                valueDataType:
                    type: string
                    description: 字典值数据类型
                status:
                    enum:
                        - ON
                        - OFF
                    type: string
                    default: ON
                    description: 字典状态
                sortId:
                    type: integer
                    description: 排序编号
                    format: int32
                remark:
                    type: string
                    description: 备注
                createTime:
                    type: string
                    description: 创建时间
                    format: date-time
                updateTime:
                    type: string
                    description: 更新时间
                    format: date-time
                deleteTime:
                    type: string
                    description: 删除时间
                    format: date-time
            description: 字典
        File:
            type: object
            properties:
                fileName:
                    type: string
                mime:
                    type: string
                content:
                    type: string
                    format: bytes
        KratosStatus:
            type: object
            properties:
                code:
                    type: number
                    description: 错误码
                    format: int32
                message:
                    type: string
                    description: 错误消息
                reason:
                    type: string
                    description: 错误原因
                metadata:
                    type: object
                    description: 元数据
            description: Kratos错误返回
        ListAdminLoginLogResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/AdminLoginLog'
                total:
                    type: integer
                    format: uint32
            description: 查询后台登录日志列表 - 回应
        ListAdminOperationLogResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/AdminOperationLog'
                total:
                    type: integer
                    format: uint32
            description: 查询后台操作日志列表 - 回应
        ListDepartmentResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/Department'
                total:
                    type: integer
                    format: uint32
            description: 部门列表 - 答复
        ListDictResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/Dict'
                total:
                    type: integer
                    format: uint32
            description: 查询字典列表 - 回应
        ListMenuResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/Menu'
                total:
                    type: integer
                    format: uint32
            description: 查询菜单列表 - 回应
        ListOrganizationResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/Organization'
                total:
                    type: integer
                    format: uint32
            description: 组织列表 - 答复
        ListPermissionCodeResponse:
            type: object
            properties:
                codes:
                    type: array
                    items:
                        type: string
            description: 查询权限码列表 - 回应
        ListPositionResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/Position'
                total:
                    type: integer
                    format: uint32
            description: 获取职位列表 - 答复
        ListRoleResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/Role'
                total:
                    type: integer
                    format: uint32
            description: 角色列表 - 答复
        ListRouteResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/RouteItem'
            description: 查询路由列表 - 回应
        ListUserResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                total:
                    type: integer
                    format: uint32
            description: 获取用户列表 - 答复
        LoginRequest:
            required:
                - username
                - password
                - grant_type
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string
                grant_type:
                    type: string
                    default: password
                    description: 授权类型，此处的值固定为"password"，必选项。
                scope:
                    type: string
                client_id:
                    type: string
                    description: 应用程序的识别ID
                client_secret:
                    type: string
                    description: 应用程序的密码
            description: 用户后台登录 - 请求
        LoginResponse:
            required:
                - access_token
                - refresh_token
            type: object
            properties:
                access_token:
                    type: string
                    description: 访问令牌，必选项。授权服务器颁发的访问令牌字符串。
                refresh_token:
                    type: string
                    description: 更新令牌，用来获取下一次的访问令牌，可选项。如果访问令牌将过期，则返回刷新令牌很有用，应用程序可以使用该刷新令牌来获取另一个访问令牌。但是，通过隐式授予颁发的令牌不能颁发刷新令牌。
                token_type:
                    type: string
                    default: Bearer
                    description: 令牌的类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型，通常只是字符串“Bearer”。
                expires_in:
                    type: string
                    description: 令牌有效时间，单位为秒。如果访问令牌过期，服务器应回复授予访问令牌的持续时间。如果省略该参数，必须其他方式设置过期时间。
                scope:
                    type: string
                    description: 以空格分隔的用户授予范围列表。如果未提供，scope则授权任何范围，默认为空列表。
            description: 用户后台登录 - 回应
        LogoutRequest:
            type: object
            properties:
                id:
                    type: integer
                    format: uint32
            description: 用户后台登出 - 请求
        Menu:
            type: object
            properties:
                id:
                    type: integer
                    description: 菜单ID
                    format: int32
                status:
                    enum:
                        - OFF
                        - ON
                        - ON
                        - OFF
                    type: string
                    default: ON
                    description: 菜单状态
                    format: enum
                type:
                    enum:
                        - FOLDER
                        - MENU
                        - BUTTON
                    type: string
                    default: FOLDER
                    description: 菜单类型
                    format: enum
                path:
                    type: string
                    description: 路由路径
                redirect:
                    type: string
                    description: 重定向地址
                alias:
                    type: string
                    description: 路由别名
                name:
                    type: string
                    description: 路由命名，然后我们可以使用 name 而不是 path 来传递 to 属性给 <router-link>。
                component:
                    type: string
                    description: 指向的组件
                meta:
                    $ref: '#/components/schemas/RouteMeta'
                parentId:
                    type: integer
                    description: 父节点ID
                    format: int32
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/Menu'
                    description: 子节点树
                createTime:
                    type: string
                    description: 创建时间
                    format: date-time
                updateTime:
                    type: string
                    description: 更新时间
                    format: date-time
                deleteTime:
                    type: string
                    description: 删除时间
                    format: date-time
            description: 菜单
        Organization:
            type: object
            properties:
                id:
                    type: integer
                    description: 组织ID
                    format: uint32
                name:
                    type: string
                    description: 组织名称
                sortId:
                    type: integer
                    description: 排序编号
                    format: int32
                status:
                    enum:
                        - ON
                        - OFF
                    type: string
                    default: ON
                    description: 状态
                remark:
                    type: string
                    description: 备注
                parentId:
                    type: integer
                    description: 父节点ID
                    format: uint32
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/Organization'
                    description: 子节点树
                createTime:
                    type: string
                    description: 创建时间
                    format: date-time
                updateTime:
                    type: string
                    description: 更新时间
                    format: date-time
                deleteTime:
                    type: string
                    description: 删除时间
                    format: date-time
            description: 组织
        OssUploadUrlRequest:
            type: object
            properties:
                method:
                    enum:
                        - Put
                        - Post
                    type: string
                    description: 上传文件所用的HTTP方法，支持POST和PUT
                    format: enum
                contentType:
                    type: string
                    description: 文件的MIME类型
                bucketName:
                    type: string
                    description: 文件桶名称，如果不填写，将会根据文件名或者MIME类型进行自动解析
                filePath:
                    type: string
                    description: 远端的文件路径，可以不填写
                fileName:
                    type: string
                    description: 文件名，如果不填写，则会生成UUID，有同名文件也会改为UUID
            description: 获取对象存储上传链接 - 请求
        OssUploadUrlResponse:
            type: object
            properties:
                uploadUrl:
                    type: string
                    description: 文件的上传链接，默认1个小时的过期时间
                downloadUrl:
                    type: string
                    description: 文件的下载链接
                bucketName:
                    type: string
                    description: 文件桶名称
                objectName:
                    type: string
                    description: 文件名
                formData:
                    type: object
                    additionalProperties:
                        type: string
                    description: 表单数据，使用POST方法时填写
            description: 获取对象存储上传链接 - 回应
        Position:
            type: object
            properties:
                id:
                    type: integer
                    description: 职位ID
                    format: uint32
                name:
                    type: string
                    description: 职位名称
                sortId:
                    type: integer
                    description: 排序编号
                    format: int32
                code:
                    type: string
                    description: 职位值
                status:
                    enum:
                        - ON
                        - OFF
                    type: string
                    default: ON
                    description: 状态
                remark:
                    type: string
                    description: 备注
                parentId:
                    type: integer
                    description: 父节点ID
                    format: uint32
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/Position'
                    description: 子节点树
                createTime:
                    type: string
                    description: 创建时间
                    format: date-time
                updateTime:
                    type: string
                    description: 更新时间
                    format: date-time
                deleteTime:
                    type: string
                    description: 删除时间
                    format: date-time
            description: 职位
        RefreshTokenRequest:
            required:
                - refresh_token
                - grant_type
            type: object
            properties:
                refresh_token:
                    type: string
                    description: 更新令牌，用来获取下一次的访问令牌，可选项。如果访问令牌将过期，则返回刷新令牌很有用，应用程序可以使用该刷新令牌来获取另一个访问令牌。但是，通过隐式授予颁发的令牌不能颁发刷新令牌。
                grant_type:
                    type: string
                    default: refresh_token
                    description: 授权类型，此处的值固定为"refresh_token"，必选项。
                scope:
                    type: string
                    description: 以空格分隔的用户授予范围列表。如果未提供，scope则授权任何范围，默认为空列表。
                client_id:
                    type: string
                    description: 应用程序的识别ID
                client_secret:
                    type: string
                    description: 应用程序的密码
            description: 用户刷新令牌 - 请求
        Role:
            type: object
            properties:
                id:
                    type: integer
                    description: 角色ID
                    format: uint32
                name:
                    type: string
                    description: 角色名称
                sortId:
                    type: integer
                    description: 排序编号
                    format: int32
                code:
                    type: string
                    description: 角色值
                status:
                    enum:
                        - ON
                        - OFF
                    type: string
                    default: ON
                    description: 状态
                remark:
                    type: string
                    description: 备注
                menus:
                    type: array
                    items:
                        type: integer
                        format: uint32
                    description: 分配的菜单列表
                parentId:
                    type: integer
                    description: 父节点ID
                    format: uint32
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/Role'
                    description: 子节点树
                createTime:
                    type: string
                    description: 创建时间
                    format: date-time
                updateTime:
                    type: string
                    description: 更新时间
                    format: date-time
                deleteTime:
                    type: string
                    description: 删除时间
                    format: date-time
            description: 角色
        RouteItem:
            type: object
            properties:
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/RouteItem'
                    description: 子节点树
                path:
                    type: string
                    description: 路由路径
                redirect:
                    type: string
                    description: 重定向地址
                alias:
                    type: string
                    description: 路由别名
                name:
                    type: string
                    description: 路由命名，然后我们可以使用 name 而不是 path 来传递 to 属性给 <router-link>。
                component:
                    type: string
                    description: 指向的组件
                meta:
                    $ref: '#/components/schemas/RouteMeta'
            description: 路由项
        RouteMeta:
            type: object
            properties:
                activeIcon:
                    type: string
                    description: 激活图标，用于：菜单、tab
                activePath:
                    type: string
                    description: 当前激活的菜单，有时候不想激活现有菜单，需要激活父级菜单时使用
                affixTab:
                    type: boolean
                    description: 是否固定标签页
                affixTabOrder:
                    type: integer
                    description: 固定标签页的顺序
                    format: int32
                authority:
                    type: array
                    items:
                        type: string
                    description: 权限列表，需要特定的角色标识才可以访问
                badge:
                    type: string
                    description: 徽标
                badgeType:
                    enum:
                        - dot
                        - normal
                    type: string
                    description: 徽标类型
                badgeVariants:
                    enum:
                        - default
                        - destructive
                        - primary
                        - success
                        - warning
                    type: string
                    description: 徽标颜色
                hideChildrenInMenu:
                    type: boolean
                    description: 当前路由的子级在菜单中不展现
                hideInBreadcrumb:
                    type: boolean
                    description: 当前路由在面包屑中不展现
                hideInMenu:
                    type: boolean
                    description: 当前路由在菜单中不展现
                hideInTab:
                    type: boolean
                    description: 当前路由在标签页不展现
                icon:
                    type: string
                    description: 图标，用于：菜单、标签页
                iframeSrc:
                    type: string
                    description: iframe 地址
                ignoreAccess:
                    type: boolean
                    description: 忽略权限，直接可以访问
                keepAlive:
                    type: boolean
                    description: 开启KeepAlive缓存
                link:
                    type: string
                    description: 外链-跳转路径
                loaded:
                    type: boolean
                    description: 路由是否已经加载过
                maxNumOfOpenTab:
                    type: integer
                    description: 标签页最大打开数量
                    format: int32
                menuVisibleWithForbidden:
                    type: boolean
                    description: 菜单可以看到，但是访问会被重定向到403
                openInNewWindow:
                    type: boolean
                    description: 在新窗口打开
                order:
                    type: integer
                    description: 排序编号，用于路由->菜单排序
                    format: int32
                title:
                    type: string
                    description: 标题名称，路由上显示的标题
            description: 路由元数据
        UEditorResponse:
            type: object
            properties:
                imageActionName:
                    type: string
                imageFieldName:
                    type: string
                imageMaxSize:
                    type: string
                imageAllowFiles:
                    type: array
                    items:
                        type: string
                imageCompressEnable:
                    type: boolean
                imageCompressBorder:
                    type: string
                imageInsertAlign:
                    type: string
                imageUrlPrefix:
                    type: string
                imagePathFormat:
                    type: string
                scrawlActionName:
                    type: string
                scrawlFieldName:
                    type: string
                scrawlMaxSize:
                    type: string
                scrawlUrlPrefix:
                    type: string
                scrawlInsertAlign:
                    type: string
                scrawlPathFormat:
                    type: string
                snapscreenActionName:
                    type: string
                snapscreenUrlPrefix:
                    type: string
                snapscreenInsertAlign:
                    type: string
                snapscreenPathFormat:
                    type: string
                catcherActionName:
                    type: string
                catcherFieldName:
                    type: string
                catcherLocalDomain:
                    type: array
                    items:
                        type: string
                catcherUrlPrefix:
                    type: string
                catcherMaxSize:
                    type: string
                catcherAllowFiles:
                    type: array
                    items:
                        type: string
                catcherPathFormat:
                    type: string
                videoActionName:
                    type: string
                videoFieldName:
                    type: string
                videoUrlPrefix:
                    type: string
                videoMaxSize:
                    type: string
                videoAllowFiles:
                    type: array
                    items:
                        type: string
                videoPathFormat:
                    type: string
                fileActionName:
                    type: string
                fileFieldName:
                    type: string
                fileUrlPrefix:
                    type: string
                fileMaxSize:
                    type: string
                fileAllowFiles:
                    type: array
                    items:
                        type: string
                filePathFormat:
                    type: string
                imageManagerActionName:
                    type: string
                imageManagerListSize:
                    type: string
                imageManagerUrlPrefix:
                    type: string
                imageManagerInsertAlign:
                    type: string
                imageManagerAllowFiles:
                    type: array
                    items:
                        type: string
                imageManagerListPath:
                    type: string
                fileManagerActionName:
                    type: string
                fileManagerUrlPrefix:
                    type: string
                fileManagerListSize:
                    type: string
                fileManagerAllowFiles:
                    type: array
                    items:
                        type: string
                FileManagerListPath:
                    type: string
                formulaConfig:
                    $ref: '#/components/schemas/UEditorResponse_FormulaConfig'
                state:
                    type: string
                start:
                    type: integer
                    format: int32
                total:
                    type: integer
                    format: int32
                list:
                    type: array
                    items:
                        $ref: '#/components/schemas/UEditorResponse_Item'
        UEditorResponse_FormulaConfig:
            type: object
            properties:
                imageUrlTemplate:
                    type: string
        UEditorResponse_Item:
            type: object
            properties:
                url:
                    type: string
                mtime:
                    type: string
        UEditorUploadRequest:
            type: object
            properties:
                action:
                    type: string
                file:
                    $ref: '#/components/schemas/File'
        UEditorUploadResponse:
            type: object
            properties:
                state:
                    type: string
                url:
                    type: string
                title:
                    type: string
                original:
                    type: string
                type:
                    type: string
                size:
                    type: integer
                    format: int32
                list:
                    type: array
                    items:
                        $ref: '#/components/schemas/UEditorUploadResponse_Item'
        UEditorUploadResponse_Item:
            type: object
            properties:
                state:
                    type: string
                url:
                    type: string
                title:
                    type: string
                original:
                    type: string
                type:
                    type: string
                size:
                    type: integer
                    format: int32
        UpdateDepartmentRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Department'
                updateMask:
                    example: id,realName,userName
                    type: string
                    description: 要更新的字段列表
                    format: field-mask
                allowMissing:
                    type: boolean
                    description: 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
            description: 更新部门 - 请求
        UpdateDictRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Dict'
                updateMask:
                    example: id,realName,userName
                    type: string
                    description: 要更新的字段列表
                    format: field-mask
                allowMissing:
                    type: boolean
                    description: 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
            description: 更新字典 - 请求
        UpdateMenuRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Menu'
                updateMask:
                    example: id,realName,userName
                    type: string
                    description: 要更新的字段列表
                    format: field-mask
                allowMissing:
                    type: boolean
                    description: 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
            description: 更新菜单 - 请求
        UpdateOrganizationRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Organization'
                updateMask:
                    example: id,realName,userName
                    type: string
                    description: 要更新的字段列表
                    format: field-mask
                allowMissing:
                    type: boolean
                    description: 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
            description: 更新组织 - 请求
        UpdatePositionRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Position'
                updateMask:
                    example: id,realName,userName
                    type: string
                    description: 要更新的字段列表
                    format: field-mask
                allowMissing:
                    type: boolean
                    description: 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
            description: 更新职位 - 请求
        UpdateRoleRequest:
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/Role'
                updateMask:
                    example: id,realName,userName
                    type: string
                    description: 要更新的字段列表
                    format: field-mask
                allowMissing:
                    type: boolean
                    description: 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
            description: 更新角色 - 请求
        UpdateUserRequest:
            required:
                - data
            type: object
            properties:
                operatorId:
                    readOnly: true
                    type: integer
                    description: 操作用户ID
                    format: uint32
                data:
                    $ref: '#/components/schemas/User'
                password:
                    readOnly: true
                    type: string
                    description: 用户登录密码
                updateMask:
                    example: id,realName,userName
                    type: string
                    description: 要更新的字段列表
                    format: field-mask
                allowMissing:
                    type: boolean
                    description: 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
            description: 更新用户 - 请求
        UploadFileRequest:
            type: object
            properties:
                bucketName:
                    type: string
                    description: 文件桶名称
                objectName:
                    type: string
                    description: 文件名
                file:
                    type: string
                    description: 文件内容
                    format: bytes
        UploadFileResponse:
            type: object
            properties:
                url:
                    type: string
        User:
            type: object
            properties:
                id:
                    type: integer
                    description: 用户ID
                    format: uint32
                roleId:
                    type: integer
                    description: 角色ID
                    format: uint32
                workId:
                    type: integer
                    description: 工号
                    format: uint32
                orgId:
                    type: integer
                    description: 部门ID
                    format: uint32
                positionId:
                    type: integer
                    description: 岗位ID
                    format: uint32
                creatorId:
                    type: integer
                    description: 创建者ID
                    format: uint32
                userName:
                    type: string
                    description: 登录名
                nickName:
                    type: string
                    description: 昵称
                realName:
                    type: string
                    description: 真实姓名
                avatar:
                    type: string
                    description: 头像
                email:
                    type: string
                    description: 邮箱
                mobile:
                    type: string
                    description: 手机号
                telephone:
                    type: string
                    description: 座机号
                gender:
                    enum:
                        - SECRET
                        - MALE
                        - FEMALE
                    type: string
                    description: 性别
                    format: enum
                address:
                    type: string
                    description: 住址
                region:
                    type: string
                    description: 国家地区
                description:
                    type: string
                    description: 个人描述
                remark:
                    type: string
                    description: 备注名
                lastLoginTime:
                    type: string
                    description: 最后登录时间
                lastLoginIp:
                    type: string
                    description: 最后登录IP
                status:
                    enum:
                        - OFF
                        - ON
                        - ON
                        - OFF
                    type: string
                    default: ON
                    description: 用户状态
                    format: enum
                authority:
                    enum:
                        - SYS_ADMIN
                        - SYS_MANAGER
                        - CUSTOMER_USER
                        - GUEST_USER
                        - REFRESH_TOKEN
                    type: string
                    default: CUSTOMER_USER
                    description: 权限
                    format: enum
                createTime:
                    type: string
                    description: 创建时间
                    format: date-time
                updateTime:
                    type: string
                    description: 更新时间
                    format: date-time
                deleteTime:
                    type: string
                    description: 删除时间
                    format: date-time
            description: 用户
    responses:
        default:
            description: default kratos response
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/KratosStatus'
    securitySchemes:
        OAuth2PasswordBearer:
            type: oauth2
            flows:
                password:
                    tokenUrl: /admin/v1/login
                    refreshUrl: /admin/v1/refresh_token
                    scopes: {}
security:
    - OAuth2PasswordBearer: []
tags:
    - name: AdminLoginLogService
      description: 后台登录日志管理服务
    - name: AdminOperationLogService
      description: 后台操作日志管理服务
    - name: AuthenticationService
      description: 用户后台登录认证服务
    - name: DepartmentService
      description: 部门管理服务
    - name: DictService
      description: 字典管理服务
    - name: FileService
      description: 文件服务
    - name: MenuService
      description: 后台菜单管理服务
    - name: OrganizationService
      description: 组织管理服务
    - name: PositionService
      description: 职位管理服务
    - name: RoleService
      description: 角色管理服务
    - name: RouterService
      description: 网站后台动态路由服务
    - name: UEditorService
      description: UEditor后端服务
    - name: UserService
      description: 用户管理服务
