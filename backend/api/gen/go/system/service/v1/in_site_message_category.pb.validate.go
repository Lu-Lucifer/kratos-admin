// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/service/v1/in_site_message_category.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InSiteMessageCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InSiteMessageCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InSiteMessageCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InSiteMessageCategoryMultiError, or nil if none found.
func (m *InSiteMessageCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *InSiteMessageCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InSiteMessageCategoryValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InSiteMessageCategoryValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InSiteMessageCategoryValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Code != nil {
		// no validation rules for Code
	}

	if m.SortId != nil {
		// no validation rules for SortId
	}

	if m.Enable != nil {
		// no validation rules for Enable
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.CreateTime != nil {

		if all {
			switch v := interface{}(m.GetCreateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InSiteMessageCategoryValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InSiteMessageCategoryValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InSiteMessageCategoryValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdateTime != nil {

		if all {
			switch v := interface{}(m.GetUpdateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InSiteMessageCategoryValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InSiteMessageCategoryValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InSiteMessageCategoryValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeleteTime != nil {

		if all {
			switch v := interface{}(m.GetDeleteTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InSiteMessageCategoryValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InSiteMessageCategoryValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InSiteMessageCategoryValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InSiteMessageCategoryMultiError(errors)
	}

	return nil
}

// InSiteMessageCategoryMultiError is an error wrapping multiple validation
// errors returned by InSiteMessageCategory.ValidateAll() if the designated
// constraints aren't met.
type InSiteMessageCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InSiteMessageCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InSiteMessageCategoryMultiError) AllErrors() []error { return m }

// InSiteMessageCategoryValidationError is the validation error returned by
// InSiteMessageCategory.Validate if the designated constraints aren't met.
type InSiteMessageCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InSiteMessageCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InSiteMessageCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InSiteMessageCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InSiteMessageCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InSiteMessageCategoryValidationError) ErrorName() string {
	return "InSiteMessageCategoryValidationError"
}

// Error satisfies the builtin error interface
func (e InSiteMessageCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInSiteMessageCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InSiteMessageCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InSiteMessageCategoryValidationError{}

// Validate checks the field values on ListInSiteMessageCategoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListInSiteMessageCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInSiteMessageCategoryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListInSiteMessageCategoryResponseMultiError, or nil if none found.
func (m *ListInSiteMessageCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInSiteMessageCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInSiteMessageCategoryResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInSiteMessageCategoryResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInSiteMessageCategoryResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListInSiteMessageCategoryResponseMultiError(errors)
	}

	return nil
}

// ListInSiteMessageCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListInSiteMessageCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInSiteMessageCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInSiteMessageCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInSiteMessageCategoryResponseMultiError) AllErrors() []error { return m }

// ListInSiteMessageCategoryResponseValidationError is the validation error
// returned by ListInSiteMessageCategoryResponse.Validate if the designated
// constraints aren't met.
type ListInSiteMessageCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInSiteMessageCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInSiteMessageCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInSiteMessageCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInSiteMessageCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInSiteMessageCategoryResponseValidationError) ErrorName() string {
	return "ListInSiteMessageCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInSiteMessageCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInSiteMessageCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInSiteMessageCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInSiteMessageCategoryResponseValidationError{}

// Validate checks the field values on GetInSiteMessageCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInSiteMessageCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInSiteMessageCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetInSiteMessageCategoryRequestMultiError, or nil if none found.
func (m *GetInSiteMessageCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInSiteMessageCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetInSiteMessageCategoryRequestMultiError(errors)
	}

	return nil
}

// GetInSiteMessageCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by GetInSiteMessageCategoryRequest.ValidateAll()
// if the designated constraints aren't met.
type GetInSiteMessageCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInSiteMessageCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInSiteMessageCategoryRequestMultiError) AllErrors() []error { return m }

// GetInSiteMessageCategoryRequestValidationError is the validation error
// returned by GetInSiteMessageCategoryRequest.Validate if the designated
// constraints aren't met.
type GetInSiteMessageCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInSiteMessageCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInSiteMessageCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInSiteMessageCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInSiteMessageCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInSiteMessageCategoryRequestValidationError) ErrorName() string {
	return "GetInSiteMessageCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInSiteMessageCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInSiteMessageCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInSiteMessageCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInSiteMessageCategoryRequestValidationError{}

// Validate checks the field values on CreateInSiteMessageCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateInSiteMessageCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInSiteMessageCategoryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateInSiteMessageCategoryRequestMultiError, or nil if none found.
func (m *CreateInSiteMessageCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInSiteMessageCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInSiteMessageCategoryRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInSiteMessageCategoryRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInSiteMessageCategoryRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return CreateInSiteMessageCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateInSiteMessageCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateInSiteMessageCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInSiteMessageCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInSiteMessageCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInSiteMessageCategoryRequestMultiError) AllErrors() []error { return m }

// CreateInSiteMessageCategoryRequestValidationError is the validation error
// returned by CreateInSiteMessageCategoryRequest.Validate if the designated
// constraints aren't met.
type CreateInSiteMessageCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInSiteMessageCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInSiteMessageCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInSiteMessageCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInSiteMessageCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInSiteMessageCategoryRequestValidationError) ErrorName() string {
	return "CreateInSiteMessageCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInSiteMessageCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInSiteMessageCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInSiteMessageCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInSiteMessageCategoryRequestValidationError{}

// Validate checks the field values on UpdateInSiteMessageCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateInSiteMessageCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInSiteMessageCategoryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateInSiteMessageCategoryRequestMultiError, or nil if none found.
func (m *UpdateInSiteMessageCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInSiteMessageCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateInSiteMessageCategoryRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateInSiteMessageCategoryRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateInSiteMessageCategoryRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateInSiteMessageCategoryRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateInSiteMessageCategoryRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateInSiteMessageCategoryRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if m.AllowMissing != nil {
		// no validation rules for AllowMissing
	}

	if len(errors) > 0 {
		return UpdateInSiteMessageCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateInSiteMessageCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateInSiteMessageCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateInSiteMessageCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInSiteMessageCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInSiteMessageCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateInSiteMessageCategoryRequestValidationError is the validation error
// returned by UpdateInSiteMessageCategoryRequest.Validate if the designated
// constraints aren't met.
type UpdateInSiteMessageCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInSiteMessageCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInSiteMessageCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInSiteMessageCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInSiteMessageCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInSiteMessageCategoryRequestValidationError) ErrorName() string {
	return "UpdateInSiteMessageCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInSiteMessageCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInSiteMessageCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInSiteMessageCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInSiteMessageCategoryRequestValidationError{}

// Validate checks the field values on DeleteInSiteMessageCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteInSiteMessageCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInSiteMessageCategoryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteInSiteMessageCategoryRequestMultiError, or nil if none found.
func (m *DeleteInSiteMessageCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInSiteMessageCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return DeleteInSiteMessageCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteInSiteMessageCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteInSiteMessageCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInSiteMessageCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInSiteMessageCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInSiteMessageCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteInSiteMessageCategoryRequestValidationError is the validation error
// returned by DeleteInSiteMessageCategoryRequest.Validate if the designated
// constraints aren't met.
type DeleteInSiteMessageCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInSiteMessageCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInSiteMessageCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInSiteMessageCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInSiteMessageCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInSiteMessageCategoryRequestValidationError) ErrorName() string {
	return "DeleteInSiteMessageCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInSiteMessageCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInSiteMessageCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInSiteMessageCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInSiteMessageCategoryRequestValidationError{}
