// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/service/v1/in_site_message.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InSiteMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InSiteMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InSiteMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InSiteMessageMultiError, or
// nil if none found.
func (m *InSiteMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *InSiteMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if m.Content != nil {
		// no validation rules for Content
	}

	if m.CategoryId != nil {
		// no validation rules for CategoryId
	}

	if m.CategoryName != nil {
		// no validation rules for CategoryName
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.CreateTime != nil {

		if all {
			switch v := interface{}(m.GetCreateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InSiteMessageValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InSiteMessageValidationError{
						field:  "CreateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InSiteMessageValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdateTime != nil {

		if all {
			switch v := interface{}(m.GetUpdateTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InSiteMessageValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InSiteMessageValidationError{
						field:  "UpdateTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InSiteMessageValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeleteTime != nil {

		if all {
			switch v := interface{}(m.GetDeleteTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InSiteMessageValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InSiteMessageValidationError{
						field:  "DeleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InSiteMessageValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InSiteMessageMultiError(errors)
	}

	return nil
}

// InSiteMessageMultiError is an error wrapping multiple validation errors
// returned by InSiteMessage.ValidateAll() if the designated constraints
// aren't met.
type InSiteMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InSiteMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InSiteMessageMultiError) AllErrors() []error { return m }

// InSiteMessageValidationError is the validation error returned by
// InSiteMessage.Validate if the designated constraints aren't met.
type InSiteMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InSiteMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InSiteMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InSiteMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InSiteMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InSiteMessageValidationError) ErrorName() string { return "InSiteMessageValidationError" }

// Error satisfies the builtin error interface
func (e InSiteMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInSiteMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InSiteMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InSiteMessageValidationError{}

// Validate checks the field values on ListInSiteMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInSiteMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInSiteMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInSiteMessageResponseMultiError, or nil if none found.
func (m *ListInSiteMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInSiteMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInSiteMessageResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInSiteMessageResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInSiteMessageResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListInSiteMessageResponseMultiError(errors)
	}

	return nil
}

// ListInSiteMessageResponseMultiError is an error wrapping multiple validation
// errors returned by ListInSiteMessageResponse.ValidateAll() if the
// designated constraints aren't met.
type ListInSiteMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInSiteMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInSiteMessageResponseMultiError) AllErrors() []error { return m }

// ListInSiteMessageResponseValidationError is the validation error returned by
// ListInSiteMessageResponse.Validate if the designated constraints aren't met.
type ListInSiteMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInSiteMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInSiteMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInSiteMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInSiteMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInSiteMessageResponseValidationError) ErrorName() string {
	return "ListInSiteMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInSiteMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInSiteMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInSiteMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInSiteMessageResponseValidationError{}

// Validate checks the field values on GetInSiteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInSiteMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInSiteMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInSiteMessageRequestMultiError, or nil if none found.
func (m *GetInSiteMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInSiteMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetInSiteMessageRequestMultiError(errors)
	}

	return nil
}

// GetInSiteMessageRequestMultiError is an error wrapping multiple validation
// errors returned by GetInSiteMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInSiteMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInSiteMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInSiteMessageRequestMultiError) AllErrors() []error { return m }

// GetInSiteMessageRequestValidationError is the validation error returned by
// GetInSiteMessageRequest.Validate if the designated constraints aren't met.
type GetInSiteMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInSiteMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInSiteMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInSiteMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInSiteMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInSiteMessageRequestValidationError) ErrorName() string {
	return "GetInSiteMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInSiteMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInSiteMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInSiteMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInSiteMessageRequestValidationError{}

// Validate checks the field values on CreateInSiteMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInSiteMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInSiteMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInSiteMessageRequestMultiError, or nil if none found.
func (m *CreateInSiteMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInSiteMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInSiteMessageRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInSiteMessageRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInSiteMessageRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return CreateInSiteMessageRequestMultiError(errors)
	}

	return nil
}

// CreateInSiteMessageRequestMultiError is an error wrapping multiple
// validation errors returned by CreateInSiteMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateInSiteMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInSiteMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInSiteMessageRequestMultiError) AllErrors() []error { return m }

// CreateInSiteMessageRequestValidationError is the validation error returned
// by CreateInSiteMessageRequest.Validate if the designated constraints aren't met.
type CreateInSiteMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInSiteMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInSiteMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInSiteMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInSiteMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInSiteMessageRequestValidationError) ErrorName() string {
	return "CreateInSiteMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInSiteMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInSiteMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInSiteMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInSiteMessageRequestValidationError{}

// Validate checks the field values on UpdateInSiteMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInSiteMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInSiteMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInSiteMessageRequestMultiError, or nil if none found.
func (m *UpdateInSiteMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInSiteMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateInSiteMessageRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateInSiteMessageRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateInSiteMessageRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateInSiteMessageRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateInSiteMessageRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateInSiteMessageRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if m.AllowMissing != nil {
		// no validation rules for AllowMissing
	}

	if len(errors) > 0 {
		return UpdateInSiteMessageRequestMultiError(errors)
	}

	return nil
}

// UpdateInSiteMessageRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateInSiteMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateInSiteMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInSiteMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInSiteMessageRequestMultiError) AllErrors() []error { return m }

// UpdateInSiteMessageRequestValidationError is the validation error returned
// by UpdateInSiteMessageRequest.Validate if the designated constraints aren't met.
type UpdateInSiteMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInSiteMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInSiteMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInSiteMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInSiteMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInSiteMessageRequestValidationError) ErrorName() string {
	return "UpdateInSiteMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInSiteMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInSiteMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInSiteMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInSiteMessageRequestValidationError{}

// Validate checks the field values on DeleteInSiteMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInSiteMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInSiteMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInSiteMessageRequestMultiError, or nil if none found.
func (m *DeleteInSiteMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInSiteMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return DeleteInSiteMessageRequestMultiError(errors)
	}

	return nil
}

// DeleteInSiteMessageRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteInSiteMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteInSiteMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInSiteMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInSiteMessageRequestMultiError) AllErrors() []error { return m }

// DeleteInSiteMessageRequestValidationError is the validation error returned
// by DeleteInSiteMessageRequest.Validate if the designated constraints aren't met.
type DeleteInSiteMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInSiteMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInSiteMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInSiteMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInSiteMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInSiteMessageRequestValidationError) ErrorName() string {
	return "DeleteInSiteMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInSiteMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInSiteMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInSiteMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInSiteMessageRequestValidationError{}
