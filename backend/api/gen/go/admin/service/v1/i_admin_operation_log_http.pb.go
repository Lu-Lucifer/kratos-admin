// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: admin/service/v1/i_admin_operation_log.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v11 "kratos-admin/api/gen/go/system/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminOperationLogServiceCreateAdminOperationLog = "/admin.service.v1.AdminOperationLogService/CreateAdminOperationLog"
const OperationAdminOperationLogServiceDeleteAdminOperationLog = "/admin.service.v1.AdminOperationLogService/DeleteAdminOperationLog"
const OperationAdminOperationLogServiceGetAdminOperationLog = "/admin.service.v1.AdminOperationLogService/GetAdminOperationLog"
const OperationAdminOperationLogServiceListAdminOperationLog = "/admin.service.v1.AdminOperationLogService/ListAdminOperationLog"
const OperationAdminOperationLogServiceUpdateAdminOperationLog = "/admin.service.v1.AdminOperationLogService/UpdateAdminOperationLog"

type AdminOperationLogServiceHTTPServer interface {
	// CreateAdminOperationLog 创建后台操作日志
	CreateAdminOperationLog(context.Context, *v11.CreateAdminOperationLogRequest) (*emptypb.Empty, error)
	// DeleteAdminOperationLog 删除后台操作日志
	DeleteAdminOperationLog(context.Context, *v11.DeleteAdminOperationLogRequest) (*emptypb.Empty, error)
	// GetAdminOperationLog 查询后台操作日志详情
	GetAdminOperationLog(context.Context, *v11.GetAdminOperationLogRequest) (*v11.AdminOperationLog, error)
	// ListAdminOperationLog 查询后台操作日志列表
	ListAdminOperationLog(context.Context, *v1.PagingRequest) (*v11.ListAdminOperationLogResponse, error)
	// UpdateAdminOperationLog 更新后台操作日志
	UpdateAdminOperationLog(context.Context, *v11.UpdateAdminOperationLogRequest) (*emptypb.Empty, error)
}

func RegisterAdminOperationLogServiceHTTPServer(s *http.Server, srv AdminOperationLogServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/admin_operation_logs", _AdminOperationLogService_ListAdminOperationLog0_HTTP_Handler(srv))
	r.GET("/admin/v1/admin_operation_logs/{id}", _AdminOperationLogService_GetAdminOperationLog0_HTTP_Handler(srv))
	r.POST("/admin/v1/admin_operation_logs", _AdminOperationLogService_CreateAdminOperationLog0_HTTP_Handler(srv))
	r.PUT("/admin/v1/admin_operation_logs/{data.id}", _AdminOperationLogService_UpdateAdminOperationLog0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/admin_operation_logs/{id}", _AdminOperationLogService_DeleteAdminOperationLog0_HTTP_Handler(srv))
}

func _AdminOperationLogService_ListAdminOperationLog0_HTTP_Handler(srv AdminOperationLogServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminOperationLogServiceListAdminOperationLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdminOperationLog(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.ListAdminOperationLogResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminOperationLogService_GetAdminOperationLog0_HTTP_Handler(srv AdminOperationLogServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.GetAdminOperationLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminOperationLogServiceGetAdminOperationLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdminOperationLog(ctx, req.(*v11.GetAdminOperationLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.AdminOperationLog)
		return ctx.Result(200, reply)
	}
}

func _AdminOperationLogService_CreateAdminOperationLog0_HTTP_Handler(srv AdminOperationLogServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.CreateAdminOperationLogRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminOperationLogServiceCreateAdminOperationLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAdminOperationLog(ctx, req.(*v11.CreateAdminOperationLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AdminOperationLogService_UpdateAdminOperationLog0_HTTP_Handler(srv AdminOperationLogServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.UpdateAdminOperationLogRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminOperationLogServiceUpdateAdminOperationLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdminOperationLog(ctx, req.(*v11.UpdateAdminOperationLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AdminOperationLogService_DeleteAdminOperationLog0_HTTP_Handler(srv AdminOperationLogServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.DeleteAdminOperationLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminOperationLogServiceDeleteAdminOperationLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdminOperationLog(ctx, req.(*v11.DeleteAdminOperationLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AdminOperationLogServiceHTTPClient interface {
	CreateAdminOperationLog(ctx context.Context, req *v11.CreateAdminOperationLogRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteAdminOperationLog(ctx context.Context, req *v11.DeleteAdminOperationLogRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAdminOperationLog(ctx context.Context, req *v11.GetAdminOperationLogRequest, opts ...http.CallOption) (rsp *v11.AdminOperationLog, err error)
	ListAdminOperationLog(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *v11.ListAdminOperationLogResponse, err error)
	UpdateAdminOperationLog(ctx context.Context, req *v11.UpdateAdminOperationLogRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type AdminOperationLogServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminOperationLogServiceHTTPClient(client *http.Client) AdminOperationLogServiceHTTPClient {
	return &AdminOperationLogServiceHTTPClientImpl{client}
}

func (c *AdminOperationLogServiceHTTPClientImpl) CreateAdminOperationLog(ctx context.Context, in *v11.CreateAdminOperationLogRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/admin_operation_logs"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminOperationLogServiceCreateAdminOperationLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminOperationLogServiceHTTPClientImpl) DeleteAdminOperationLog(ctx context.Context, in *v11.DeleteAdminOperationLogRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/admin_operation_logs/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminOperationLogServiceDeleteAdminOperationLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminOperationLogServiceHTTPClientImpl) GetAdminOperationLog(ctx context.Context, in *v11.GetAdminOperationLogRequest, opts ...http.CallOption) (*v11.AdminOperationLog, error) {
	var out v11.AdminOperationLog
	pattern := "/admin/v1/admin_operation_logs/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminOperationLogServiceGetAdminOperationLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminOperationLogServiceHTTPClientImpl) ListAdminOperationLog(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*v11.ListAdminOperationLogResponse, error) {
	var out v11.ListAdminOperationLogResponse
	pattern := "/admin/v1/admin_operation_logs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminOperationLogServiceListAdminOperationLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminOperationLogServiceHTTPClientImpl) UpdateAdminOperationLog(ctx context.Context, in *v11.UpdateAdminOperationLogRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/admin_operation_logs/{data.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminOperationLogServiceUpdateAdminOperationLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
