// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: admin/service/v1/i_notification_message.proto

package servicev1

import (
	context "context"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v11 "kratos-admin/api/gen/go/internal_message/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationMessageService_ListNotificationMessage_FullMethodName   = "/admin.service.v1.NotificationMessageService/ListNotificationMessage"
	NotificationMessageService_GetNotificationMessage_FullMethodName    = "/admin.service.v1.NotificationMessageService/GetNotificationMessage"
	NotificationMessageService_CreateNotificationMessage_FullMethodName = "/admin.service.v1.NotificationMessageService/CreateNotificationMessage"
	NotificationMessageService_UpdateNotificationMessage_FullMethodName = "/admin.service.v1.NotificationMessageService/UpdateNotificationMessage"
	NotificationMessageService_DeleteNotificationMessage_FullMethodName = "/admin.service.v1.NotificationMessageService/DeleteNotificationMessage"
)

// NotificationMessageServiceClient is the client API for NotificationMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 通知消息管理服务
type NotificationMessageServiceClient interface {
	// 查询通知消息列表
	ListNotificationMessage(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*v11.ListNotificationMessageResponse, error)
	// 查询通知消息详情
	GetNotificationMessage(ctx context.Context, in *v11.GetNotificationMessageRequest, opts ...grpc.CallOption) (*v11.NotificationMessage, error)
	// 创建通知消息
	CreateNotificationMessage(ctx context.Context, in *v11.CreateNotificationMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新通知消息
	UpdateNotificationMessage(ctx context.Context, in *v11.UpdateNotificationMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除通知消息
	DeleteNotificationMessage(ctx context.Context, in *v11.DeleteNotificationMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type notificationMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationMessageServiceClient(cc grpc.ClientConnInterface) NotificationMessageServiceClient {
	return &notificationMessageServiceClient{cc}
}

func (c *notificationMessageServiceClient) ListNotificationMessage(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*v11.ListNotificationMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.ListNotificationMessageResponse)
	err := c.cc.Invoke(ctx, NotificationMessageService_ListNotificationMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationMessageServiceClient) GetNotificationMessage(ctx context.Context, in *v11.GetNotificationMessageRequest, opts ...grpc.CallOption) (*v11.NotificationMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.NotificationMessage)
	err := c.cc.Invoke(ctx, NotificationMessageService_GetNotificationMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationMessageServiceClient) CreateNotificationMessage(ctx context.Context, in *v11.CreateNotificationMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NotificationMessageService_CreateNotificationMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationMessageServiceClient) UpdateNotificationMessage(ctx context.Context, in *v11.UpdateNotificationMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NotificationMessageService_UpdateNotificationMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationMessageServiceClient) DeleteNotificationMessage(ctx context.Context, in *v11.DeleteNotificationMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NotificationMessageService_DeleteNotificationMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationMessageServiceServer is the server API for NotificationMessageService service.
// All implementations must embed UnimplementedNotificationMessageServiceServer
// for forward compatibility.
//
// 通知消息管理服务
type NotificationMessageServiceServer interface {
	// 查询通知消息列表
	ListNotificationMessage(context.Context, *v1.PagingRequest) (*v11.ListNotificationMessageResponse, error)
	// 查询通知消息详情
	GetNotificationMessage(context.Context, *v11.GetNotificationMessageRequest) (*v11.NotificationMessage, error)
	// 创建通知消息
	CreateNotificationMessage(context.Context, *v11.CreateNotificationMessageRequest) (*emptypb.Empty, error)
	// 更新通知消息
	UpdateNotificationMessage(context.Context, *v11.UpdateNotificationMessageRequest) (*emptypb.Empty, error)
	// 删除通知消息
	DeleteNotificationMessage(context.Context, *v11.DeleteNotificationMessageRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedNotificationMessageServiceServer()
}

// UnimplementedNotificationMessageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationMessageServiceServer struct{}

func (UnimplementedNotificationMessageServiceServer) ListNotificationMessage(context.Context, *v1.PagingRequest) (*v11.ListNotificationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotificationMessage not implemented")
}
func (UnimplementedNotificationMessageServiceServer) GetNotificationMessage(context.Context, *v11.GetNotificationMessageRequest) (*v11.NotificationMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationMessage not implemented")
}
func (UnimplementedNotificationMessageServiceServer) CreateNotificationMessage(context.Context, *v11.CreateNotificationMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationMessage not implemented")
}
func (UnimplementedNotificationMessageServiceServer) UpdateNotificationMessage(context.Context, *v11.UpdateNotificationMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationMessage not implemented")
}
func (UnimplementedNotificationMessageServiceServer) DeleteNotificationMessage(context.Context, *v11.DeleteNotificationMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationMessage not implemented")
}
func (UnimplementedNotificationMessageServiceServer) mustEmbedUnimplementedNotificationMessageServiceServer() {
}
func (UnimplementedNotificationMessageServiceServer) testEmbeddedByValue() {}

// UnsafeNotificationMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationMessageServiceServer will
// result in compilation errors.
type UnsafeNotificationMessageServiceServer interface {
	mustEmbedUnimplementedNotificationMessageServiceServer()
}

func RegisterNotificationMessageServiceServer(s grpc.ServiceRegistrar, srv NotificationMessageServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationMessageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationMessageService_ServiceDesc, srv)
}

func _NotificationMessageService_ListNotificationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationMessageServiceServer).ListNotificationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationMessageService_ListNotificationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationMessageServiceServer).ListNotificationMessage(ctx, req.(*v1.PagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationMessageService_GetNotificationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.GetNotificationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationMessageServiceServer).GetNotificationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationMessageService_GetNotificationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationMessageServiceServer).GetNotificationMessage(ctx, req.(*v11.GetNotificationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationMessageService_CreateNotificationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.CreateNotificationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationMessageServiceServer).CreateNotificationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationMessageService_CreateNotificationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationMessageServiceServer).CreateNotificationMessage(ctx, req.(*v11.CreateNotificationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationMessageService_UpdateNotificationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.UpdateNotificationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationMessageServiceServer).UpdateNotificationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationMessageService_UpdateNotificationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationMessageServiceServer).UpdateNotificationMessage(ctx, req.(*v11.UpdateNotificationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationMessageService_DeleteNotificationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.DeleteNotificationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationMessageServiceServer).DeleteNotificationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationMessageService_DeleteNotificationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationMessageServiceServer).DeleteNotificationMessage(ctx, req.(*v11.DeleteNotificationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationMessageService_ServiceDesc is the grpc.ServiceDesc for NotificationMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.service.v1.NotificationMessageService",
	HandlerType: (*NotificationMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNotificationMessage",
			Handler:    _NotificationMessageService_ListNotificationMessage_Handler,
		},
		{
			MethodName: "GetNotificationMessage",
			Handler:    _NotificationMessageService_GetNotificationMessage_Handler,
		},
		{
			MethodName: "CreateNotificationMessage",
			Handler:    _NotificationMessageService_CreateNotificationMessage_Handler,
		},
		{
			MethodName: "UpdateNotificationMessage",
			Handler:    _NotificationMessageService_UpdateNotificationMessage_Handler,
		},
		{
			MethodName: "DeleteNotificationMessage",
			Handler:    _NotificationMessageService_DeleteNotificationMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/service/v1/i_notification_message.proto",
}
