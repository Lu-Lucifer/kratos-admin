// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: admin/service/v1/i_admin_login_restriction.proto

package servicev1

import (
	_ "github.com/google/gnostic/openapiv3"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 后台登录限制类型
type AdminLoginRestrictionType int32

const (
	AdminLoginRestrictionType_LOGIN_RESTRICTION_TYPE_UNSPECIFIED AdminLoginRestrictionType = 0 // 未知
	AdminLoginRestrictionType_BLACKLIST                          AdminLoginRestrictionType = 1 // 黑名单
	AdminLoginRestrictionType_WHITELIST                          AdminLoginRestrictionType = 2 // 白名单
)

// Enum value maps for AdminLoginRestrictionType.
var (
	AdminLoginRestrictionType_name = map[int32]string{
		0: "LOGIN_RESTRICTION_TYPE_UNSPECIFIED",
		1: "BLACKLIST",
		2: "WHITELIST",
	}
	AdminLoginRestrictionType_value = map[string]int32{
		"LOGIN_RESTRICTION_TYPE_UNSPECIFIED": 0,
		"BLACKLIST":                          1,
		"WHITELIST":                          2,
	}
)

func (x AdminLoginRestrictionType) Enum() *AdminLoginRestrictionType {
	p := new(AdminLoginRestrictionType)
	*p = x
	return p
}

func (x AdminLoginRestrictionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminLoginRestrictionType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_service_v1_i_admin_login_restriction_proto_enumTypes[0].Descriptor()
}

func (AdminLoginRestrictionType) Type() protoreflect.EnumType {
	return &file_admin_service_v1_i_admin_login_restriction_proto_enumTypes[0]
}

func (x AdminLoginRestrictionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminLoginRestrictionType.Descriptor instead.
func (AdminLoginRestrictionType) EnumDescriptor() ([]byte, []int) {
	return file_admin_service_v1_i_admin_login_restriction_proto_rawDescGZIP(), []int{0}
}

// 后台登录限制方式
type AdminLoginRestrictionMethod int32

const (
	AdminLoginRestrictionMethod_LOGIN_RESTRICTION_METHOD_UNSPECIFIED AdminLoginRestrictionMethod = 0 // 未知
	AdminLoginRestrictionMethod_IP                                   AdminLoginRestrictionMethod = 1 // IP地址限制
	AdminLoginRestrictionMethod_MAC                                  AdminLoginRestrictionMethod = 2 // MAC地址限制，绑定设备的MAC地址。
	AdminLoginRestrictionMethod_REGION                               AdminLoginRestrictionMethod = 3 // 地区限制，根据地理位置（如国家、城市）限制登录。
	AdminLoginRestrictionMethod_TIME                                 AdminLoginRestrictionMethod = 4 // 时间限制，限制登录的时间段，例如只允许工作时间登录。
	AdminLoginRestrictionMethod_DEVICE                               AdminLoginRestrictionMethod = 5 // 设备限制，限制登录设备的类型（如PC、手机）或特定设备ID。
)

// Enum value maps for AdminLoginRestrictionMethod.
var (
	AdminLoginRestrictionMethod_name = map[int32]string{
		0: "LOGIN_RESTRICTION_METHOD_UNSPECIFIED",
		1: "IP",
		2: "MAC",
		3: "REGION",
		4: "TIME",
		5: "DEVICE",
	}
	AdminLoginRestrictionMethod_value = map[string]int32{
		"LOGIN_RESTRICTION_METHOD_UNSPECIFIED": 0,
		"IP":                                   1,
		"MAC":                                  2,
		"REGION":                               3,
		"TIME":                                 4,
		"DEVICE":                               5,
	}
)

func (x AdminLoginRestrictionMethod) Enum() *AdminLoginRestrictionMethod {
	p := new(AdminLoginRestrictionMethod)
	*p = x
	return p
}

func (x AdminLoginRestrictionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminLoginRestrictionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_service_v1_i_admin_login_restriction_proto_enumTypes[1].Descriptor()
}

func (AdminLoginRestrictionMethod) Type() protoreflect.EnumType {
	return &file_admin_service_v1_i_admin_login_restriction_proto_enumTypes[1]
}

func (x AdminLoginRestrictionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminLoginRestrictionMethod.Descriptor instead.
func (AdminLoginRestrictionMethod) EnumDescriptor() ([]byte, []int) {
	return file_admin_service_v1_i_admin_login_restriction_proto_rawDescGZIP(), []int{1}
}

// 后台登录限制
type AdminLoginRestriction struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Id            *uint32                      `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`                                                           // 后台登录限制ID
	AdminId       *uint32                      `protobuf:"varint,2,opt,name=admin_id,json=adminId,proto3,oneof" json:"admin_id,omitempty"`                                  // 管理员ID
	Type          *AdminLoginRestrictionType   `protobuf:"varint,3,opt,name=type,proto3,enum=admin.service.v1.AdminLoginRestrictionType,oneof" json:"type,omitempty"`       // 限制类型
	Method        *AdminLoginRestrictionMethod `protobuf:"varint,4,opt,name=method,proto3,enum=admin.service.v1.AdminLoginRestrictionMethod,oneof" json:"method,omitempty"` // 限制方式
	Value         *string                      `protobuf:"bytes,5,opt,name=value,proto3,oneof" json:"value,omitempty"`                                                      // 限制值（如IP地址、MAC地址或地区代码）
	Reason        *string                      `protobuf:"bytes,6,opt,name=reason,proto3,oneof" json:"reason,omitempty"`                                                    // 限制原因
	CreateBy      *uint32                      `protobuf:"varint,100,opt,name=create_by,json=createBy,proto3,oneof" json:"create_by,omitempty"`                             // 创建者ID
	UpdateBy      *uint32                      `protobuf:"varint,101,opt,name=update_by,json=updateBy,proto3,oneof" json:"update_by,omitempty"`                             // 更新者ID
	CreateTime    *string                      `protobuf:"bytes,200,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`                        // 创建时间
	UpdateTime    *string                      `protobuf:"bytes,201,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`                        // 更新时间
	DeleteTime    *string                      `protobuf:"bytes,202,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`                        // 删除时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminLoginRestriction) Reset() {
	*x = AdminLoginRestriction{}
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminLoginRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminLoginRestriction) ProtoMessage() {}

func (x *AdminLoginRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminLoginRestriction.ProtoReflect.Descriptor instead.
func (*AdminLoginRestriction) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_admin_login_restriction_proto_rawDescGZIP(), []int{0}
}

func (x *AdminLoginRestriction) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AdminLoginRestriction) GetAdminId() uint32 {
	if x != nil && x.AdminId != nil {
		return *x.AdminId
	}
	return 0
}

func (x *AdminLoginRestriction) GetType() AdminLoginRestrictionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AdminLoginRestrictionType_LOGIN_RESTRICTION_TYPE_UNSPECIFIED
}

func (x *AdminLoginRestriction) GetMethod() AdminLoginRestrictionMethod {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return AdminLoginRestrictionMethod_LOGIN_RESTRICTION_METHOD_UNSPECIFIED
}

func (x *AdminLoginRestriction) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *AdminLoginRestriction) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *AdminLoginRestriction) GetCreateBy() uint32 {
	if x != nil && x.CreateBy != nil {
		return *x.CreateBy
	}
	return 0
}

func (x *AdminLoginRestriction) GetUpdateBy() uint32 {
	if x != nil && x.UpdateBy != nil {
		return *x.UpdateBy
	}
	return 0
}

func (x *AdminLoginRestriction) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *AdminLoginRestriction) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *AdminLoginRestriction) GetDeleteTime() string {
	if x != nil && x.DeleteTime != nil {
		return *x.DeleteTime
	}
	return ""
}

// 查询后台登录限制列表 - 回应
type ListAdminLoginRestrictionResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Items         []*AdminLoginRestriction `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Total         uint32                   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAdminLoginRestrictionResponse) Reset() {
	*x = ListAdminLoginRestrictionResponse{}
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdminLoginRestrictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdminLoginRestrictionResponse) ProtoMessage() {}

func (x *ListAdminLoginRestrictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdminLoginRestrictionResponse.ProtoReflect.Descriptor instead.
func (*ListAdminLoginRestrictionResponse) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_admin_login_restriction_proto_rawDescGZIP(), []int{1}
}

func (x *ListAdminLoginRestrictionResponse) GetItems() []*AdminLoginRestriction {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListAdminLoginRestrictionResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 查询后台登录限制详情 - 请求
type GetAdminLoginRestrictionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAdminLoginRestrictionRequest) Reset() {
	*x = GetAdminLoginRestrictionRequest{}
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminLoginRestrictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminLoginRestrictionRequest) ProtoMessage() {}

func (x *GetAdminLoginRestrictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminLoginRestrictionRequest.ProtoReflect.Descriptor instead.
func (*GetAdminLoginRestrictionRequest) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_admin_login_restriction_proto_rawDescGZIP(), []int{2}
}

func (x *GetAdminLoginRestrictionRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 创建后台登录限制 - 请求
type CreateAdminLoginRestrictionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *AdminLoginRestriction `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAdminLoginRestrictionRequest) Reset() {
	*x = CreateAdminLoginRestrictionRequest{}
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdminLoginRestrictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdminLoginRestrictionRequest) ProtoMessage() {}

func (x *CreateAdminLoginRestrictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdminLoginRestrictionRequest.ProtoReflect.Descriptor instead.
func (*CreateAdminLoginRestrictionRequest) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_admin_login_restriction_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAdminLoginRestrictionRequest) GetData() *AdminLoginRestriction {
	if x != nil {
		return x.Data
	}
	return nil
}

// 更新后台登录限制 - 请求
type UpdateAdminLoginRestrictionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *AdminLoginRestriction `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`              // 要更新的字段列表
	AllowMissing  *bool                  `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3,oneof" json:"allow_missing,omitempty"` // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAdminLoginRestrictionRequest) Reset() {
	*x = UpdateAdminLoginRestrictionRequest{}
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdminLoginRestrictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdminLoginRestrictionRequest) ProtoMessage() {}

func (x *UpdateAdminLoginRestrictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdminLoginRestrictionRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdminLoginRestrictionRequest) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_admin_login_restriction_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateAdminLoginRestrictionRequest) GetData() *AdminLoginRestriction {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateAdminLoginRestrictionRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateAdminLoginRestrictionRequest) GetAllowMissing() bool {
	if x != nil && x.AllowMissing != nil {
		return *x.AllowMissing
	}
	return false
}

// 删除后台登录限制 - 请求
type DeleteAdminLoginRestrictionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAdminLoginRestrictionRequest) Reset() {
	*x = DeleteAdminLoginRestrictionRequest{}
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAdminLoginRestrictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminLoginRestrictionRequest) ProtoMessage() {}

func (x *DeleteAdminLoginRestrictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminLoginRestrictionRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdminLoginRestrictionRequest) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_admin_login_restriction_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteAdminLoginRestrictionRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_admin_service_v1_i_admin_login_restriction_proto protoreflect.FileDescriptor

var file_admin_service_v1_i_admin_login_restriction_proto_rawDesc = string([]byte{
	0x0a, 0x30, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x06, 0x0a, 0x15, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1d, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x17, 0x92, 0x02, 0x14, 0xe5, 0x90, 0x8e, 0xe5, 0x8f, 0xb0,
	0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x49, 0x44, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xba, 0x47, 0x0e, 0x92, 0x02,
	0x0b, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0x49, 0x44, 0x48, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe9, 0x99, 0x90,
	0xe5, 0x88, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0x48, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3b, 0xba, 0x47, 0x38, 0x92, 0x02, 0x35, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x88, 0xe5, 0xa6, 0x82, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0xe3, 0x80, 0x81, 0x4d, 0x41, 0x43, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0x88,
	0x96, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x89,
	0x48, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47,
	0x0f, 0x92, 0x02, 0x0c, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0,
	0x48, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x11, 0xba, 0x47, 0x0e, 0x92, 0x02, 0x0b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80,
	0x85, 0x49, 0x44, 0x48, 0x06, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xba, 0x47, 0x0e, 0x92, 0x02, 0x0b, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x49, 0x44, 0x48, 0x07, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba,
	0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x48, 0x08, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x48, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x48, 0x0a, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x78, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x31, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61,
	0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x9f, 0x03, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x73, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x36, 0xba, 0x47, 0x33, 0x3a, 0x16, 0x12, 0x14, 0x69,
	0x64, 0x2c, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x92, 0x02, 0x18, 0xe8, 0xa6, 0x81, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7,
	0x9a, 0x84, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0xb4, 0x01, 0x0a, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x89, 0x01, 0xba, 0x47, 0x85, 0x01, 0x92, 0x02, 0x81, 0x01, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65,
	0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xef, 0xbc, 0x8c, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe4, 0xb8, 0x8d, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe5, 0x88, 0x99, 0xe4, 0xbc,
	0x9a, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0x28, 0xe6, 0x8f, 0x92, 0xe5, 0x85, 0xa5, 0x29, 0xef,
	0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x94, 0xe5, 0x9c, 0xa8, 0xe8, 0xbf, 0x99, 0xe7, 0xa7,
	0x8d, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0xe4, 0xb8, 0x8b, 0x60, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x60, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe5, 0xb0, 0x86, 0xe4,
	0xbc, 0x9a, 0xe8, 0xa2, 0xab, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe3, 0x80, 0x82, 0x48, 0x00,
	0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x22, 0x34, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x61, 0x0a, 0x19, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x7a, 0x0a, 0x1b,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x24, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x41, 0x43, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x32, 0xbc, 0x05, 0x0a, 0x1c, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x1a, 0x26, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2d, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x69, 0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x34,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0xc9, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x42, 0x1b, 0x49, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x32, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x53, 0x58, 0xaa, 0x02, 0x10, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_admin_service_v1_i_admin_login_restriction_proto_rawDescOnce sync.Once
	file_admin_service_v1_i_admin_login_restriction_proto_rawDescData []byte
)

func file_admin_service_v1_i_admin_login_restriction_proto_rawDescGZIP() []byte {
	file_admin_service_v1_i_admin_login_restriction_proto_rawDescOnce.Do(func() {
		file_admin_service_v1_i_admin_login_restriction_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_admin_service_v1_i_admin_login_restriction_proto_rawDesc), len(file_admin_service_v1_i_admin_login_restriction_proto_rawDesc)))
	})
	return file_admin_service_v1_i_admin_login_restriction_proto_rawDescData
}

var file_admin_service_v1_i_admin_login_restriction_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_admin_service_v1_i_admin_login_restriction_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_admin_service_v1_i_admin_login_restriction_proto_goTypes = []any{
	(AdminLoginRestrictionType)(0),             // 0: admin.service.v1.AdminLoginRestrictionType
	(AdminLoginRestrictionMethod)(0),           // 1: admin.service.v1.AdminLoginRestrictionMethod
	(*AdminLoginRestriction)(nil),              // 2: admin.service.v1.AdminLoginRestriction
	(*ListAdminLoginRestrictionResponse)(nil),  // 3: admin.service.v1.ListAdminLoginRestrictionResponse
	(*GetAdminLoginRestrictionRequest)(nil),    // 4: admin.service.v1.GetAdminLoginRestrictionRequest
	(*CreateAdminLoginRestrictionRequest)(nil), // 5: admin.service.v1.CreateAdminLoginRestrictionRequest
	(*UpdateAdminLoginRestrictionRequest)(nil), // 6: admin.service.v1.UpdateAdminLoginRestrictionRequest
	(*DeleteAdminLoginRestrictionRequest)(nil), // 7: admin.service.v1.DeleteAdminLoginRestrictionRequest
	(*fieldmaskpb.FieldMask)(nil),              // 8: google.protobuf.FieldMask
	(*v1.PagingRequest)(nil),                   // 9: pagination.PagingRequest
	(*emptypb.Empty)(nil),                      // 10: google.protobuf.Empty
}
var file_admin_service_v1_i_admin_login_restriction_proto_depIdxs = []int32{
	0,  // 0: admin.service.v1.AdminLoginRestriction.type:type_name -> admin.service.v1.AdminLoginRestrictionType
	1,  // 1: admin.service.v1.AdminLoginRestriction.method:type_name -> admin.service.v1.AdminLoginRestrictionMethod
	2,  // 2: admin.service.v1.ListAdminLoginRestrictionResponse.items:type_name -> admin.service.v1.AdminLoginRestriction
	2,  // 3: admin.service.v1.CreateAdminLoginRestrictionRequest.data:type_name -> admin.service.v1.AdminLoginRestriction
	2,  // 4: admin.service.v1.UpdateAdminLoginRestrictionRequest.data:type_name -> admin.service.v1.AdminLoginRestriction
	8,  // 5: admin.service.v1.UpdateAdminLoginRestrictionRequest.update_mask:type_name -> google.protobuf.FieldMask
	9,  // 6: admin.service.v1.AdminLoginRestrictionService.List:input_type -> pagination.PagingRequest
	4,  // 7: admin.service.v1.AdminLoginRestrictionService.Get:input_type -> admin.service.v1.GetAdminLoginRestrictionRequest
	5,  // 8: admin.service.v1.AdminLoginRestrictionService.Create:input_type -> admin.service.v1.CreateAdminLoginRestrictionRequest
	6,  // 9: admin.service.v1.AdminLoginRestrictionService.Update:input_type -> admin.service.v1.UpdateAdminLoginRestrictionRequest
	7,  // 10: admin.service.v1.AdminLoginRestrictionService.Delete:input_type -> admin.service.v1.DeleteAdminLoginRestrictionRequest
	3,  // 11: admin.service.v1.AdminLoginRestrictionService.List:output_type -> admin.service.v1.ListAdminLoginRestrictionResponse
	2,  // 12: admin.service.v1.AdminLoginRestrictionService.Get:output_type -> admin.service.v1.AdminLoginRestriction
	10, // 13: admin.service.v1.AdminLoginRestrictionService.Create:output_type -> google.protobuf.Empty
	10, // 14: admin.service.v1.AdminLoginRestrictionService.Update:output_type -> google.protobuf.Empty
	10, // 15: admin.service.v1.AdminLoginRestrictionService.Delete:output_type -> google.protobuf.Empty
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_admin_service_v1_i_admin_login_restriction_proto_init() }
func file_admin_service_v1_i_admin_login_restriction_proto_init() {
	if File_admin_service_v1_i_admin_login_restriction_proto != nil {
		return
	}
	file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[0].OneofWrappers = []any{}
	file_admin_service_v1_i_admin_login_restriction_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_admin_service_v1_i_admin_login_restriction_proto_rawDesc), len(file_admin_service_v1_i_admin_login_restriction_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_service_v1_i_admin_login_restriction_proto_goTypes,
		DependencyIndexes: file_admin_service_v1_i_admin_login_restriction_proto_depIdxs,
		EnumInfos:         file_admin_service_v1_i_admin_login_restriction_proto_enumTypes,
		MessageInfos:      file_admin_service_v1_i_admin_login_restriction_proto_msgTypes,
	}.Build()
	File_admin_service_v1_i_admin_login_restriction_proto = out.File
	file_admin_service_v1_i_admin_login_restriction_proto_goTypes = nil
	file_admin_service_v1_i_admin_login_restriction_proto_depIdxs = nil
}
