// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: admin/service/v1/i_private_message.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v11 "kratos-admin/api/gen/go/internal_message/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPrivateMessageServiceCreatePrivateMessage = "/admin.service.v1.PrivateMessageService/CreatePrivateMessage"
const OperationPrivateMessageServiceDeletePrivateMessage = "/admin.service.v1.PrivateMessageService/DeletePrivateMessage"
const OperationPrivateMessageServiceGetPrivateMessage = "/admin.service.v1.PrivateMessageService/GetPrivateMessage"
const OperationPrivateMessageServiceListPrivateMessage = "/admin.service.v1.PrivateMessageService/ListPrivateMessage"
const OperationPrivateMessageServiceUpdatePrivateMessage = "/admin.service.v1.PrivateMessageService/UpdatePrivateMessage"

type PrivateMessageServiceHTTPServer interface {
	// CreatePrivateMessage 创建私信消息
	CreatePrivateMessage(context.Context, *v11.CreatePrivateMessageRequest) (*emptypb.Empty, error)
	// DeletePrivateMessage 删除私信消息
	DeletePrivateMessage(context.Context, *v11.DeletePrivateMessageRequest) (*emptypb.Empty, error)
	// GetPrivateMessage 查询私信消息详情
	GetPrivateMessage(context.Context, *v11.GetPrivateMessageRequest) (*v11.PrivateMessage, error)
	// ListPrivateMessage 查询私信消息列表
	ListPrivateMessage(context.Context, *v1.PagingRequest) (*v11.ListPrivateMessageResponse, error)
	// UpdatePrivateMessage 更新私信消息
	UpdatePrivateMessage(context.Context, *v11.UpdatePrivateMessageRequest) (*emptypb.Empty, error)
}

func RegisterPrivateMessageServiceHTTPServer(s *http.Server, srv PrivateMessageServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/private_messages", _PrivateMessageService_ListPrivateMessage0_HTTP_Handler(srv))
	r.GET("/admin/v1/private_messages/{id}", _PrivateMessageService_GetPrivateMessage0_HTTP_Handler(srv))
	r.POST("/admin/v1/private_messages", _PrivateMessageService_CreatePrivateMessage0_HTTP_Handler(srv))
	r.PUT("/admin/v1/private_messages/{data.id}", _PrivateMessageService_UpdatePrivateMessage0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/private_messages/{id}", _PrivateMessageService_DeletePrivateMessage0_HTTP_Handler(srv))
}

func _PrivateMessageService_ListPrivateMessage0_HTTP_Handler(srv PrivateMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrivateMessageServiceListPrivateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPrivateMessage(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.ListPrivateMessageResponse)
		return ctx.Result(200, reply)
	}
}

func _PrivateMessageService_GetPrivateMessage0_HTTP_Handler(srv PrivateMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.GetPrivateMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrivateMessageServiceGetPrivateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPrivateMessage(ctx, req.(*v11.GetPrivateMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.PrivateMessage)
		return ctx.Result(200, reply)
	}
}

func _PrivateMessageService_CreatePrivateMessage0_HTTP_Handler(srv PrivateMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.CreatePrivateMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrivateMessageServiceCreatePrivateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePrivateMessage(ctx, req.(*v11.CreatePrivateMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PrivateMessageService_UpdatePrivateMessage0_HTTP_Handler(srv PrivateMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.UpdatePrivateMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrivateMessageServiceUpdatePrivateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePrivateMessage(ctx, req.(*v11.UpdatePrivateMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PrivateMessageService_DeletePrivateMessage0_HTTP_Handler(srv PrivateMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.DeletePrivateMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrivateMessageServiceDeletePrivateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePrivateMessage(ctx, req.(*v11.DeletePrivateMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type PrivateMessageServiceHTTPClient interface {
	CreatePrivateMessage(ctx context.Context, req *v11.CreatePrivateMessageRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeletePrivateMessage(ctx context.Context, req *v11.DeletePrivateMessageRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetPrivateMessage(ctx context.Context, req *v11.GetPrivateMessageRequest, opts ...http.CallOption) (rsp *v11.PrivateMessage, err error)
	ListPrivateMessage(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *v11.ListPrivateMessageResponse, err error)
	UpdatePrivateMessage(ctx context.Context, req *v11.UpdatePrivateMessageRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type PrivateMessageServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPrivateMessageServiceHTTPClient(client *http.Client) PrivateMessageServiceHTTPClient {
	return &PrivateMessageServiceHTTPClientImpl{client}
}

func (c *PrivateMessageServiceHTTPClientImpl) CreatePrivateMessage(ctx context.Context, in *v11.CreatePrivateMessageRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/private_messages"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPrivateMessageServiceCreatePrivateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrivateMessageServiceHTTPClientImpl) DeletePrivateMessage(ctx context.Context, in *v11.DeletePrivateMessageRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/private_messages/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrivateMessageServiceDeletePrivateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrivateMessageServiceHTTPClientImpl) GetPrivateMessage(ctx context.Context, in *v11.GetPrivateMessageRequest, opts ...http.CallOption) (*v11.PrivateMessage, error) {
	var out v11.PrivateMessage
	pattern := "/admin/v1/private_messages/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrivateMessageServiceGetPrivateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrivateMessageServiceHTTPClientImpl) ListPrivateMessage(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*v11.ListPrivateMessageResponse, error) {
	var out v11.ListPrivateMessageResponse
	pattern := "/admin/v1/private_messages"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrivateMessageServiceListPrivateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrivateMessageServiceHTTPClientImpl) UpdatePrivateMessage(ctx context.Context, in *v11.UpdatePrivateMessageRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/private_messages/{data.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPrivateMessageServiceUpdatePrivateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
