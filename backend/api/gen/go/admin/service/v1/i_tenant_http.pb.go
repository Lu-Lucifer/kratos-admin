// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: admin/service/v1/i_tenant.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v11 "kratos-admin/api/gen/go/user/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTenantServiceCreateTenant = "/admin.service.v1.TenantService/CreateTenant"
const OperationTenantServiceDeleteTenant = "/admin.service.v1.TenantService/DeleteTenant"
const OperationTenantServiceGetTenant = "/admin.service.v1.TenantService/GetTenant"
const OperationTenantServiceListTenant = "/admin.service.v1.TenantService/ListTenant"
const OperationTenantServiceUpdateTenant = "/admin.service.v1.TenantService/UpdateTenant"

type TenantServiceHTTPServer interface {
	// CreateTenant 创建租户
	CreateTenant(context.Context, *v11.CreateTenantRequest) (*emptypb.Empty, error)
	// DeleteTenant 删除租户
	DeleteTenant(context.Context, *v11.DeleteTenantRequest) (*emptypb.Empty, error)
	// GetTenant 获取租户数据
	GetTenant(context.Context, *v11.GetTenantRequest) (*v11.Tenant, error)
	// ListTenant 获取租户列表
	ListTenant(context.Context, *v1.PagingRequest) (*v11.ListTenantResponse, error)
	// UpdateTenant 更新租户
	UpdateTenant(context.Context, *v11.UpdateTenantRequest) (*emptypb.Empty, error)
}

func RegisterTenantServiceHTTPServer(s *http.Server, srv TenantServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/tenants", _TenantService_ListTenant0_HTTP_Handler(srv))
	r.GET("/admin/v1/tenants/{id}", _TenantService_GetTenant0_HTTP_Handler(srv))
	r.POST("/admin/v1/tenants", _TenantService_CreateTenant0_HTTP_Handler(srv))
	r.PUT("/admin/v1/tenants/{data.id}", _TenantService_UpdateTenant0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/tenants/{id}", _TenantService_DeleteTenant0_HTTP_Handler(srv))
}

func _TenantService_ListTenant0_HTTP_Handler(srv TenantServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantServiceListTenant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTenant(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.ListTenantResponse)
		return ctx.Result(200, reply)
	}
}

func _TenantService_GetTenant0_HTTP_Handler(srv TenantServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.GetTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantServiceGetTenant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTenant(ctx, req.(*v11.GetTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.Tenant)
		return ctx.Result(200, reply)
	}
}

func _TenantService_CreateTenant0_HTTP_Handler(srv TenantServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.CreateTenantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantServiceCreateTenant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTenant(ctx, req.(*v11.CreateTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _TenantService_UpdateTenant0_HTTP_Handler(srv TenantServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.UpdateTenantRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantServiceUpdateTenant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTenant(ctx, req.(*v11.UpdateTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _TenantService_DeleteTenant0_HTTP_Handler(srv TenantServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.DeleteTenantRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTenantServiceDeleteTenant)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTenant(ctx, req.(*v11.DeleteTenantRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type TenantServiceHTTPClient interface {
	CreateTenant(ctx context.Context, req *v11.CreateTenantRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteTenant(ctx context.Context, req *v11.DeleteTenantRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetTenant(ctx context.Context, req *v11.GetTenantRequest, opts ...http.CallOption) (rsp *v11.Tenant, err error)
	ListTenant(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *v11.ListTenantResponse, err error)
	UpdateTenant(ctx context.Context, req *v11.UpdateTenantRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type TenantServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTenantServiceHTTPClient(client *http.Client) TenantServiceHTTPClient {
	return &TenantServiceHTTPClientImpl{client}
}

func (c *TenantServiceHTTPClientImpl) CreateTenant(ctx context.Context, in *v11.CreateTenantRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/tenants"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTenantServiceCreateTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TenantServiceHTTPClientImpl) DeleteTenant(ctx context.Context, in *v11.DeleteTenantRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/tenants/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTenantServiceDeleteTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TenantServiceHTTPClientImpl) GetTenant(ctx context.Context, in *v11.GetTenantRequest, opts ...http.CallOption) (*v11.Tenant, error) {
	var out v11.Tenant
	pattern := "/admin/v1/tenants/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTenantServiceGetTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TenantServiceHTTPClientImpl) ListTenant(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*v11.ListTenantResponse, error) {
	var out v11.ListTenantResponse
	pattern := "/admin/v1/tenants"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTenantServiceListTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TenantServiceHTTPClientImpl) UpdateTenant(ctx context.Context, in *v11.UpdateTenantRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/tenants/{data.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTenantServiceUpdateTenant))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
