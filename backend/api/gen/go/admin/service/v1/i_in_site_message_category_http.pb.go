// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: admin/service/v1/i_in_site_message_category.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v11 "kratos-admin/api/gen/go/system/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInSiteMessageCategoryServiceCreateInSiteMessageCategory = "/admin.service.v1.InSiteMessageCategoryService/CreateInSiteMessageCategory"
const OperationInSiteMessageCategoryServiceDeleteInSiteMessageCategory = "/admin.service.v1.InSiteMessageCategoryService/DeleteInSiteMessageCategory"
const OperationInSiteMessageCategoryServiceGetInSiteMessageCategory = "/admin.service.v1.InSiteMessageCategoryService/GetInSiteMessageCategory"
const OperationInSiteMessageCategoryServiceListInSiteMessageCategory = "/admin.service.v1.InSiteMessageCategoryService/ListInSiteMessageCategory"
const OperationInSiteMessageCategoryServiceUpdateInSiteMessageCategory = "/admin.service.v1.InSiteMessageCategoryService/UpdateInSiteMessageCategory"

type InSiteMessageCategoryServiceHTTPServer interface {
	// CreateInSiteMessageCategory 创建站内信分类
	CreateInSiteMessageCategory(context.Context, *v11.CreateInSiteMessageCategoryRequest) (*emptypb.Empty, error)
	// DeleteInSiteMessageCategory 删除站内信分类
	DeleteInSiteMessageCategory(context.Context, *v11.DeleteInSiteMessageCategoryRequest) (*emptypb.Empty, error)
	// GetInSiteMessageCategory 查询站内信分类详情
	GetInSiteMessageCategory(context.Context, *v11.GetInSiteMessageCategoryRequest) (*v11.InSiteMessageCategory, error)
	// ListInSiteMessageCategory 查询站内信分类列表
	ListInSiteMessageCategory(context.Context, *v1.PagingRequest) (*v11.ListInSiteMessageCategoryResponse, error)
	// UpdateInSiteMessageCategory 更新站内信分类
	UpdateInSiteMessageCategory(context.Context, *v11.UpdateInSiteMessageCategoryRequest) (*emptypb.Empty, error)
}

func RegisterInSiteMessageCategoryServiceHTTPServer(s *http.Server, srv InSiteMessageCategoryServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/msg:categories", _InSiteMessageCategoryService_ListInSiteMessageCategory0_HTTP_Handler(srv))
	r.GET("/admin/v1/msg:categories/{id}", _InSiteMessageCategoryService_GetInSiteMessageCategory0_HTTP_Handler(srv))
	r.POST("/admin/v1/msg:categories", _InSiteMessageCategoryService_CreateInSiteMessageCategory0_HTTP_Handler(srv))
	r.PUT("/admin/v1/msg:categories/{data.id}", _InSiteMessageCategoryService_UpdateInSiteMessageCategory0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/msg:categories/{id}", _InSiteMessageCategoryService_DeleteInSiteMessageCategory0_HTTP_Handler(srv))
}

func _InSiteMessageCategoryService_ListInSiteMessageCategory0_HTTP_Handler(srv InSiteMessageCategoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInSiteMessageCategoryServiceListInSiteMessageCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInSiteMessageCategory(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.ListInSiteMessageCategoryResponse)
		return ctx.Result(200, reply)
	}
}

func _InSiteMessageCategoryService_GetInSiteMessageCategory0_HTTP_Handler(srv InSiteMessageCategoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.GetInSiteMessageCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInSiteMessageCategoryServiceGetInSiteMessageCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInSiteMessageCategory(ctx, req.(*v11.GetInSiteMessageCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.InSiteMessageCategory)
		return ctx.Result(200, reply)
	}
}

func _InSiteMessageCategoryService_CreateInSiteMessageCategory0_HTTP_Handler(srv InSiteMessageCategoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.CreateInSiteMessageCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInSiteMessageCategoryServiceCreateInSiteMessageCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateInSiteMessageCategory(ctx, req.(*v11.CreateInSiteMessageCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _InSiteMessageCategoryService_UpdateInSiteMessageCategory0_HTTP_Handler(srv InSiteMessageCategoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.UpdateInSiteMessageCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInSiteMessageCategoryServiceUpdateInSiteMessageCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateInSiteMessageCategory(ctx, req.(*v11.UpdateInSiteMessageCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _InSiteMessageCategoryService_DeleteInSiteMessageCategory0_HTTP_Handler(srv InSiteMessageCategoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.DeleteInSiteMessageCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInSiteMessageCategoryServiceDeleteInSiteMessageCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteInSiteMessageCategory(ctx, req.(*v11.DeleteInSiteMessageCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type InSiteMessageCategoryServiceHTTPClient interface {
	CreateInSiteMessageCategory(ctx context.Context, req *v11.CreateInSiteMessageCategoryRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteInSiteMessageCategory(ctx context.Context, req *v11.DeleteInSiteMessageCategoryRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetInSiteMessageCategory(ctx context.Context, req *v11.GetInSiteMessageCategoryRequest, opts ...http.CallOption) (rsp *v11.InSiteMessageCategory, err error)
	ListInSiteMessageCategory(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *v11.ListInSiteMessageCategoryResponse, err error)
	UpdateInSiteMessageCategory(ctx context.Context, req *v11.UpdateInSiteMessageCategoryRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type InSiteMessageCategoryServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewInSiteMessageCategoryServiceHTTPClient(client *http.Client) InSiteMessageCategoryServiceHTTPClient {
	return &InSiteMessageCategoryServiceHTTPClientImpl{client}
}

func (c *InSiteMessageCategoryServiceHTTPClientImpl) CreateInSiteMessageCategory(ctx context.Context, in *v11.CreateInSiteMessageCategoryRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/msg:categories"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInSiteMessageCategoryServiceCreateInSiteMessageCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InSiteMessageCategoryServiceHTTPClientImpl) DeleteInSiteMessageCategory(ctx context.Context, in *v11.DeleteInSiteMessageCategoryRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/msg:categories/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInSiteMessageCategoryServiceDeleteInSiteMessageCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InSiteMessageCategoryServiceHTTPClientImpl) GetInSiteMessageCategory(ctx context.Context, in *v11.GetInSiteMessageCategoryRequest, opts ...http.CallOption) (*v11.InSiteMessageCategory, error) {
	var out v11.InSiteMessageCategory
	pattern := "/admin/v1/msg:categories/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInSiteMessageCategoryServiceGetInSiteMessageCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InSiteMessageCategoryServiceHTTPClientImpl) ListInSiteMessageCategory(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*v11.ListInSiteMessageCategoryResponse, error) {
	var out v11.ListInSiteMessageCategoryResponse
	pattern := "/admin/v1/msg:categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInSiteMessageCategoryServiceListInSiteMessageCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InSiteMessageCategoryServiceHTTPClientImpl) UpdateInSiteMessageCategory(ctx context.Context, in *v11.UpdateInSiteMessageCategoryRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/msg:categories/{data.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInSiteMessageCategoryServiceUpdateInSiteMessageCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
