// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: admin/service/v1/i_in_site_message.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v11 "kratos-admin/api/gen/go/system/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInSiteMessageServiceCreateInSiteMessage = "/admin.service.v1.InSiteMessageService/CreateInSiteMessage"
const OperationInSiteMessageServiceDeleteInSiteMessage = "/admin.service.v1.InSiteMessageService/DeleteInSiteMessage"
const OperationInSiteMessageServiceGetInSiteMessage = "/admin.service.v1.InSiteMessageService/GetInSiteMessage"
const OperationInSiteMessageServiceListInSiteMessage = "/admin.service.v1.InSiteMessageService/ListInSiteMessage"
const OperationInSiteMessageServiceUpdateInSiteMessage = "/admin.service.v1.InSiteMessageService/UpdateInSiteMessage"

type InSiteMessageServiceHTTPServer interface {
	// CreateInSiteMessage 创建站内信
	CreateInSiteMessage(context.Context, *v11.CreateInSiteMessageRequest) (*emptypb.Empty, error)
	// DeleteInSiteMessage 删除站内信
	DeleteInSiteMessage(context.Context, *v11.DeleteInSiteMessageRequest) (*emptypb.Empty, error)
	// GetInSiteMessage 查询站内信详情
	GetInSiteMessage(context.Context, *v11.GetInSiteMessageRequest) (*v11.InSiteMessage, error)
	// ListInSiteMessage 查询站内信列表
	ListInSiteMessage(context.Context, *v1.PagingRequest) (*v11.ListInSiteMessageResponse, error)
	// UpdateInSiteMessage 更新站内信
	UpdateInSiteMessage(context.Context, *v11.UpdateInSiteMessageRequest) (*emptypb.Empty, error)
}

func RegisterInSiteMessageServiceHTTPServer(s *http.Server, srv InSiteMessageServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/msg", _InSiteMessageService_ListInSiteMessage0_HTTP_Handler(srv))
	r.GET("/admin/v1/msg/{id}", _InSiteMessageService_GetInSiteMessage0_HTTP_Handler(srv))
	r.POST("/admin/v1/msg", _InSiteMessageService_CreateInSiteMessage0_HTTP_Handler(srv))
	r.PUT("/admin/v1/msg/{data.id}", _InSiteMessageService_UpdateInSiteMessage0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/msg/{id}", _InSiteMessageService_DeleteInSiteMessage0_HTTP_Handler(srv))
}

func _InSiteMessageService_ListInSiteMessage0_HTTP_Handler(srv InSiteMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInSiteMessageServiceListInSiteMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInSiteMessage(ctx, req.(*v1.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.ListInSiteMessageResponse)
		return ctx.Result(200, reply)
	}
}

func _InSiteMessageService_GetInSiteMessage0_HTTP_Handler(srv InSiteMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.GetInSiteMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInSiteMessageServiceGetInSiteMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInSiteMessage(ctx, req.(*v11.GetInSiteMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.InSiteMessage)
		return ctx.Result(200, reply)
	}
}

func _InSiteMessageService_CreateInSiteMessage0_HTTP_Handler(srv InSiteMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.CreateInSiteMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInSiteMessageServiceCreateInSiteMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateInSiteMessage(ctx, req.(*v11.CreateInSiteMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _InSiteMessageService_UpdateInSiteMessage0_HTTP_Handler(srv InSiteMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.UpdateInSiteMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInSiteMessageServiceUpdateInSiteMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateInSiteMessage(ctx, req.(*v11.UpdateInSiteMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _InSiteMessageService_DeleteInSiteMessage0_HTTP_Handler(srv InSiteMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.DeleteInSiteMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInSiteMessageServiceDeleteInSiteMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteInSiteMessage(ctx, req.(*v11.DeleteInSiteMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type InSiteMessageServiceHTTPClient interface {
	CreateInSiteMessage(ctx context.Context, req *v11.CreateInSiteMessageRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteInSiteMessage(ctx context.Context, req *v11.DeleteInSiteMessageRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetInSiteMessage(ctx context.Context, req *v11.GetInSiteMessageRequest, opts ...http.CallOption) (rsp *v11.InSiteMessage, err error)
	ListInSiteMessage(ctx context.Context, req *v1.PagingRequest, opts ...http.CallOption) (rsp *v11.ListInSiteMessageResponse, err error)
	UpdateInSiteMessage(ctx context.Context, req *v11.UpdateInSiteMessageRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type InSiteMessageServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewInSiteMessageServiceHTTPClient(client *http.Client) InSiteMessageServiceHTTPClient {
	return &InSiteMessageServiceHTTPClientImpl{client}
}

func (c *InSiteMessageServiceHTTPClientImpl) CreateInSiteMessage(ctx context.Context, in *v11.CreateInSiteMessageRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/msg"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInSiteMessageServiceCreateInSiteMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InSiteMessageServiceHTTPClientImpl) DeleteInSiteMessage(ctx context.Context, in *v11.DeleteInSiteMessageRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/msg/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInSiteMessageServiceDeleteInSiteMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InSiteMessageServiceHTTPClientImpl) GetInSiteMessage(ctx context.Context, in *v11.GetInSiteMessageRequest, opts ...http.CallOption) (*v11.InSiteMessage, error) {
	var out v11.InSiteMessage
	pattern := "/admin/v1/msg/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInSiteMessageServiceGetInSiteMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InSiteMessageServiceHTTPClientImpl) ListInSiteMessage(ctx context.Context, in *v1.PagingRequest, opts ...http.CallOption) (*v11.ListInSiteMessageResponse, error) {
	var out v11.ListInSiteMessageResponse
	pattern := "/admin/v1/msg"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInSiteMessageServiceListInSiteMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InSiteMessageServiceHTTPClientImpl) UpdateInSiteMessage(ctx context.Context, in *v11.UpdateInSiteMessageRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/admin/v1/msg/{data.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInSiteMessageServiceUpdateInSiteMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
