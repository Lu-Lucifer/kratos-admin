// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: authentication/service/v1/user_credential.proto

package servicev1

import (
	_ "github.com/google/gnostic/openapiv3"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 身份类型
type IdentityType int32

const (
	IdentityType_PASSWORD IdentityType = 0  // 用户名 + 密码
	IdentityType_EMAIL    IdentityType = 1  // 邮箱 + 密码
	IdentityType_PHONE    IdentityType = 2  // 手机号 + 验证码
	IdentityType_WECHAT   IdentityType = 10 // 微信
	IdentityType_QQ       IdentityType = 11 // QQ
	IdentityType_GOOGLE   IdentityType = 12 // Google
	IdentityType_FACEBOOK IdentityType = 13 // Facebook
	IdentityType_APPLE    IdentityType = 14 // Apple
	IdentityType_TELEGRAM IdentityType = 15 // Telegram
)

// Enum value maps for IdentityType.
var (
	IdentityType_name = map[int32]string{
		0:  "PASSWORD",
		1:  "EMAIL",
		2:  "PHONE",
		10: "WECHAT",
		11: "QQ",
		12: "GOOGLE",
		13: "FACEBOOK",
		14: "APPLE",
		15: "TELEGRAM",
	}
	IdentityType_value = map[string]int32{
		"PASSWORD": 0,
		"EMAIL":    1,
		"PHONE":    2,
		"WECHAT":   10,
		"QQ":       11,
		"GOOGLE":   12,
		"FACEBOOK": 13,
		"APPLE":    14,
		"TELEGRAM": 15,
	}
)

func (x IdentityType) Enum() *IdentityType {
	p := new(IdentityType)
	*p = x
	return p
}

func (x IdentityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityType) Descriptor() protoreflect.EnumDescriptor {
	return file_authentication_service_v1_user_credential_proto_enumTypes[0].Descriptor()
}

func (IdentityType) Type() protoreflect.EnumType {
	return &file_authentication_service_v1_user_credential_proto_enumTypes[0]
}

func (x IdentityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityType.Descriptor instead.
func (IdentityType) EnumDescriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{0}
}

// 凭证类型
type CredentialType int32

const (
	CredentialType_PASSWORD_HASH CredentialType = 0 // 加密密码
	CredentialType_ACCESS_TOKEN  CredentialType = 1 // 访问令牌
	CredentialType_REFRESH_TOKEN CredentialType = 2 // 刷新令牌
)

// Enum value maps for CredentialType.
var (
	CredentialType_name = map[int32]string{
		0: "PASSWORD_HASH",
		1: "ACCESS_TOKEN",
		2: "REFRESH_TOKEN",
	}
	CredentialType_value = map[string]int32{
		"PASSWORD_HASH": 0,
		"ACCESS_TOKEN":  1,
		"REFRESH_TOKEN": 2,
	}
)

func (x CredentialType) Enum() *CredentialType {
	p := new(CredentialType)
	*p = x
	return p
}

func (x CredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_authentication_service_v1_user_credential_proto_enumTypes[1].Descriptor()
}

func (CredentialType) Type() protoreflect.EnumType {
	return &file_authentication_service_v1_user_credential_proto_enumTypes[1]
}

func (x CredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialType.Descriptor instead.
func (CredentialType) EnumDescriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{1}
}

// 用户凭证状态
type UserCredentialStatus int32

const (
	UserCredentialStatus_DISABLED   UserCredentialStatus = 0 // 凭证被禁用，用户无法使用该凭证进行认证（如账号被冻结）。
	UserCredentialStatus_ENABLED    UserCredentialStatus = 1 // 凭证有效，用户可正常使用该凭证登录或注册。
	UserCredentialStatus_EXPIRED    UserCredentialStatus = 2 // 凭证已过期（如临时凭证超期）。
	UserCredentialStatus_UNVERIFIED UserCredentialStatus = 3 // 凭证未验证（需用户完成验证流程后才能生效）。
	UserCredentialStatus_REMOVED    UserCredentialStatus = 4 // 凭证已删除（逻辑删除，非物理删除，保留审计记录）。
	UserCredentialStatus_BLOCKED    UserCredentialStatus = 5 // 凭证被锁定（通常因多次错误尝试触发安全机制）。
	UserCredentialStatus_TEMPORARY  UserCredentialStatus = 6 // 临时凭证（仅在特定时间段内有效）。
)

// Enum value maps for UserCredentialStatus.
var (
	UserCredentialStatus_name = map[int32]string{
		0: "DISABLED",
		1: "ENABLED",
		2: "EXPIRED",
		3: "UNVERIFIED",
		4: "REMOVED",
		5: "BLOCKED",
		6: "TEMPORARY",
	}
	UserCredentialStatus_value = map[string]int32{
		"DISABLED":   0,
		"ENABLED":    1,
		"EXPIRED":    2,
		"UNVERIFIED": 3,
		"REMOVED":    4,
		"BLOCKED":    5,
		"TEMPORARY":  6,
	}
)

func (x UserCredentialStatus) Enum() *UserCredentialStatus {
	p := new(UserCredentialStatus)
	*p = x
	return p
}

func (x UserCredentialStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserCredentialStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_authentication_service_v1_user_credential_proto_enumTypes[2].Descriptor()
}

func (UserCredentialStatus) Type() protoreflect.EnumType {
	return &file_authentication_service_v1_user_credential_proto_enumTypes[2]
}

func (x UserCredentialStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserCredentialStatus.Descriptor instead.
func (UserCredentialStatus) EnumDescriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{2}
}

// 用户凭证
type UserCredential struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                    // 主键ID
	UserId         *uint32                `protobuf:"varint,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`                                                                        // 关联主表的用户ID
	TenantId       *uint32                `protobuf:"varint,3,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"`                                                                  // 租户ID
	IdentityType   *IdentityType          `protobuf:"varint,10,opt,name=identity_type,json=identityType,proto3,enum=authentication.service.v1.IdentityType,oneof" json:"identity_type,omitempty"`         // 认证方式类型
	Identifier     *string                `protobuf:"bytes,11,opt,name=identifier,proto3,oneof" json:"identifier,omitempty"`                                                                              // 身份唯一标识符
	CredentialType *CredentialType        `protobuf:"varint,20,opt,name=credential_type,json=credentialType,proto3,enum=authentication.service.v1.CredentialType,oneof" json:"credential_type,omitempty"` // 凭证类型
	Credential     *string                `protobuf:"bytes,21,opt,name=credential,proto3,oneof" json:"credential,omitempty"`                                                                              // 凭证
	IsPrimary      *bool                  `protobuf:"varint,30,opt,name=is_primary,json=isPrimary,proto3,oneof" json:"is_primary,omitempty"`                                                              // 是否主认证方式
	Status         *UserCredentialStatus  `protobuf:"varint,31,opt,name=status,proto3,enum=authentication.service.v1.UserCredentialStatus,oneof" json:"status,omitempty"`                                 // 凭证状态
	ExtraInfo      *string                `protobuf:"bytes,32,opt,name=extra_info,json=extraInfo,proto3,oneof" json:"extra_info,omitempty"`                                                               // 扩展信息
	CreateBy       *uint32                `protobuf:"varint,100,opt,name=create_by,json=createBy,proto3,oneof" json:"create_by,omitempty"`                                                                // 创建者ID
	UpdateBy       *uint32                `protobuf:"varint,101,opt,name=update_by,json=updateBy,proto3,oneof" json:"update_by,omitempty"`                                                                // 更新者ID
	CreateTime     *string                `protobuf:"bytes,200,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`                                                           // 创建时间
	UpdateTime     *string                `protobuf:"bytes,201,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`                                                           // 更新时间
	DeleteTime     *string                `protobuf:"bytes,202,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`                                                           // 删除时间
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserCredential) Reset() {
	*x = UserCredential{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCredential) ProtoMessage() {}

func (x *UserCredential) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCredential.ProtoReflect.Descriptor instead.
func (*UserCredential) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{0}
}

func (x *UserCredential) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserCredential) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *UserCredential) GetTenantId() uint32 {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return 0
}

func (x *UserCredential) GetIdentityType() IdentityType {
	if x != nil && x.IdentityType != nil {
		return *x.IdentityType
	}
	return IdentityType_PASSWORD
}

func (x *UserCredential) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *UserCredential) GetCredentialType() CredentialType {
	if x != nil && x.CredentialType != nil {
		return *x.CredentialType
	}
	return CredentialType_PASSWORD_HASH
}

func (x *UserCredential) GetCredential() string {
	if x != nil && x.Credential != nil {
		return *x.Credential
	}
	return ""
}

func (x *UserCredential) GetIsPrimary() bool {
	if x != nil && x.IsPrimary != nil {
		return *x.IsPrimary
	}
	return false
}

func (x *UserCredential) GetStatus() UserCredentialStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserCredentialStatus_DISABLED
}

func (x *UserCredential) GetExtraInfo() string {
	if x != nil && x.ExtraInfo != nil {
		return *x.ExtraInfo
	}
	return ""
}

func (x *UserCredential) GetCreateBy() uint32 {
	if x != nil && x.CreateBy != nil {
		return *x.CreateBy
	}
	return 0
}

func (x *UserCredential) GetUpdateBy() uint32 {
	if x != nil && x.UpdateBy != nil {
		return *x.UpdateBy
	}
	return 0
}

func (x *UserCredential) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *UserCredential) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *UserCredential) GetDeleteTime() string {
	if x != nil && x.DeleteTime != nil {
		return *x.DeleteTime
	}
	return ""
}

// 查询列表 - 答复
type ListUserCredentialResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*UserCredential      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserCredentialResponse) Reset() {
	*x = ListUserCredentialResponse{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCredentialResponse) ProtoMessage() {}

func (x *ListUserCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCredentialResponse.ProtoReflect.Descriptor instead.
func (*ListUserCredentialResponse) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{1}
}

func (x *ListUserCredentialResponse) GetItems() []*UserCredential {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListUserCredentialResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 更新 - 请求
type UpdateUserCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *UserCredential        `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`              // 要更新的字段列表
	AllowMissing  *bool                  `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3,oneof" json:"allow_missing,omitempty"` // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserCredentialRequest) Reset() {
	*x = UpdateUserCredentialRequest{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserCredentialRequest) ProtoMessage() {}

func (x *UpdateUserCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserCredentialRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserCredentialRequest) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserCredentialRequest) GetData() *UserCredential {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateUserCredentialRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateUserCredentialRequest) GetAllowMissing() bool {
	if x != nil && x.AllowMissing != nil {
		return *x.AllowMissing
	}
	return false
}

// 创建 - 请求
type CreateUserCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *UserCredential        `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserCredentialRequest) Reset() {
	*x = CreateUserCredentialRequest{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserCredentialRequest) ProtoMessage() {}

func (x *CreateUserCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserCredentialRequest.ProtoReflect.Descriptor instead.
func (*CreateUserCredentialRequest) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{3}
}

func (x *CreateUserCredentialRequest) GetData() *UserCredential {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除 - 请求
type DeleteUserCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserCredentialRequest) Reset() {
	*x = DeleteUserCredentialRequest{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserCredentialRequest) ProtoMessage() {}

func (x *DeleteUserCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserCredentialRequest) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteUserCredentialRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 查询 - 请求
type GetUserCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCredentialRequest) Reset() {
	*x = GetUserCredentialRequest{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCredentialRequest) ProtoMessage() {}

func (x *GetUserCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCredentialRequest.ProtoReflect.Descriptor instead.
func (*GetUserCredentialRequest) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserCredentialRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 查询 - 请求
type GetUserCredentialByIdentifierRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IdentityType  IdentityType           `protobuf:"varint,1,opt,name=identity_type,json=identityType,proto3,enum=authentication.service.v1.IdentityType" json:"identity_type,omitempty"` // 身份类型
	Identifier    string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                                      // 身份唯一标识符
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCredentialByIdentifierRequest) Reset() {
	*x = GetUserCredentialByIdentifierRequest{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCredentialByIdentifierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCredentialByIdentifierRequest) ProtoMessage() {}

func (x *GetUserCredentialByIdentifierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCredentialByIdentifierRequest.ProtoReflect.Descriptor instead.
func (*GetUserCredentialByIdentifierRequest) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserCredentialByIdentifierRequest) GetIdentityType() IdentityType {
	if x != nil {
		return x.IdentityType
	}
	return IdentityType_PASSWORD
}

func (x *GetUserCredentialByIdentifierRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

// 验证凭证 - 请求
type VerifyCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IdentityType  IdentityType           `protobuf:"varint,1,opt,name=identity_type,json=identityType,proto3,enum=authentication.service.v1.IdentityType" json:"identity_type,omitempty"` // 身份类型
	Identifier    string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                                      // 身份唯一标识符
	Credential    string                 `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`                                                                      // 凭证
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyCredentialRequest) Reset() {
	*x = VerifyCredentialRequest{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCredentialRequest) ProtoMessage() {}

func (x *VerifyCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCredentialRequest.ProtoReflect.Descriptor instead.
func (*VerifyCredentialRequest) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyCredentialRequest) GetIdentityType() IdentityType {
	if x != nil {
		return x.IdentityType
	}
	return IdentityType_PASSWORD
}

func (x *VerifyCredentialRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *VerifyCredentialRequest) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

// 验证凭证 - 答复
type VerifyCredentialResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyCredentialResponse) Reset() {
	*x = VerifyCredentialResponse{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCredentialResponse) ProtoMessage() {}

func (x *VerifyCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCredentialResponse.ProtoReflect.Descriptor instead.
func (*VerifyCredentialResponse) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{8}
}

func (x *VerifyCredentialResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 修改凭证 - 请求
type ChangeCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IdentityType  IdentityType           `protobuf:"varint,1,opt,name=identity_type,json=identityType,proto3,enum=authentication.service.v1.IdentityType" json:"identity_type,omitempty"` // 身份类型
	Identifier    string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                                      // 身份唯一标识符
	OldCredential string                 `protobuf:"bytes,3,opt,name=old_credential,json=oldCredential,proto3" json:"old_credential,omitempty"`                                           // 旧凭证
	NewCredential string                 `protobuf:"bytes,4,opt,name=new_credential,json=newCredential,proto3" json:"new_credential,omitempty"`                                           // 新凭证
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeCredentialRequest) Reset() {
	*x = ChangeCredentialRequest{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeCredentialRequest) ProtoMessage() {}

func (x *ChangeCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeCredentialRequest.ProtoReflect.Descriptor instead.
func (*ChangeCredentialRequest) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{9}
}

func (x *ChangeCredentialRequest) GetIdentityType() IdentityType {
	if x != nil {
		return x.IdentityType
	}
	return IdentityType_PASSWORD
}

func (x *ChangeCredentialRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ChangeCredentialRequest) GetOldCredential() string {
	if x != nil {
		return x.OldCredential
	}
	return ""
}

func (x *ChangeCredentialRequest) GetNewCredential() string {
	if x != nil {
		return x.NewCredential
	}
	return ""
}

// 重设凭证 - 请求
type ResetCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IdentityType  IdentityType           `protobuf:"varint,1,opt,name=identity_type,json=identityType,proto3,enum=authentication.service.v1.IdentityType" json:"identity_type,omitempty"` // 身份类型
	Identifier    string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                                      // 身份唯一标识符
	NewCredential string                 `protobuf:"bytes,3,opt,name=new_credential,json=newCredential,proto3" json:"new_credential,omitempty"`                                           // 新凭证
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetCredentialRequest) Reset() {
	*x = ResetCredentialRequest{}
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCredentialRequest) ProtoMessage() {}

func (x *ResetCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_user_credential_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCredentialRequest.ProtoReflect.Descriptor instead.
func (*ResetCredentialRequest) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_user_credential_proto_rawDescGZIP(), []int{10}
}

func (x *ResetCredentialRequest) GetIdentityType() IdentityType {
	if x != nil {
		return x.IdentityType
	}
	return IdentityType_PASSWORD
}

func (x *ResetCredentialRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ResetCredentialRequest) GetNewCredential() string {
	if x != nil {
		return x.NewCredential
	}
	return ""
}

var File_authentication_service_v1_user_credential_proto protoreflect.FileDescriptor

var file_authentication_service_v1_user_credential_proto_rawDesc = string([]byte{
	0x0a, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb6, 0x0f, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0xba, 0x47, 0x1a, 0x92, 0x02, 0x17, 0xe5, 0x85, 0xb3,
	0xe8, 0x81, 0x94, 0xe4, 0xb8, 0xbb, 0xe8, 0xa1, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0x49, 0x44, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xba, 0x47, 0x0b, 0x92, 0x02, 0x08, 0xe7, 0xa7, 0x9f, 0xe6,
	0x88, 0xb7, 0x49, 0x44, 0x48, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0xc2, 0x01, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0xba, 0x47, 0x6c, 0x92, 0x02, 0x69, 0xe8, 0xae, 0xa4, 0xe8,
	0xaf, 0x81, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe5, 0xa6, 0x82, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0x2b, 0xe5, 0xaf,
	0x86, 0xe7, 0xa0, 0x81, 0xe3, 0x80, 0x81, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0x2b, 0xe5, 0xaf,
	0x86, 0xe7, 0xa0, 0x81, 0xe3, 0x80, 0x81, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7,
	0x2b, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe3, 0x80, 0x81, 0xe7, 0xac, 0xac,
	0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe8, 0xae, 0xa4, 0xe8,
	0xaf, 0x81, 0xe7, 0xad, 0x89, 0x48, 0x02, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0xa3, 0x02, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0xfd, 0x01,
	0xba, 0x47, 0xf9, 0x01, 0x92, 0x02, 0xf5, 0x01, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0x94,
	0xaf, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe7, 0xac, 0xa6, 0xef, 0xbc, 0x8c,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x98, 0xaf, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe7,
	0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe6, 0x98, 0xaf, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0xef, 0xbc, 0x9b, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c,
	0xe6, 0x98, 0xaf, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xef,
	0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe6, 0x98, 0xaf, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0xef, 0xbc, 0x9b, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x98, 0xaf,
	0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xef,
	0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe6, 0x98, 0xaf, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f,
	0xb7, 0xef, 0xbc, 0x9b, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x98, 0xaf, 0xe7, 0xac, 0xac,
	0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe7, 0x99, 0xbb, 0xe5,
	0xbd, 0x95, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe6, 0x98, 0xaf, 0xe7, 0xac, 0xac, 0xe4, 0xb8,
	0x89, 0xe6, 0x96, 0xb9, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe7, 0x9a, 0x84, 0xe5, 0x94, 0xaf,
	0xe4, 0xb8, 0x80, 0x49, 0x44, 0xef, 0xbc, 0x88, 0xe5, 0xa6, 0x82, 0xe5, 0xbe, 0xae, 0xe4, 0xbf,
	0xa1, 0xe7, 0x9a, 0x84, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0xef, 0xbc, 0x89, 0x48, 0x03, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x9e,
	0x01, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x45, 0xba, 0x47, 0x42, 0x92, 0x02, 0x3f, 0xe5, 0x87, 0xad, 0xe8, 0xaf,
	0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe5, 0x8a, 0xa0,
	0xe5, 0xaf, 0x86, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe3, 0x80, 0x81, 0xe8, 0xae, 0xbf, 0xe9,
	0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe3, 0x80, 0x81, 0xe5, 0x88, 0xb7, 0xe6, 0x96,
	0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe7, 0xad, 0x89, 0x48, 0x04, 0x52, 0x0e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x99, 0x02, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xf3, 0x01, 0xba, 0x47, 0xef, 0x01, 0x92, 0x02, 0xeb, 0x01, 0xe5,
	0x87, 0xad, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x98,
	0xaf, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c,
	0xe5, 0x88, 0x99, 0xe6, 0x98, 0xaf, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe7, 0x9a, 0x84, 0x68,
	0x61, 0x73, 0x68, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x9b, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6,
	0x98, 0xaf, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xef, 0xbc,
	0x8c, 0xe5, 0x88, 0x99, 0xe6, 0x98, 0xaf, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe7, 0x9a, 0x84,
	0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x9b, 0xe5, 0xa6, 0x82, 0xe6,
	0x9e, 0x9c, 0xe6, 0x98, 0xaf, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7, 0x99,
	0xbb, 0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe6, 0x98, 0xaf, 0xe6, 0x89, 0x8b,
	0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7, 0x9a, 0x84, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7,
	0xa0, 0x81, 0xef, 0xbc, 0x9b, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x98, 0xaf, 0xe7, 0xac,
	0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe7, 0x99, 0xbb,
	0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe6, 0x98, 0xaf, 0xe7, 0xac, 0xac, 0xe4,
	0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe7, 0x9a, 0x84, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x05, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0xa2, 0x01, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x7e, 0xba, 0x47, 0x7b, 0x92, 0x02, 0x78, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8,
	0xbb, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x8c,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8c, 0xe6,
	0x97, 0xb6, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe4, 0xba, 0x86, 0xe9, 0x82, 0xae, 0xe7, 0xae,
	0xb1, 0xe5, 0x92, 0x8c, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xef, 0xbc, 0x8c,
	0xe9, 0x82, 0xa3, 0xe4, 0xb9, 0x88, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x8c, 0x87, 0xe5,
	0xae, 0x9a, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6,
	0x81, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe3, 0x80, 0x82,
	0x48, 0x06, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x48, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0xba, 0x47, 0x60, 0x92, 0x02, 0x5d, 0xe6,
	0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x98, 0xaf, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9,
	0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xef, 0xbc, 0x8c, 0xe5,
	0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe7, 0xac, 0xac, 0xe4, 0xb8,
	0x89, 0xe6, 0x96, 0xb9, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe3, 0x80, 0x82, 0x48, 0x08, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0xba, 0x47, 0x0e, 0x92, 0x02, 0x0b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85,
	0x49, 0x44, 0x48, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xba, 0x47, 0x0e, 0x92, 0x02, 0x0b, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe8, 0x80, 0x85, 0x49, 0x44, 0x48, 0x0a, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47,
	0x0f, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x48, 0x0b, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x48, 0x0c, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x48, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x9a, 0x03, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x73,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x36, 0xba, 0x47, 0x33, 0x3a, 0x16, 0x12, 0x14, 0x69, 0x64, 0x2c, 0x72, 0x65, 0x61, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x2c, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x18, 0xe8,
	0xa6, 0x81, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0xb4, 0x01, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x89, 0x01, 0xba, 0x47,
	0x85, 0x01, 0x92, 0x02, 0x81, 0x01, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe5,
	0x80, 0x99, 0xef, 0xbc, 0x8c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xb8, 0x8d, 0xe5, 0xad,
	0x98, 0xe5, 0x9c, 0xa8, 0xe5, 0x88, 0x99, 0xe4, 0xbc, 0x9a, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e,
	0x28, 0xe6, 0x8f, 0x92, 0xe5, 0x85, 0xa5, 0x29, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8,
	0x94, 0xe5, 0x9c, 0xa8, 0xe8, 0xbf, 0x99, 0xe7, 0xa7, 0x8d, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5,
	0xe4, 0xb8, 0x8b, 0x60, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x60, 0xe5,
	0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe5, 0xb0, 0x86, 0xe4, 0xbc, 0x9a, 0xe8, 0xa2, 0xab, 0xe5, 0xbf,
	0xbd, 0xe7, 0x95, 0xa5, 0xe3, 0x80, 0x82, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x5c, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60,
	0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12,
	0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47, 0x18, 0x92, 0x02, 0x15, 0xe8, 0xba, 0xab, 0xe4,
	0xbb, 0xbd, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe7, 0xac,
	0xa6, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xe6, 0x01,
	0x0a, 0x17, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x0d, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02,
	0x0c, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0xba, 0x47, 0x18, 0x92, 0x02, 0x15, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0x94, 0xaf,
	0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe7, 0xac, 0xa6, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x47,
	0x09, 0x92, 0x02, 0x06, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x34, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa8, 0x02, 0x0a,
	0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c,
	0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0xba, 0x47, 0x18, 0x92, 0x02, 0x15, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0x94, 0xaf, 0xe4,
	0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe7, 0xac, 0xa6, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xba, 0x47, 0x0c, 0x92, 0x02, 0x09, 0xe6, 0x97, 0xa7, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81,
	0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x36, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x47, 0x0c, 0x92, 0x02, 0x09, 0xe6,
	0x96, 0xb0, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xef, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x60, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47, 0x18, 0x92, 0x02, 0x15,
	0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8,
	0xaf, 0x86, 0xe7, 0xac, 0xa6, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x47, 0x0c, 0x92, 0x02,
	0x09, 0xe6, 0x96, 0xb0, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2a, 0x79, 0x0a, 0x0c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x10, 0x0a, 0x12, 0x06, 0x0a, 0x02, 0x51, 0x51, 0x10,
	0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x50, 0x50, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x4c, 0x45, 0x47, 0x52,
	0x41, 0x4d, 0x10, 0x0f, 0x2a, 0x48, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x2a, 0x77,
	0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4d, 0x50,
	0x4f, 0x52, 0x41, 0x52, 0x59, 0x10, 0x06, 0x32, 0xb2, 0x07, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x10, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x32, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x32,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0xf7, 0x01, 0x0a,
	0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x13,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x53, 0x58, 0xaa, 0x02, 0x19, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x25, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_authentication_service_v1_user_credential_proto_rawDescOnce sync.Once
	file_authentication_service_v1_user_credential_proto_rawDescData []byte
)

func file_authentication_service_v1_user_credential_proto_rawDescGZIP() []byte {
	file_authentication_service_v1_user_credential_proto_rawDescOnce.Do(func() {
		file_authentication_service_v1_user_credential_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_authentication_service_v1_user_credential_proto_rawDesc), len(file_authentication_service_v1_user_credential_proto_rawDesc)))
	})
	return file_authentication_service_v1_user_credential_proto_rawDescData
}

var file_authentication_service_v1_user_credential_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_authentication_service_v1_user_credential_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_authentication_service_v1_user_credential_proto_goTypes = []any{
	(IdentityType)(0),                            // 0: authentication.service.v1.IdentityType
	(CredentialType)(0),                          // 1: authentication.service.v1.CredentialType
	(UserCredentialStatus)(0),                    // 2: authentication.service.v1.UserCredentialStatus
	(*UserCredential)(nil),                       // 3: authentication.service.v1.UserCredential
	(*ListUserCredentialResponse)(nil),           // 4: authentication.service.v1.ListUserCredentialResponse
	(*UpdateUserCredentialRequest)(nil),          // 5: authentication.service.v1.UpdateUserCredentialRequest
	(*CreateUserCredentialRequest)(nil),          // 6: authentication.service.v1.CreateUserCredentialRequest
	(*DeleteUserCredentialRequest)(nil),          // 7: authentication.service.v1.DeleteUserCredentialRequest
	(*GetUserCredentialRequest)(nil),             // 8: authentication.service.v1.GetUserCredentialRequest
	(*GetUserCredentialByIdentifierRequest)(nil), // 9: authentication.service.v1.GetUserCredentialByIdentifierRequest
	(*VerifyCredentialRequest)(nil),              // 10: authentication.service.v1.VerifyCredentialRequest
	(*VerifyCredentialResponse)(nil),             // 11: authentication.service.v1.VerifyCredentialResponse
	(*ChangeCredentialRequest)(nil),              // 12: authentication.service.v1.ChangeCredentialRequest
	(*ResetCredentialRequest)(nil),               // 13: authentication.service.v1.ResetCredentialRequest
	(*fieldmaskpb.FieldMask)(nil),                // 14: google.protobuf.FieldMask
	(*v1.PagingRequest)(nil),                     // 15: pagination.PagingRequest
	(*emptypb.Empty)(nil),                        // 16: google.protobuf.Empty
}
var file_authentication_service_v1_user_credential_proto_depIdxs = []int32{
	0,  // 0: authentication.service.v1.UserCredential.identity_type:type_name -> authentication.service.v1.IdentityType
	1,  // 1: authentication.service.v1.UserCredential.credential_type:type_name -> authentication.service.v1.CredentialType
	2,  // 2: authentication.service.v1.UserCredential.status:type_name -> authentication.service.v1.UserCredentialStatus
	3,  // 3: authentication.service.v1.ListUserCredentialResponse.items:type_name -> authentication.service.v1.UserCredential
	3,  // 4: authentication.service.v1.UpdateUserCredentialRequest.data:type_name -> authentication.service.v1.UserCredential
	14, // 5: authentication.service.v1.UpdateUserCredentialRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 6: authentication.service.v1.CreateUserCredentialRequest.data:type_name -> authentication.service.v1.UserCredential
	0,  // 7: authentication.service.v1.GetUserCredentialByIdentifierRequest.identity_type:type_name -> authentication.service.v1.IdentityType
	0,  // 8: authentication.service.v1.VerifyCredentialRequest.identity_type:type_name -> authentication.service.v1.IdentityType
	0,  // 9: authentication.service.v1.ChangeCredentialRequest.identity_type:type_name -> authentication.service.v1.IdentityType
	0,  // 10: authentication.service.v1.ResetCredentialRequest.identity_type:type_name -> authentication.service.v1.IdentityType
	15, // 11: authentication.service.v1.UserCredentialService.List:input_type -> pagination.PagingRequest
	8,  // 12: authentication.service.v1.UserCredentialService.Get:input_type -> authentication.service.v1.GetUserCredentialRequest
	9,  // 13: authentication.service.v1.UserCredentialService.GetByIdentifier:input_type -> authentication.service.v1.GetUserCredentialByIdentifierRequest
	6,  // 14: authentication.service.v1.UserCredentialService.Create:input_type -> authentication.service.v1.CreateUserCredentialRequest
	5,  // 15: authentication.service.v1.UserCredentialService.Update:input_type -> authentication.service.v1.UpdateUserCredentialRequest
	7,  // 16: authentication.service.v1.UserCredentialService.Delete:input_type -> authentication.service.v1.DeleteUserCredentialRequest
	10, // 17: authentication.service.v1.UserCredentialService.VerifyCredential:input_type -> authentication.service.v1.VerifyCredentialRequest
	12, // 18: authentication.service.v1.UserCredentialService.ChangeCredential:input_type -> authentication.service.v1.ChangeCredentialRequest
	13, // 19: authentication.service.v1.UserCredentialService.ResetCredential:input_type -> authentication.service.v1.ResetCredentialRequest
	4,  // 20: authentication.service.v1.UserCredentialService.List:output_type -> authentication.service.v1.ListUserCredentialResponse
	3,  // 21: authentication.service.v1.UserCredentialService.Get:output_type -> authentication.service.v1.UserCredential
	3,  // 22: authentication.service.v1.UserCredentialService.GetByIdentifier:output_type -> authentication.service.v1.UserCredential
	16, // 23: authentication.service.v1.UserCredentialService.Create:output_type -> google.protobuf.Empty
	16, // 24: authentication.service.v1.UserCredentialService.Update:output_type -> google.protobuf.Empty
	16, // 25: authentication.service.v1.UserCredentialService.Delete:output_type -> google.protobuf.Empty
	11, // 26: authentication.service.v1.UserCredentialService.VerifyCredential:output_type -> authentication.service.v1.VerifyCredentialResponse
	16, // 27: authentication.service.v1.UserCredentialService.ChangeCredential:output_type -> google.protobuf.Empty
	16, // 28: authentication.service.v1.UserCredentialService.ResetCredential:output_type -> google.protobuf.Empty
	20, // [20:29] is the sub-list for method output_type
	11, // [11:20] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_authentication_service_v1_user_credential_proto_init() }
func file_authentication_service_v1_user_credential_proto_init() {
	if File_authentication_service_v1_user_credential_proto != nil {
		return
	}
	file_authentication_service_v1_user_credential_proto_msgTypes[0].OneofWrappers = []any{}
	file_authentication_service_v1_user_credential_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_authentication_service_v1_user_credential_proto_rawDesc), len(file_authentication_service_v1_user_credential_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_authentication_service_v1_user_credential_proto_goTypes,
		DependencyIndexes: file_authentication_service_v1_user_credential_proto_depIdxs,
		EnumInfos:         file_authentication_service_v1_user_credential_proto_enumTypes,
		MessageInfos:      file_authentication_service_v1_user_credential_proto_msgTypes,
	}.Build()
	File_authentication_service_v1_user_credential_proto = out.File
	file_authentication_service_v1_user_credential_proto_goTypes = nil
	file_authentication_service_v1_user_credential_proto_depIdxs = nil
}
