// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: authentication/service/v1/authentication.proto

package servicev1

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "kratos-admin/api/gen/go/user/service/v1"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 授权类型
type GrantType int32

const (
	GrantType_password           GrantType = 0 // 密码模式（Resource Owner Password Credentials Grant）
	GrantType_client_credentials GrantType = 1 // 客户端模式（Client Credentials Grant）
	GrantType_authorization_code GrantType = 2 // 授权码模式（Authorization Code Grant）
	GrantType_refresh_token      GrantType = 3 // 刷新令牌 (Refresh Token)
	GrantType_implicit           GrantType = 4 // 简化模式 (Implicit Grant)
)

// Enum value maps for GrantType.
var (
	GrantType_name = map[int32]string{
		0: "password",
		1: "client_credentials",
		2: "authorization_code",
		3: "refresh_token",
		4: "implicit",
	}
	GrantType_value = map[string]int32{
		"password":           0,
		"client_credentials": 1,
		"authorization_code": 2,
		"refresh_token":      3,
		"implicit":           4,
	}
)

func (x GrantType) Enum() *GrantType {
	p := new(GrantType)
	*p = x
	return p
}

func (x GrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_authentication_service_v1_authentication_proto_enumTypes[0].Descriptor()
}

func (GrantType) Type() protoreflect.EnumType {
	return &file_authentication_service_v1_authentication_proto_enumTypes[0]
}

func (x GrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantType.Descriptor instead.
func (GrantType) EnumDescriptor() ([]byte, []int) {
	return file_authentication_service_v1_authentication_proto_rawDescGZIP(), []int{0}
}

// 令牌类型
type TokenType int32

const (
	TokenType_bearer TokenType = 0 //
	TokenType_mac    TokenType = 1 //
)

// Enum value maps for TokenType.
var (
	TokenType_name = map[int32]string{
		0: "bearer",
		1: "mac",
	}
	TokenType_value = map[string]int32{
		"bearer": 0,
		"mac":    1,
	}
)

func (x TokenType) Enum() *TokenType {
	p := new(TokenType)
	*p = x
	return p
}

func (x TokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_authentication_service_v1_authentication_proto_enumTypes[1].Descriptor()
}

func (TokenType) Type() protoreflect.EnumType {
	return &file_authentication_service_v1_authentication_proto_enumTypes[1]
}

func (x TokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenType.Descriptor instead.
func (TokenType) EnumDescriptor() ([]byte, []int) {
	return file_authentication_service_v1_authentication_proto_rawDescGZIP(), []int{1}
}

// 客户端类型
type ClientType int32

const (
	ClientType_admin ClientType = 0 // 管理端
	ClientType_app   ClientType = 1 // APP
)

// Enum value maps for ClientType.
var (
	ClientType_name = map[int32]string{
		0: "admin",
		1: "app",
	}
	ClientType_value = map[string]int32{
		"admin": 0,
		"app":   1,
	}
)

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}

func (x ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_authentication_service_v1_authentication_proto_enumTypes[2].Descriptor()
}

func (ClientType) Type() protoreflect.EnumType {
	return &file_authentication_service_v1_authentication_proto_enumTypes[2]
}

func (x ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientType.Descriptor instead.
func (ClientType) EnumDescriptor() ([]byte, []int) {
	return file_authentication_service_v1_authentication_proto_rawDescGZIP(), []int{2}
}

// 用户后台登录 - 请求
type LoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GrantType     string                 `protobuf:"bytes,1,opt,name=grant_type,proto3" json:"grant_type,omitempty"` // 授权类型，此处的值固定为"password"，必选项。
	ClientId      *string                `protobuf:"bytes,2,opt,name=client_id,proto3,oneof" json:"client_id,omitempty"`
	ClientSecret  *string                `protobuf:"bytes,3,opt,name=client_secret,proto3,oneof" json:"client_secret,omitempty"`
	Scope         *string                `protobuf:"bytes,4,opt,name=scope,proto3,oneof" json:"scope,omitempty"`                  // 以空格分隔的范围列表。如果未提供，scope则授权任何范围，默认为空列表。
	RedirectUri   *string                `protobuf:"bytes,5,opt,name=redirect_uri,proto3,oneof" json:"redirect_uri,omitempty"`    // 跳转链接
	Username      *string                `protobuf:"bytes,10,opt,name=username,proto3,oneof" json:"username,omitempty"`           // 用户名，必选项。
	Password      *string                `protobuf:"bytes,11,opt,name=password,proto3,oneof" json:"password,omitempty"`           // 用户的密码，必选项。
	RefreshToken  *string                `protobuf:"bytes,20,opt,name=refresh_token,proto3,oneof" json:"refresh_token,omitempty"` // 更新令牌，用来获取下一次的访问令牌，必选项。
	Code          *string                `protobuf:"bytes,30,opt,name=code,proto3,oneof" json:"code,omitempty"`                   // 授权请求中收到的一次性验证/认证码。(当使用授权码模式时)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_authentication_service_v1_authentication_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_authentication_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_authentication_proto_rawDescGZIP(), []int{0}
}

func (x *LoginRequest) GetGrantType() string {
	if x != nil {
		return x.GrantType
	}
	return ""
}

func (x *LoginRequest) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *LoginRequest) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

func (x *LoginRequest) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *LoginRequest) GetRedirectUri() string {
	if x != nil && x.RedirectUri != nil {
		return *x.RedirectUri
	}
	return ""
}

func (x *LoginRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *LoginRequest) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

func (x *LoginRequest) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

// 用户后台登录 - 回应
type LoginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,proto3" json:"access_token,omitempty"`    // 访问令牌，必选项。
	RefreshToken  string                 `protobuf:"bytes,2,opt,name=refresh_token,proto3" json:"refresh_token,omitempty"`  // 更新令牌，用来获取下一次的访问令牌，可选项。
	TokenType     string                 `protobuf:"bytes,3,opt,name=token_type,proto3" json:"token_type,omitempty"`        // 令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。
	ExpiresIn     *int64                 `protobuf:"varint,4,opt,name=expires_in,proto3,oneof" json:"expires_in,omitempty"` // 令牌有效时间，单位为秒。如果访问令牌过期，服务器应回复授予访问令牌的持续时间。如果省略该参数，必须其他方式设置过期时间。
	Scope         *string                `protobuf:"bytes,5,opt,name=scope,proto3,oneof" json:"scope,omitempty"`            // 以空格分隔的用户授予范围列表。如果未提供，scope则授权任何范围，默认为空列表。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_authentication_service_v1_authentication_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_authentication_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_authentication_proto_rawDescGZIP(), []int{1}
}

func (x *LoginResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *LoginResponse) GetExpiresIn() int64 {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return 0
}

func (x *LoginResponse) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

// 验证令牌 - 请求
type ValidateTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,json=isValid,proto3" json:"token,omitempty"`                                                           // 令牌
	ClientType    ClientType             `protobuf:"varint,2,opt,name=client_type,json=clientType,proto3,enum=authentication.service.v1.ClientType" json:"client_type,omitempty"` // 客戶端類型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateTokenRequest) Reset() {
	*x = ValidateTokenRequest{}
	mi := &file_authentication_service_v1_authentication_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTokenRequest) ProtoMessage() {}

func (x *ValidateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_authentication_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTokenRequest.ProtoReflect.Descriptor instead.
func (*ValidateTokenRequest) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_authentication_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ValidateTokenRequest) GetClientType() ClientType {
	if x != nil {
		return x.ClientType
	}
	return ClientType_admin
}

// 验证令牌 - 回应
type ValidateTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsValid       bool                   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"` // 令牌是否有效
	Claim         *UserTokenPayload      `protobuf:"bytes,2,opt,name=claim,proto3,oneof" json:"claim,omitempty"`               // 用戶令牌载体
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateTokenResponse) Reset() {
	*x = ValidateTokenResponse{}
	mi := &file_authentication_service_v1_authentication_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTokenResponse) ProtoMessage() {}

func (x *ValidateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_authentication_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTokenResponse.ProtoReflect.Descriptor instead.
func (*ValidateTokenResponse) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_authentication_proto_rawDescGZIP(), []int{3}
}

func (x *ValidateTokenResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ValidateTokenResponse) GetClaim() *UserTokenPayload {
	if x != nil {
		return x.Claim
	}
	return nil
}

// 用户令牌载体
type UserTokenPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=uid,proto3" json:"user_id,omitempty"`                                        // 用户ID
	TenantId      uint32                 `protobuf:"varint,2,opt,name=tenant_id,json=tid,proto3" json:"tenant_id,omitempty"`                                    // 租户ID
	Username      string                 `protobuf:"bytes,3,opt,name=username,json=sub,proto3" json:"username,omitempty"`                                       // 用户名
	ClientId      string                 `protobuf:"bytes,4,opt,name=client_id,json=cid,proto3" json:"client_id,omitempty"`                                     // 客户端ID
	Authority     v1.UserAuthority       `protobuf:"varint,5,opt,name=authority,json=aut,proto3,enum=user.service.v1.UserAuthority" json:"authority,omitempty"` // 用户权限
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserTokenPayload) Reset() {
	*x = UserTokenPayload{}
	mi := &file_authentication_service_v1_authentication_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTokenPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTokenPayload) ProtoMessage() {}

func (x *UserTokenPayload) ProtoReflect() protoreflect.Message {
	mi := &file_authentication_service_v1_authentication_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTokenPayload.ProtoReflect.Descriptor instead.
func (*UserTokenPayload) Descriptor() ([]byte, []int) {
	return file_authentication_service_v1_authentication_proto_rawDescGZIP(), []int{4}
}

func (x *UserTokenPayload) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserTokenPayload) GetTenantId() uint32 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *UserTokenPayload) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserTokenPayload) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UserTokenPayload) GetAuthority() v1.UserAuthority {
	if x != nil {
		return x.Authority
	}
	return v1.UserAuthority(0)
}

var File_authentication_service_v1_authentication_proto protoreflect.FileDescriptor

var file_authentication_service_v1_authentication_proto_rawDesc = string([]byte{
	0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x08, 0x0a, 0x0c, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x0a, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53,
	0xe0, 0x41, 0x02, 0xba, 0x47, 0x4d, 0x8a, 0x02, 0x0a, 0x1a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x92, 0x02, 0x3d, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0xad, 0xa4, 0xe5, 0xa4, 0x84, 0xe7, 0x9a, 0x84, 0xe5, 0x80,
	0xbc, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba, 0x22, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9,
	0xe3, 0x80, 0x82, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0xba, 0x47, 0x0e, 0x92, 0x02, 0x0b, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7,
	0xe7, 0xab, 0xaf, 0x49, 0x44, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x47,
	0x12, 0x92, 0x02, 0x0f, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe7, 0xab, 0xaf, 0xe5, 0xaf, 0x86,
	0xe9, 0x92, 0xa5, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0xba, 0x47, 0x74, 0x92, 0x02, 0x71, 0xe4,
	0xbb, 0xa5, 0xe7, 0xa9, 0xba, 0xe6, 0xa0, 0xbc, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0xe7, 0x9a,
	0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x8e, 0x88, 0xe4, 0xba, 0x88, 0xe8, 0x8c, 0x83,
	0xe5, 0x9b, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6,
	0x9e, 0x9c, 0xe6, 0x9c, 0xaa, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xef, 0xbc, 0x8c, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0xe5, 0x88, 0x99, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbb, 0xbb, 0xe4,
	0xbd, 0x95, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe3, 0x80, 0x82,
	0x48, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac,
	0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0x48, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0xc2, 0x02, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x96, 0x02, 0xba, 0x47, 0x92, 0x02, 0x92, 0x02, 0x8e, 0x02, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8,
	0xe6, 0x9d, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x8b, 0xe4, 0xb8, 0x80, 0xe6,
	0xac, 0xa1, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe3, 0x80, 0x82,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7,
	0x89, 0x8c, 0xe5, 0xb0, 0x86, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xef, 0xbc, 0x8c, 0xe5, 0x88,
	0x99, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4,
	0xe7, 0x89, 0x8c, 0xe5, 0xbe, 0x88, 0xe6, 0x9c, 0x89, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb,
	0xa5, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0,
	0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x9d, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5,
	0x8f, 0xa6, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb,
	0xa4, 0xe7, 0x89, 0x8c, 0xe3, 0x80, 0x82, 0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xef, 0xbc, 0x8c,
	0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe9, 0x9a, 0x90, 0xe5, 0xbc, 0x8f, 0xe6, 0x8e, 0x88, 0xe4,
	0xba, 0x88, 0xe9, 0xa2, 0x81, 0xe5, 0x8f, 0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe9, 0xa2, 0x81, 0xe5, 0x8f, 0x91, 0xe5, 0x88, 0xb7,
	0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe3, 0x80, 0x82, 0x48, 0x06, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x70, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57,
	0xba, 0x47, 0x54, 0x92, 0x02, 0x51, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xe4, 0xb8, 0xad, 0xe6, 0x94, 0xb6, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xb8,
	0x80, 0xe6, 0xac, 0xa1, 0xe6, 0x80, 0xa7, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0x2f, 0xe8, 0xae,
	0xa4, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe3, 0x80, 0x82, 0x28, 0xe5, 0xbd, 0x93, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xa0, 0x81, 0xe6, 0xa8, 0xa1,
	0xe5, 0xbc, 0x8f, 0xe6, 0x97, 0xb6, 0x29, 0x48, 0x07, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x91, 0x08, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0xba, 0x47, 0x4e, 0x92,
	0x02, 0x4b, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xef, 0xbc,
	0x8c, 0xe5, 0xbf, 0x85, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe3, 0x80, 0x82, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0xe9, 0xa2, 0x81, 0xe5,
	0x8f, 0x91, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe3, 0x80, 0x82, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xbd, 0x02, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x96, 0x02, 0xba, 0x47, 0x92, 0x02, 0x92, 0x02, 0x8e, 0x02, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8,
	0xe6, 0x9d, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x8b, 0xe4, 0xb8, 0x80, 0xe6,
	0xac, 0xa1, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe3, 0x80, 0x82,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7,
	0x89, 0x8c, 0xe5, 0xb0, 0x86, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xef, 0xbc, 0x8c, 0xe5, 0x88,
	0x99, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4,
	0xe7, 0x89, 0x8c, 0xe5, 0xbe, 0x88, 0xe6, 0x9c, 0x89, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb,
	0xa5, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0,
	0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x9d, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5,
	0x8f, 0xa6, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb,
	0xa4, 0xe7, 0x89, 0x8c, 0xe3, 0x80, 0x82, 0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xef, 0xbc, 0x8c,
	0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe9, 0x9a, 0x90, 0xe5, 0xbc, 0x8f, 0xe6, 0x8e, 0x88, 0xe4,
	0xba, 0x88, 0xe9, 0xa2, 0x81, 0xe5, 0x8f, 0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe9, 0xa2, 0x81, 0xe5, 0x8f, 0x91, 0xe5, 0x88, 0xb7,
	0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe3, 0x80, 0x82, 0x52, 0x0d, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xb5, 0x01, 0x0a, 0x0a,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x94, 0x01, 0xba, 0x47, 0x90, 0x01, 0x8a, 0x02, 0x08, 0x1a, 0x06, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x92, 0x02, 0x81, 0x01, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe7, 0x9a, 0x84, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xe5, 0xa4,
	0xa7, 0xe5, 0xb0, 0x8f, 0xe5, 0x86, 0x99, 0xe4, 0xb8, 0x8d, 0xe6, 0x95, 0x8f, 0xe6, 0x84, 0x9f,
	0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xef, 0xbc, 0x8c, 0xe5,
	0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x98, 0xaf, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xe6, 0x88, 0x96, 0x6d, 0x61, 0x63, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x9a, 0xe5, 0xb8, 0xb8, 0xe5, 0x8f, 0xaa, 0xe6, 0x98, 0xaf, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe2, 0x80, 0x9c, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0xe2, 0x80, 0x9d, 0xe3, 0x80, 0x82, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xe2, 0x01, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0xbc, 0x01, 0xba, 0x47, 0xb8, 0x01, 0x92,
	0x02, 0xb4, 0x01, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe4, 0xb8,
	0xba, 0xe7, 0xa7, 0x92, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xae, 0xbf,
	0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xef,
	0xbc, 0x8c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0xe5, 0xba, 0x94, 0xe5, 0x9b,
	0x9e, 0xe5, 0xa4, 0x8d, 0xe6, 0x8e, 0x88, 0xe4, 0xba, 0x88, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae,
	0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe7, 0x9a, 0x84, 0xe6, 0x8c, 0x81, 0xe7, 0xbb, 0xad, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe7, 0x9c,
	0x81, 0xe7, 0x95, 0xa5, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c,
	0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0x96, 0xb9, 0xe5,
	0xbc, 0x8f, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xe3, 0x80, 0x82, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0xba, 0x47, 0x74, 0x92, 0x02, 0x71,
	0xe4, 0xbb, 0xa5, 0xe7, 0xa9, 0xba, 0xe6, 0xa0, 0xbc, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0xe7,
	0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x8e, 0x88, 0xe4, 0xba, 0x88, 0xe8, 0x8c,
	0x83, 0xe5, 0x9b, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0xaa, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xef, 0xbc, 0x8c, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0xe5, 0x88, 0x99, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbb, 0xbb,
	0xe4, 0xbd, 0x95, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe3, 0x80,
	0x82, 0x48, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xba, 0x47, 0x09, 0x92, 0x02, 0x06, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x15, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb6, 0xe7,
	0xab, 0xaf, 0xe9, 0xa1, 0x9e, 0xe5, 0x9e, 0x8b, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb6, 0xe4, 0xbb, 0xa4,
	0xe7, 0x89, 0x8c, 0xe8, 0xbd, 0xbd, 0xe4, 0xbd, 0x93, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22,
	0xff, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xba, 0x47, 0x0b, 0x92, 0x02, 0x08, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xba,
	0x47, 0x0b, 0x92, 0x02, 0x08, 0xe7, 0xa7, 0x9f, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x03, 0x74,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x47, 0x0c, 0x92, 0x02, 0x09, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe5, 0x90, 0x8d, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x29, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba,
	0x47, 0x0e, 0x92, 0x02, 0x0b, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe7, 0xab, 0xaf, 0x49, 0x44,
	0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x03, 0x61, 0x75,
	0x74, 0x2a, 0x6a, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x10, 0x04, 0x2a, 0x20, 0x0a,
	0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x10, 0x01, 0x2a,
	0x20, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x10,
	0x01, 0x32, 0x8a, 0x03, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0d, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xf7,
	0x01, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x42, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2d,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x53, 0x58, 0xaa, 0x02, 0x19, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x25, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_authentication_service_v1_authentication_proto_rawDescOnce sync.Once
	file_authentication_service_v1_authentication_proto_rawDescData []byte
)

func file_authentication_service_v1_authentication_proto_rawDescGZIP() []byte {
	file_authentication_service_v1_authentication_proto_rawDescOnce.Do(func() {
		file_authentication_service_v1_authentication_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_authentication_service_v1_authentication_proto_rawDesc), len(file_authentication_service_v1_authentication_proto_rawDesc)))
	})
	return file_authentication_service_v1_authentication_proto_rawDescData
}

var file_authentication_service_v1_authentication_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_authentication_service_v1_authentication_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_authentication_service_v1_authentication_proto_goTypes = []any{
	(GrantType)(0),                // 0: authentication.service.v1.GrantType
	(TokenType)(0),                // 1: authentication.service.v1.TokenType
	(ClientType)(0),               // 2: authentication.service.v1.ClientType
	(*LoginRequest)(nil),          // 3: authentication.service.v1.LoginRequest
	(*LoginResponse)(nil),         // 4: authentication.service.v1.LoginResponse
	(*ValidateTokenRequest)(nil),  // 5: authentication.service.v1.ValidateTokenRequest
	(*ValidateTokenResponse)(nil), // 6: authentication.service.v1.ValidateTokenResponse
	(*UserTokenPayload)(nil),      // 7: authentication.service.v1.UserTokenPayload
	(v1.UserAuthority)(0),         // 8: user.service.v1.UserAuthority
	(*emptypb.Empty)(nil),         // 9: google.protobuf.Empty
}
var file_authentication_service_v1_authentication_proto_depIdxs = []int32{
	2, // 0: authentication.service.v1.ValidateTokenRequest.client_type:type_name -> authentication.service.v1.ClientType
	7, // 1: authentication.service.v1.ValidateTokenResponse.claim:type_name -> authentication.service.v1.UserTokenPayload
	8, // 2: authentication.service.v1.UserTokenPayload.authority:type_name -> user.service.v1.UserAuthority
	3, // 3: authentication.service.v1.AuthenticationService.Login:input_type -> authentication.service.v1.LoginRequest
	9, // 4: authentication.service.v1.AuthenticationService.Logout:input_type -> google.protobuf.Empty
	3, // 5: authentication.service.v1.AuthenticationService.RefreshToken:input_type -> authentication.service.v1.LoginRequest
	5, // 6: authentication.service.v1.AuthenticationService.ValidateToken:input_type -> authentication.service.v1.ValidateTokenRequest
	4, // 7: authentication.service.v1.AuthenticationService.Login:output_type -> authentication.service.v1.LoginResponse
	9, // 8: authentication.service.v1.AuthenticationService.Logout:output_type -> google.protobuf.Empty
	4, // 9: authentication.service.v1.AuthenticationService.RefreshToken:output_type -> authentication.service.v1.LoginResponse
	6, // 10: authentication.service.v1.AuthenticationService.ValidateToken:output_type -> authentication.service.v1.ValidateTokenResponse
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_authentication_service_v1_authentication_proto_init() }
func file_authentication_service_v1_authentication_proto_init() {
	if File_authentication_service_v1_authentication_proto != nil {
		return
	}
	file_authentication_service_v1_authentication_proto_msgTypes[0].OneofWrappers = []any{}
	file_authentication_service_v1_authentication_proto_msgTypes[1].OneofWrappers = []any{}
	file_authentication_service_v1_authentication_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_authentication_service_v1_authentication_proto_rawDesc), len(file_authentication_service_v1_authentication_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_authentication_service_v1_authentication_proto_goTypes,
		DependencyIndexes: file_authentication_service_v1_authentication_proto_depIdxs,
		EnumInfos:         file_authentication_service_v1_authentication_proto_enumTypes,
		MessageInfos:      file_authentication_service_v1_authentication_proto_msgTypes,
	}.Build()
	File_authentication_service_v1_authentication_proto = out.File
	file_authentication_service_v1_authentication_proto_goTypes = nil
	file_authentication_service_v1_authentication_proto_depIdxs = nil
}
