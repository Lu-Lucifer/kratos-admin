syntax = "proto3";

package authentication.service.v1;

import "gnostic/openapi/v3/annotations.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

import "pagination/v1/pagination.proto";

// 用户认证服务
service UserCredentialService {
  // 查询列表
  rpc List (pagination.PagingRequest) returns (ListUserCredentialResponse) {}

  // 查询
  rpc Get (GetUserCredentialRequest) returns (UserCredential) {}
  rpc GetByIdentifier (GetUserCredentialByIdentifierRequest) returns (UserCredential) {}

  // 创建
  rpc Create (CreateUserCredentialRequest) returns (google.protobuf.Empty) {}

  // 更新
  rpc Update (UpdateUserCredentialRequest) returns (google.protobuf.Empty) {}

  // 删除
  rpc Delete (DeleteUserCredentialRequest) returns (google.protobuf.Empty) {}
  

  // 验证凭证
  rpc VerifyCredential (VerifyCredentialRequest) returns (VerifyCredentialResponse) {}

  // 修改凭证
  rpc ChangeCredential (ChangeCredentialRequest) returns (google.protobuf.Empty) {}

  // 重设凭证
  rpc ResetCredential (ResetCredentialRequest) returns (google.protobuf.Empty) {}
}

// 身份类型
enum IdentityType {
  PASSWORD = 0; // 用户名 + 密码
  EMAIL = 1; // 邮箱 + 密码
  PHONE = 2; // 手机号 + 验证码

  WECHAT = 10; // 微信
  QQ = 11; // QQ
  GOOGLE = 12; // Google
  FACEBOOK = 13; // Facebook
  APPLE = 14; // Apple
  TELEGRAM = 15; // Telegram
}

// 凭证类型
enum CredentialType {
    PASSWORD_HASH = 0; // 加密密码
    ACCESS_TOKEN = 1; // 访问令牌
    REFRESH_TOKEN = 2; // 刷新令牌
}

// 用户凭证状态
enum UserCredentialStatus {
  DISABLED = 0; // 凭证被禁用，用户无法使用该凭证进行认证（如账号被冻结）。
  ENABLED = 1; // 凭证有效，用户可正常使用该凭证登录或注册。
  EXPIRED = 2; // 凭证已过期（如临时凭证超期）。
  UNVERIFIED = 3; // 凭证未验证（需用户完成验证流程后才能生效）。
  REMOVED = 4; // 凭证已删除（逻辑删除，非物理删除，保留审计记录）。
  BLOCKED = 5; // 凭证被锁定（通常因多次错误尝试触发安全机制）。
  TEMPORARY = 6; // 临时凭证（仅在特定时间段内有效）。
}

// 用户凭证
message UserCredential {
  uint32 id = 1; // 主键ID

  optional uint32 user_id = 2 [
    json_name = "userId", (gnostic.openapi.v3.property) = {description: "关联主表的用户ID"}
  ];  // 关联主表的用户ID
  optional uint32 tenant_id = 3 [
    json_name = "tenantId", (gnostic.openapi.v3.property) = {description: "租户ID"}
  ]; // 租户ID

  optional IdentityType identity_type = 10 [
    json_name = "identityType",
    (gnostic.openapi.v3.property) = {description: "认证方式类型，如用户名+密码、邮箱+密码、手机号+验证码、第三方平台认证等"}
  ]; // 认证方式类型
  optional string identifier = 11 [
    json_name = "identifier",
    (gnostic.openapi.v3.property) = {description: "身份唯一标识符，如果是密码登录，则是用户名；如果是邮箱登录，则是邮箱地址；如果是手机号登录，则是手机号；如果是第三方平台登录，则是第三方平台的唯一ID（如微信的OpenID）"}
  ]; // 身份唯一标识符

  optional CredentialType credential_type = 20 [
    json_name = "credentialType",
    (gnostic.openapi.v3.property) = {description: "凭证类型，如加密密码、访问令牌、刷新令牌等"}
  ]; // 凭证类型
  optional string credential = 21 [
    json_name = "credential",
    (gnostic.openapi.v3.property) = {description: "凭证，如果是密码登录，则是密码的hash值；如果是邮箱登录，则是邮箱的验证码；如果是手机号登录，则是手机号的验证码；如果是第三方平台登录，则是第三方平台的access_token"}
  ]; // 凭证

  optional bool is_primary = 30 [
    json_name = "isPrimary",
    (gnostic.openapi.v3.property) = { description: "是否主认证方式，如果用户同时绑定了邮箱和手机号，那么可以指定邮箱为主要认证方式。" }
  ]; // 是否主认证方式

  optional UserCredentialStatus status = 31 [
    json_name = "status",
    (gnostic.openapi.v3.property) = { description: "凭证状态" }
  ]; // 凭证状态

  optional string extra_info = 32 [
    json_name = "extraInfo",
    (gnostic.openapi.v3.property) = { description: "扩展信息，如果是第三方平台认证，可以记录第三方平台的用户信息。" }
  ]; // 扩展信息

  optional uint32 create_by = 100 [json_name = "createBy", (gnostic.openapi.v3.property) = {description: "创建者ID"}]; // 创建者ID
  optional uint32 update_by = 101 [json_name = "updateBy", (gnostic.openapi.v3.property) = {description: "更新者ID"}]; // 更新者ID

  optional string create_time = 200 [json_name = "createTime", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional string update_time = 201 [json_name = "updateTime", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional string delete_time = 202 [json_name = "deleteTime", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 查询列表 - 答复
message ListUserCredentialResponse {
  repeated UserCredential items = 1;
  uint32 total = 2;
}

// 更新 - 请求
message UpdateUserCredentialRequest {
  UserCredential data = 1;

  google.protobuf.FieldMask update_mask = 2 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realname,username"}
    },
    json_name = "updateMask"
  ]; // 要更新的字段列表

  optional bool allow_missing = 3 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 创建 - 请求
message CreateUserCredentialRequest {
  UserCredential data = 1;
}

// 删除 - 请求
message DeleteUserCredentialRequest {
  uint32 id = 1;
}

// 查询 - 请求
message GetUserCredentialRequest {
  uint32 id = 1;
}

// 查询 - 请求
message GetUserCredentialByIdentifierRequest {
  IdentityType identity_type = 1 [
    json_name = "identityType", (gnostic.openapi.v3.property) = {description: "身份类型"}
  ]; // 身份类型

  string identifier = 2 [
    json_name = "identifier", (gnostic.openapi.v3.property) = {description: "身份唯一标识符"}
  ]; // 身份唯一标识符
}

// 验证凭证 - 请求
message VerifyCredentialRequest {
  IdentityType identity_type = 1 [
    json_name = "identityType", (gnostic.openapi.v3.property) = {description: "身份类型"}
  ]; // 身份类型

  string identifier = 2 [
    json_name = "identifier", (gnostic.openapi.v3.property) = {description: "身份唯一标识符"}
  ]; // 身份唯一标识符

  string credential = 3 [
    json_name = "credential", (gnostic.openapi.v3.property) = {description: "凭证"}
  ]; // 凭证
}
// 验证凭证 - 答复
message VerifyCredentialResponse {
  bool success = 1;
}

// 修改凭证 - 请求
message ChangeCredentialRequest {
  IdentityType identity_type = 1 [
    json_name = "identityType", (gnostic.openapi.v3.property) = {description: "身份类型"}
  ]; // 身份类型

  string identifier = 2 [
    json_name = "identifier", (gnostic.openapi.v3.property) = {description: "身份唯一标识符"}
  ]; // 身份唯一标识符

  string old_credential = 3 [
    json_name = "oldCredential", (gnostic.openapi.v3.property) = {description: "旧凭证"}
  ]; // 旧凭证

  string new_credential = 4 [
    json_name = "newCredential", (gnostic.openapi.v3.property) = {description: "新凭证"}
  ]; // 新凭证
}

// 重设凭证 - 请求
message ResetCredentialRequest {
  IdentityType identity_type = 1 [
    json_name = "identityType", (gnostic.openapi.v3.property) = {description: "身份类型"}
  ]; // 身份类型

  string identifier = 2 [
    json_name = "identifier", (gnostic.openapi.v3.property) = {description: "身份唯一标识符"}
  ]; // 身份唯一标识符

  string new_credential = 3 [
    json_name = "newCredential", (gnostic.openapi.v3.property) = {description: "新凭证"}
  ]; // 新凭证
}
